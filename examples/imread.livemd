<!-- vim: syntax=markdown -->

# core - imread related

## Setup

```elixir
# remove the following line (or set to `false`) to compile evision from source
# note that to compile from source, you may need at least 1GB RAM
System.put_env("EVISION_PREFER_PRECOMPILED", "true")

Mix.install([
  {:evision, "~> 0.1", github: "cocoa-xu/evision", tag: "v0.1.4"},
  {:kino, "~> 0.6"}
])
```

## Helper Function

```elixir
defmodule Helper do
  def download!(url, save_as, overwrite \\ false)

  def download!(url, save_as, false) do
    unless File.exists?(save_as) do
      download!(url, save_as, true)
    end

    :ok
  end

  def download!(url, save_as, true) do
    http_opts = []
    opts = [body_format: :binary]
    arg = {url, []}

    body =
      case :httpc.request(:get, arg, http_opts, opts) do
        {:ok, {{_, 200, _}, _, body}} ->
          body

        {:error, reason} ->
          raise inspect(reason)
      end

    File.write!(save_as, body)
  end
end
```

## alias
```elixir
alias Evision, as: Cv
```

## Cv.imread

### Read an image from file

```elixir
# change to the file's directory
# or somewhere you have write permission
File.cd!(__DIR__)
```

```output
:ok
```

```elixir
lenna_test_image_path = Path.join(__DIR__, "lenna_test_image.png")

Helper.download!(
  "https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png",
  lenna_test_image_path
)

{:ok, mat} = Cv.imread(lenna_test_image_path)
{:ok, {_height = 512, _width = 512, _channels = 3}} = Cv.Mat.shape(mat)
{:ok, encoded} = Cv.imencode(".png", mat)

encoded
|> IO.iodata_to_binary()
|> Kino.Image.new(:png)
```

### Resize image `Cv.resize`

```elixir
{:ok, resized_mat} = Cv.resize(mat, [_width = 256, _height = 128])
{:ok, {128, 256, 3}} = Cv.Mat.shape(resized_mat)
{:ok, encoded} = Cv.imencode(".png", resized_mat)

encoded
|> IO.iodata_to_binary()
|> Kino.Image.new(:png)
```

### Encode and decode image in memory

```elixir
# encode in memory
{:ok, encoded_in_memory} = Cv.imencode(".png", resized_mat)
encoded_in_memory = encoded_in_memory |> IO.iodata_to_binary()

# decode in memory
{:ok, decoded_mat} = Cv.imdecode(encoded_in_memory, Cv.cv_IMREAD_ANYCOLOR())
{:ok, {128, 256, 3}} = Cv.Mat.shape(decoded_mat)
```

### Read png file with/without alpha channel

```elixir
# download the test image (has alpha channel)
download_path = Path.join(__DIR__, "test.png")
Helper.download!("https://github.com/cocoa-xu/evision/raw/main/test/test.png", download_path)
```

```elixir
{:ok, without_alpha} =
  download_path
  |> Cv.imread()

Cv.Mat.shape(without_alpha)
```

```elixir
{:ok, with_alpha} =
  download_path
  |> Cv.imread(flags: Cv.cv_IMREAD_UNCHANGED())

Cv.Mat.shape(with_alpha)
```

### Read an image as grayscale

```elixir
{:ok, gray_scale_mat} =
  lenna_test_image_path
  |> Cv.imread(flags: Cv.cv_IMREAD_GRAYSCALE())

{:ok, gray_scale} = Cv.imencode(".png", gray_scale_mat)

gray_scale
|> IO.iodata_to_binary()
|> Kino.Image.new(:png)
```
