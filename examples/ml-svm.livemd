<!-- vim: syntax=markdown -->

<!-- livebook:{"persist_outputs":true} -->

# Evision ML - SVM

```elixir
# set `EVISION_PREFER_PRECOMPILED` to `false` 
# if you prefer `:evision` to be compiled from source
# note that to compile from source, you may need at least 1GB RAM
# System.put_env("EVISION_PREFER_PRECOMPILED", "false")

Mix.install([
  {:evision, "~> 0.1.9"},
  {:req, "~> 0.3"},
  {:kino, "~> 0.7"}
])
```

## Set up training data

This example is based on the [Introduction to Support Vector Machines](https://docs.Cv.org/4.x/d1/d73/tutorial_introduction_to_svm.html) from Cv.

<!-- livebook:{"break_markdown":true} -->

### alias

```elixir
alias Evision, as: Cv
```

<!-- livebook:{"output":true} -->

```
Evision
```

```elixir
labels = [1, -1, -1, -1]
training_data = [[501, 10], [255, 10], [501, 255], [10, 501]]

{:ok, labels_mat} =
  Cv.Mat.from_binary(
    Enum.into(labels, <<>>, fn d -> <<d::integer-size(32)-little>> end),
    {:s, 32},
    4,
    1,
    1
  )

{:ok, training_data_mat} =
  Cv.Mat.from_binary(
    Enum.into(List.flatten(training_data), <<>>, fn d -> <<d::float-size(32)-little>> end),
    {:f, 32},
    4,
    2,
    1
  )
```

<!-- livebook:{"output":true} -->

```
{:ok, #Reference<0.910554608.1494089745.145367>}
```

### Train the SVM

```elixir
svm = Cv.ML.SVM.create!()
svm = Cv.ML.SVM.setType!(svm, Cv.cv_C_SVC())
svm = Cv.ML.SVM.setKernel!(svm, Cv.cv_LINEAR())
svm = Cv.ML.SVM.setTermCriteria!(svm, {Cv.cv_MAX_ITER(), 100, 0.000001})
:ok = Cv.ML.SVM.train(svm, training_data_mat, Cv.cv_ROW_SAMPLE(), labels_mat)
:ok = Cv.ML.SVM.isTrained(svm)
```

<!-- livebook:{"output":true} -->

```
:ok
```

### Show support vectors

```elixir
sv = Cv.ML.SVM.getUncompressedSupportVectors!(svm)
{rows, cols} = Cv.Mat.shape!(sv)
sv_binary = Cv.Mat.to_binary!(sv)
float_bytes = 4

support_vector =
  for i <- (rows - 1)..0, reduce: [] do
    support_vector ->
      current_vector =
        for j <- (cols - 1)..0, reduce: [] do
          vec ->
            <<float_data::float-size(32)-little>> =
              :binary.part(sv_binary, (i * cols + j) * float_bytes, 4)

            [trunc(float_data) | vec]
        end

      [current_vector | support_vector]
  end

[[501, 10], [255, 10], [501, 255]] = support_vector
support_vector
```

<!-- livebook:{"output":true} -->

```
[[501, 10], [255, 10], [501, 255]]
```

### Data for visual representation

```elixir
green = [0, 255, 0]
blue = [255, 0, 0]
width = 512
height = 512

response_data =
  for x <- (width - 1)..0, y <- (height - 1)..0, reduce: [] do
    acc ->
      {:ok, sample} =
        Cv.Mat.from_binary(
          <<y::float-size(32)-little, x::float-size(32)-little>>,
          {:f, 32},
          1,
          2,
          1
        )

      {:ok, {_, response_mat}} = Cv.ML.SVM.predict(svm, sample)
      {:ok, {1, 1}} = Cv.Mat.shape(response_mat)
      {:ok, <<response::float-size(32)-little>>} = Cv.Mat.to_binary(response_mat)
      response = trunc(response)

      case response do
        1 ->
          [green | acc]

        -1 ->
          [blue | acc]
      end
  end

response_data = response_data |> List.flatten() |> IO.iodata_to_binary()
{:ok, response_map} = Cv.Mat.from_binary(response_data, {:u, 8}, height, width, 3)

# show the training data
thickness = 1

{:ok, response_map} =
  Cv.circle(response_map, Enum.at(training_data, 0), 5, [0, 0, 0], thickness: thickness)

{:ok, response_map} =
  Cv.circle(response_map, Enum.at(training_data, 1), 5, [255, 255, 255], thickness: thickness)

{:ok, response_map} =
  Cv.circle(response_map, Enum.at(training_data, 2), 5, [255, 255, 255], thickness: thickness)

{:ok, response_map} =
  Cv.circle(response_map, Enum.at(training_data, 3), 5, [255, 255, 255], thickness: thickness)

# show support vectors
{:ok, response_map} =
  Cv.circle(response_map, Enum.at(support_vector, 0), 6, [128, 128, 128], thickness: thickness)

{:ok, response_map} =
  Cv.circle(response_map, Enum.at(support_vector, 1), 6, [128, 128, 128], thickness: thickness)

{:ok, response_map} =
  Cv.circle(response_map, Enum.at(support_vector, 2), 6, [128, 128, 128], thickness: thickness)

Cv.imencode!(".png", response_map)
|> Kino.Image.new(:png)
```
