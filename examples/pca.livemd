<!-- vim: syntax=markdown -->

# core - PCA

## Setup

```elixir
# remove the following line (or set to `false`) to compile evision from source
# note that to compile from source, you may need at least 1GB RAM
System.put_env("EVISION_PREFER_PRECOMPILED", "true")

Mix.install([
  {:evision, "~> 0.1", github: "cocoa-xu/evision", tag: "v0.1.4"},
  {:kino, "~> 0.6"}
])

# this example is based on https://docs.Cv.org/4.x/d1/dee/tutorial_introduction_to_pca.html
```

## Helper Function

```elixir
defmodule Helper do
  def download!(url, save_as, overwrite \\ false)

  def download!(url, save_as, false) do
    unless File.exists?(save_as) do
      download!(url, save_as, true)
    end

    :ok
  end

  def download!(url, save_as, true) do
    http_opts = []
    opts = [body_format: :binary]
    arg = {url, []}

    body =
      case :httpc.request(:get, arg, http_opts, opts) do
        {:ok, {{_, 200, _}, _, body}} ->
          body

        {:error, reason} ->
          raise inspect(reason)
      end

    File.write!(save_as, body)
  end
end
```

## alias
```elixir
alias Evision, as: Cv
```

## Cv.PCA

```elixir
# change to the file's directory
# or somewhere you have write permission
File.cd!(__DIR__)
```

```output
:ok
```

Download the test image
```elixir
Helper.download!("https://docs.Cv.org/4.x/pca_test1.jpg", "opencv_pca_test.jpg")
```

```elixir
# Load image in grayscale
{:ok, gray} =
  Path.join(__DIR__, "opencv_pca_test.jpg")
  |> Cv.imread(flags: Cv.cv_IMREAD_GRAYSCALE())

# Convert image to binary
{:ok, {_, bw}} =
  Cv.threshold(gray, 50, 255, Cv.cv_THRESH_BINARY() ||| Cv.cv_THRESH_OTSU())

# Find all the contours in the thresholded image
{:ok, {contours, _}} =
  Cv.findContours(bw, Cv.cv_RETR_LIST(), Cv.cv_CHAIN_APPROX_NONE())

contours =
  contours
  # Calculate the area of each contour
  |> Enum.map(&{elem(Cv.contourArea(&1), 1), &1})
  # Ignore contours that are too small or too large
  |> Enum.reject(fn {area, _c} -> area < 100 or area > 100_000 end)

# area
Enum.map(contours, &elem(&1, 0))
```

PCA analysis

```elixir
contours = Enum.map(contours, &elem(&1, 1))
pca_analysis =
  for c <- contours, reduce: [] do
    acc ->
      # Construct a buffer used by the pca analysis
      {:ok, shape} = Cv.Mat.shape(c)
      sz = elem(shape, 0)
      {:ok, pts_binary} = Cv.Mat.to_binary(c)
      {:ok, type} = Cv.Mat.type(c)
      {:ok, data_pts} = Cv.Mat.from_binary(pts_binary, type, sz, 2, 1)
      {:ok, data_pts} = Cv.Mat.as_type(data_pts, {:f, 64})

      # Perform PCA analysis
      {:ok, {mean, eigenvectors, eigenvalues}} = Cv.pcaCompute2(data_pts, Cv.Mat.empty!())
      eigenvectors = Cv.Nx.to_nx(eigenvectors)
      eigenvalues = Cv.Nx.to_nx(eigenvalues)

      # Store the center of the object
      {:ok,
       <<centre_x::float()-size(64)-little, centre_y::float()-size(64)-little, _::binary>>} =
        Cv.Mat.to_binary(mean)

      centre_x = trunc(centre_x)
      centre_y = trunc(centre_y)

      # Store the eigenvalues and eigenvectors
      eval00 = Nx.slice(eigenvalues, [0, 0], [1, 1]) |> Nx.to_flat_list() |> Enum.at(0)
      eval10 = Nx.slice(eigenvalues, [1, 0], [1, 1]) |> Nx.to_flat_list() |> Enum.at(0)

      evec00 = Nx.slice(eigenvectors, [0, 0], [1, 1]) |> Nx.to_flat_list() |> Enum.at(0)
      evec01 = Nx.slice(eigenvectors, [0, 1], [1, 1]) |> Nx.to_flat_list() |> Enum.at(0)
      evec10 = Nx.slice(eigenvectors, [1, 0], [1, 1]) |> Nx.to_flat_list() |> Enum.at(0)
      evec11 = Nx.slice(eigenvectors, [1, 1], [1, 1]) |> Nx.to_flat_list() |> Enum.at(0)

      # Calculate the principal components
      p1 =
         {trunc(Float.round(centre_x + 0.02 * evec00 * eval00)), trunc(Float.round(centre_y + 0.02 * evec01 * eval00))}

      p2 =
         {trunc(Float.round(centre_x - 0.02 * evec10 * eval10)), trunc(Float.round(centre_y - 0.02 * evec11 * eval10))}

      cntr = [centre_x, centre_y]
      [{cntr, p1, p2} | acc]
  end
pca_analysis = Enum.reverse(pca_analysis)
```

## visualisation
```elixir
{:ok, src} =
  Path.join(__DIR__, "opencv_pca_test.jpg")
  |> Cv.imread()

# Draw each contour
src = for index <- 0..(Enum.count(contours) - 1), reduce: src do
  src ->
    {:ok, src} = Cv.drawContours(src, contours, index, [0, 0, 255], thickness: 2)
    src
end
```

A helper function

```elixir
defmodule PACHelper do
    def drawAxis(src, {px, py}, {qx, qy}, colour, scale) do
        angle = :math.atan2(py - qy, px - qx)
        hypotenuse = :math.sqrt((py - qy) * (py - qy) + (px - qx) * (px - qx))
        qx = trunc(px - scale * hypotenuse * :math.cos(angle))
        qy = trunc(py - scale * hypotenuse * :math.sin(angle))
        {:ok, src} = Cv.line(src, [px, py], [qx, qy], colour, thickness: 1, style: Cv.cv_LINE_AA)

        px = trunc(qx + 9 * :math.cos(angle + :math.pi / 4))
        py = trunc(qy + 9 * :math.sin(angle + :math.pi / 4))
        {:ok, src} = Cv.line(src, [px, py], [qx, qy], colour, thickness: 1, style: Cv.cv_LINE_AA)

        px = trunc(qx + 9 * :math.cos(angle - :math.pi / 4))
        py = trunc(qy + 9 * :math.sin(angle - :math.pi / 4))
        Cv.line(src, [px, py], [qx, qy], colour, thickness: 1, style: Cv.cv_LINE_AA)
    end
end
```

## Draw the principal components
```elixir
src = for {cntr, p1, p2} <- pca_analysis, reduce: src do
  src ->
    {:ok, src} = Cv.circle(src, cntr, 3, [255, 0, 255], thickness: 2)
    {:ok, src} = PACHelper.drawAxis(src, List.to_tuple(cntr), p1, [0, 255, 0], 1)
    {:ok, src} = PACHelper.drawAxis(src, List.to_tuple(cntr), p2, [255, 255, 0], 5)
    src
end

{:ok, result} = Cv.imencode(".png", src)

result
|> IO.iodata_to_binary()
|> Kino.Image.new(:png)
```
