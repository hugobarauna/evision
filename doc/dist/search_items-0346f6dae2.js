searchNodes=[{"doc":"","ref":"OpenCV.html","title":"OpenCV","type":"module"},{"doc":"return a list of enabled modules in this build","ref":"OpenCV.html#__enabled_modules__/0","title":"OpenCV.__enabled_modules__/0","type":"function"},{"doc":"","ref":"OpenCV.html#absdiff/2","title":"OpenCV.absdiff/2","type":"function"},{"doc":"Calculates the per-element absolute difference between two arrays or between an array and a scalar. The function cv::absdiff calculates: Absolute difference between two arrays when they have the same size and type: \\f[\\texttt{dst}(I) = \\texttt{saturate} (| \\texttt{src1}(I) - \\texttt{src2}(I)|)\\f] Absolute difference between an array and a scalar when the second array is constructed from Scalar or has as many elements as the number of channels in src1 : \\f[\\texttt{dst}(I) = \\texttt{saturate} (| \\texttt{src1}(I) - \\texttt{src2} |)\\f] Absolute difference between a scalar and an array when the first array is constructed from Scalar or has as many elements as the number of channels in src2 : \\f[\\texttt{dst}(I) = \\texttt{saturate} (| \\texttt{src1} - \\texttt{src2}(I) |)\\f] where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently. Note : Saturation is not applied when the arrays have the depth CV_32S. You may even get a negative value in the case of overflow. src1 . src2 . dst . @sa cv::abs(const Mat&amp;) dst : UMat Python prototype (for reference): absdiff ( src1 , src2 [ , dst ] ) -&gt; dst","ref":"OpenCV.html#absdiff/3","title":"OpenCV.absdiff/3","type":"function"},{"doc":"","ref":"OpenCV.html#accumulate/2","title":"OpenCV.accumulate/2","type":"function"},{"doc":"Adds an image to the accumulator image. The function adds src or some of its elements to dst : \\f[\\texttt{dst} (x,y) \\leftarrow \\texttt{dst} (x,y) + \\texttt{src} (x,y) \\quad \\text{if} \\quad \\texttt{mask} (x,y) \\ne 0\\f] The function supports multi-channel images. Each channel is processed independently. The function cv::accumulate can be used, for example, to collect statistics of a scene background viewed by a still camera and for the further foreground-background segmentation. src . dst . mask . @sa accumulateSquare, accumulateProduct, accumulateWeighted mask : UMat Python prototype (for reference): accumulate ( src , dst [ , mask ] ) -&gt; dst","ref":"OpenCV.html#accumulate/3","title":"OpenCV.accumulate/3","type":"function"},{"doc":"","ref":"OpenCV.html#accumulateproduct/3","title":"OpenCV.accumulateproduct/3","type":"function"},{"doc":"Adds the per-element product of two input images to the accumulator image. The function adds the product of two images or their selected regions to the accumulator dst : \\f[\\texttt{dst} (x,y) \\leftarrow \\texttt{dst} (x,y) + \\texttt{src1} (x,y) \\cdot \\texttt{src2} (x,y) \\quad \\text{if} \\quad \\texttt{mask} (x,y) \\ne 0\\f] The function supports multi-channel images. Each channel is processed independently. src1 . src2 . dst . floating-point. mask . @sa accumulate, accumulateSquare, accumulateWeighted mask : UMat Python prototype (for reference): accumulateProduct ( src1 , src2 , dst [ , mask ] ) -&gt; dst","ref":"OpenCV.html#accumulateproduct/4","title":"OpenCV.accumulateproduct/4","type":"function"},{"doc":"","ref":"OpenCV.html#accumulatesquare/2","title":"OpenCV.accumulatesquare/2","type":"function"},{"doc":"Adds the square of a source image to the accumulator image. The function adds the input image src or its selected region, raised to a power of 2, to the accumulator dst : \\f[\\texttt{dst} (x,y) \\leftarrow \\texttt{dst} (x,y) + \\texttt{src} (x,y)^2 \\quad \\text{if} \\quad \\texttt{mask} (x,y) \\ne 0\\f] The function supports multi-channel images. Each channel is processed independently. src . dst . floating-point. mask . @sa accumulateSquare, accumulateProduct, accumulateWeighted mask : UMat Python prototype (for reference): accumulateSquare ( src , dst [ , mask ] ) -&gt; dst","ref":"OpenCV.html#accumulatesquare/3","title":"OpenCV.accumulatesquare/3","type":"function"},{"doc":"","ref":"OpenCV.html#accumulateweighted/3","title":"OpenCV.accumulateweighted/3","type":"function"},{"doc":"Updates a running average. The function calculates the weighted sum of the input image src and the accumulator dst so that dst becomes a running average of a frame sequence: \\f[\\texttt{dst} (x,y) \\leftarrow (1- \\texttt{alpha} ) \\cdot \\texttt{dst} (x,y) + \\texttt{alpha} \\cdot \\texttt{src} (x,y) \\quad \\text{if} \\quad \\texttt{mask} (x,y) \\ne 0\\f] That is, alpha regulates the update speed (how fast the accumulator &quot;forgets&quot; about earlier images). The function supports multi-channel images. Each channel is processed independently. src . dst . floating-point. alpha . mask . @sa accumulate, accumulateSquare, accumulateProduct mask : UMat Python prototype (for reference): accumulateWeighted ( src , dst , alpha [ , mask ] ) -&gt; dst","ref":"OpenCV.html#accumulateweighted/4","title":"OpenCV.accumulateweighted/4","type":"function"},{"doc":"","ref":"OpenCV.html#adaptivethreshold/6","title":"OpenCV.adaptivethreshold/6","type":"function"},{"doc":"Applies an adaptive threshold to an array. The function transforms a grayscale image to a binary image according to the formulae: THRESH_BINARY \\f[dst(x,y) = \\fork{\\texttt{maxValue}}{if (src(x,y) &gt; T(x,y))}{0}{otherwise}\\f] THRESH_BINARY_INV \\f[dst(x,y) = \\fork{0}{if (src(x,y) &gt; T(x,y))}{\\texttt{maxValue}}{otherwise}\\f] where \\f$T(x,y)\\f$ is a threshold calculated individually for each pixel (see adaptiveMethod parameter). The function can process the image in-place. src . dst . maxValue . adaptiveMethod . The #BORDER_REPLICATE | #BORDER_ISOLATED is used to process boundaries. thresholdType . see #ThresholdTypes. blockSize . pixel: 3, 5, 7, and so on. c . is positive but may be zero or negative as well. @sa threshold, blur, GaussianBlur dst : UMat Python prototype (for reference): adaptiveThreshold ( src , maxValue , adaptiveMethod , thresholdType , blockSize , C [ , dst ] ) -&gt; dst","ref":"OpenCV.html#adaptivethreshold/7","title":"OpenCV.adaptivethreshold/7","type":"function"},{"doc":"","ref":"OpenCV.html#add/2","title":"OpenCV.add/2","type":"function"},{"doc":"Calculates the per-element sum of two arrays or an array and a scalar. The function add calculates: Sum of two arrays when both input arrays have the same size and the same number of channels: \\f[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1}(I) + \\texttt{src2}(I)) \\quad \\texttt{if mask}(I) \\ne0\\f] Sum of an array and a scalar when src2 is constructed from Scalar or has the same number of elements as src1.channels() : \\f[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1}(I) + \\texttt{src2} ) \\quad \\texttt{if mask}(I) \\ne0\\f] Sum of a scalar and an array when src1 is constructed from Scalar or has the same number of elements as src2.channels() : \\f[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1} + \\texttt{src2}(I) ) \\quad \\texttt{if mask}(I) \\ne0\\f] where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently. The first function in the list above can be replaced with matrix expressions: dst = src1 + src2; dst += src1; // equivalent to add(dst, src1, dst); The input arrays and the output array can all have the same or different depths. For example, you can add a 16-bit unsigned array to a 8-bit signed array and store the sum as a 32-bit floating-point array. Depth of the output array is determined by the dtype parameter. In the second and third cases above, as well as in the first case, when src1.depth() == src2.depth(), dtype can be set to the default -1. In this case, the output array will have the same depth as the input array, be it src1, src2 or both. Note : Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow. src1 . src2 . dst . depth is defined by dtype or src1/src2. mask . output array to be changed. dtype . @sa subtract, addWeighted, scaleAdd, Mat::convertTo dst : UMat mask : UMat dtype : int Python prototype (for reference): add ( src1 , src2 [ , dst [ , mask [ , dtype ] ] ] ) -&gt; dst","ref":"OpenCV.html#add/3","title":"OpenCV.add/3","type":"function"},{"doc":"","ref":"OpenCV.html#addtext/4","title":"OpenCV.addtext/4","type":"function"},{"doc":"Draws a text on the image. img . text . org . nameFont . Times*). If the font is not found, a default one is used. pointSize . font is set to a system-dependent default value. Generally, this is 12 points. color . weight . style . spacing . pointSize : int color : Scalar weight : int style : int spacing : int Python prototype (for reference): addText ( img , text , org , nameFont [ , pointSize [ , color [ , weight [ , style [ , spacing ] ] ] ] ] ) -&gt; None","ref":"OpenCV.html#addtext/5","title":"OpenCV.addtext/5","type":"function"},{"doc":"","ref":"OpenCV.html#addweighted/5","title":"OpenCV.addweighted/5","type":"function"},{"doc":"Calculates the weighted sum of two arrays. The function addWeighted calculates the weighted sum of two arrays as follows: \\f[\\texttt{dst} (I)= \\texttt{saturate} ( \\texttt{src1} (I)* \\texttt{alpha} + \\texttt{src2} (I)* \\texttt{beta} + \\texttt{gamma} )\\f] where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently. The function can be replaced with a matrix expression: dst = src1*alpha + src2*beta + gamma; Note : Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow. src1 . alpha . src2 . beta . gamma . dst . dtype . can be set to -1, which will be equivalent to src1.depth(). @sa add, subtract, scaleAdd, Mat::convertTo dst : UMat dtype : int Python prototype (for reference): addWeighted ( src1 , alpha , src2 , beta , gamma [ , dst [ , dtype ] ] ) -&gt; dst","ref":"OpenCV.html#addweighted/6","title":"OpenCV.addweighted/6","type":"function"},{"doc":"","ref":"OpenCV.html#affinefeature_create/1","title":"OpenCV.affinefeature_create/1","type":"function"},{"doc":"backend . maxTilt . minTilt . tiltStep . rotateStepBase . maxTilt : int minTilt : int tiltStep : float rotateStepBase : float Python prototype (for reference): AffineFeature_create ( backend [ , maxTilt [ , minTilt [ , tiltStep [ , rotateStepBase ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#affinefeature_create/2","title":"OpenCV.affinefeature_create/2","type":"function"},{"doc":"","ref":"OpenCV.html#agastfeaturedetector_create/0","title":"OpenCV.agastfeaturedetector_create/0","type":"function"},{"doc":"threshold : int nonmaxSuppression : bool type : AgastFeatureDetector_DetectorType Python prototype (for reference): AgastFeatureDetector_create ( [ , threshold [ , nonmaxSuppression [ , type ] ] ] ) -&gt; retval","ref":"OpenCV.html#agastfeaturedetector_create/1","title":"OpenCV.agastfeaturedetector_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#akaze_create/0","title":"OpenCV.akaze_create/0","type":"function"},{"doc":"The AKAZE constructor descriptor_type . DESCRIPTOR_KAZE_UPRIGHT, DESCRIPTOR_MLDB or DESCRIPTOR_MLDB_UPRIGHT. descriptor_size . descriptor_channels . threshold . nOctaves . nOctaveLayers . diffusivity . DIFF_CHARBONNIER descriptor_type : AKAZE_DescriptorType descriptor_size : int descriptor_channels : int threshold : float nOctaves : int nOctaveLayers : int diffusivity : KAZE_DiffusivityType Python prototype (for reference): AKAZE_create ( [ , descriptor_type [ , descriptor_size [ , descriptor_channels [ , threshold [ , nOctaves [ , nOctaveLayers [ , diffusivity ] ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#akaze_create/1","title":"OpenCV.akaze_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#applycolormap/2","title":"OpenCV.applycolormap/2","type":"function"},{"doc":"Applies a GNU Octave/MATLAB equivalent colormap on a given image. src . dst . colormap . dst : UMat Python prototype (for reference): applyColorMap ( src , colormap [ , dst ] ) -&gt; dst","ref":"OpenCV.html#applycolormap/3","title":"OpenCV.applycolormap/3","type":"function"},{"doc":"","ref":"OpenCV.html#approxpolydp/3","title":"OpenCV.approxpolydp/3","type":"function"},{"doc":"Approximates a polygonal curve(s) with the specified precision. The function cv::approxPolyDP approximates a curve or a polygon with another curve/polygon with less vertices so that the distance between them is less or equal to the specified precision. It uses the Douglas-Peucker algorithm http://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm curve . approxCurve . epsilon . between the original curve and its approximation. closed . connected). Otherwise, it is not closed. approxCurve : UMat Python prototype (for reference): approxPolyDP ( curve , epsilon , closed [ , approxCurve ] ) -&gt; approxCurve","ref":"OpenCV.html#approxpolydp/4","title":"OpenCV.approxpolydp/4","type":"function"},{"doc":"","ref":"OpenCV.html#arclength/2","title":"OpenCV.arclength/2","type":"function"},{"doc":"","ref":"OpenCV.html#arrowedline/4","title":"OpenCV.arrowedline/4","type":"function"},{"doc":"Draws an arrow segment pointing from the first point to the second one. The function cv::arrowedLine draws an arrow between pt1 and pt2 points in the image. See also #line. img : Image. pt1 . pt2 . color . thickness . line_type . shift . tipLength . thickness : int line_type : int shift : int tipLength : double Python prototype (for reference): arrowedLine ( img , pt1 , pt2 , color [ , thickness [ , line_type [ , shift [ , tipLength ] ] ] ] ) -&gt; img","ref":"OpenCV.html#arrowedline/5","title":"OpenCV.arrowedline/5","type":"function"},{"doc":"","ref":"OpenCV.html#asyncarray_asyncarray/0","title":"OpenCV.asyncarray_asyncarray/0","type":"function"},{"doc":"","ref":"OpenCV.html#batchdistance/3","title":"OpenCV.batchdistance/3","type":"function"},{"doc":"naive nearest neighbor finder see http://en.wikipedia.org/wiki/Nearest_neighbor_search @todo document dist : UMat nidx : UMat normType : int k : int mask : UMat update : int crosscheck : bool Python prototype (for reference): batchDistance ( src1 , src2 , dtype [ , dist [ , nidx [ , normType [ , K [ , mask [ , update [ , crosscheck ] ] ] ] ] ] ] ) -&gt; dist , nidx","ref":"OpenCV.html#batchdistance/4","title":"OpenCV.batchdistance/4","type":"function"},{"doc":"","ref":"OpenCV.html#bfmatcher_bfmatcher/0","title":"OpenCV.bfmatcher_bfmatcher/0","type":"function"},{"doc":"Brute-force matcher constructor (obsolete). Please use BFMatcher.create() normType : int crossCheck : bool Python prototype (for reference): BFMatcher ( [ , normType [ , crossCheck ] ] ) -&gt; &lt; BFMatcher object &gt;","ref":"OpenCV.html#bfmatcher_bfmatcher/1","title":"OpenCV.bfmatcher_bfmatcher/1","type":"function"},{"doc":"","ref":"OpenCV.html#bfmatcher_create/0","title":"OpenCV.bfmatcher_create/0","type":"function"},{"doc":"Brute-force matcher create method. normType . preferable choices for SIFT and SURF descriptors, NORM_HAMMING should be used with ORB, BRISK and BRIEF, NORM_HAMMING2 should be used with ORB when WTA_K==3 or 4 (see ORB::ORB constructor description). crossCheck . nearest neighbors for each query descriptor. If crossCheck==true, then the knnMatch() method with k=1 will only return pairs (i,j) such that for i-th query descriptor the j-th descriptor in the matcher's collection is the nearest and vice versa, i.e. the BFMatcher will only return consistent pairs. Such technique usually produces best results with minimal number of outliers when there are enough matches. This is alternative to the ratio test, used by D. Lowe in SIFT paper. normType : int crossCheck : bool Python prototype (for reference): BFMatcher_create ( [ , normType [ , crossCheck ] ] ) -&gt; retval","ref":"OpenCV.html#bfmatcher_create/1","title":"OpenCV.bfmatcher_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#bilateralfilter/4","title":"OpenCV.bilateralfilter/4","type":"function"},{"doc":"Applies the bilateral filter to an image. The function applies bilateral filtering to the input image, as described in http://www.dai.ed.ac.uk/CVonline/LOCAL_COPIES/MANDUCHI1/Bilateral_Filtering.html bilateralFilter can reduce unwanted noise very well while keeping edges fairly sharp. However, it is very slow compared to most filters. Sigma values : For simplicity, you can set the 2 sigma values to be the same. If they are small (\\&lt; 10), the filter will not have much effect, whereas if they are large (&gt; 150), they will have a very strong effect, making the image look &quot;cartoonish&quot;. Filter size : Large filters (d &gt; 5) are very slow, so it is recommended to use d=5 for real-time applications, and perhaps d=9 for offline applications that need heavy noise filtering. This filter does not work inplace. src . dst . d . it is computed from sigmaSpace. sigmaColor . farther colors within the pixel neighborhood (see sigmaSpace) will be mixed together, resulting in larger areas of semi-equal color. sigmaSpace . farther pixels will influence each other as long as their colors are close enough (see sigmaColor ). When d&gt;0, it specifies the neighborhood size regardless of sigmaSpace. Otherwise, d is proportional to sigmaSpace. borderType . dst : UMat borderType : int Python prototype (for reference): bilateralFilter ( src , d , sigmaColor , sigmaSpace [ , dst [ , borderType ] ] ) -&gt; dst","ref":"OpenCV.html#bilateralfilter/5","title":"OpenCV.bilateralfilter/5","type":"function"},{"doc":"","ref":"OpenCV.html#bitwise_and/2","title":"OpenCV.bitwise_and/2","type":"function"},{"doc":"computes bitwise conjunction of the two arrays (dst = src1 &amp; src2) Calculates the per-element bit-wise conjunction of two arrays or an array and a scalar. The function cv::bitwise_and calculates the per-element bit-wise logical conjunction for: Two arrays when src1 and src2 have the same size : \\f[\\texttt{dst} (I) = \\texttt{src1} (I) \\wedge \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\f] An array and a scalar when src2 is constructed from Scalar or has the same number of elements as src1.channels() : \\f[\\texttt{dst} (I) = \\texttt{src1} (I) \\wedge \\texttt{src2} \\quad \\texttt{if mask} (I) \\ne0\\f] A scalar and an array when src1 is constructed from Scalar or has the same number of elements as src2.channels() : \\f[\\texttt{dst} (I) = \\texttt{src1} \\wedge \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\f] In case of floating-point arrays, their machine-specific bit representations (usually IEEE754-compliant) are used for the operation. In case of multi-channel arrays, each channel is processed independently. In the second and third cases above, the scalar is first converted to the array type. src1 . src2 . dst . arrays. mask . specifies elements of the output array to be changed. dst : UMat mask : UMat Python prototype (for reference): bitwise_and ( src1 , src2 [ , dst [ , mask ] ] ) -&gt; dst","ref":"OpenCV.html#bitwise_and/3","title":"OpenCV.bitwise_and/3","type":"function"},{"doc":"","ref":"OpenCV.html#bitwise_not/1","title":"OpenCV.bitwise_not/1","type":"function"},{"doc":"Inverts every bit of an array. The function cv::bitwise_not calculates per-element bit-wise inversion of the input array: \\f[\\texttt{dst} (I) = \\neg \\texttt{src} (I)\\f] In case of a floating-point input array, its machine-specific bit representation (usually IEEE754-compliant) is used for the operation. In case of multi-channel arrays, each channel is processed independently. src . dst . array. mask . specifies elements of the output array to be changed. dst : UMat mask : UMat Python prototype (for reference): bitwise_not ( src [ , dst [ , mask ] ] ) -&gt; dst","ref":"OpenCV.html#bitwise_not/2","title":"OpenCV.bitwise_not/2","type":"function"},{"doc":"","ref":"OpenCV.html#bitwise_or/2","title":"OpenCV.bitwise_or/2","type":"function"},{"doc":"Calculates the per-element bit-wise disjunction of two arrays or an array and a scalar. The function cv::bitwise_or calculates the per-element bit-wise logical disjunction for: Two arrays when src1 and src2 have the same size : \\f[\\texttt{dst} (I) = \\texttt{src1} (I) \\vee \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\f] An array and a scalar when src2 is constructed from Scalar or has the same number of elements as src1.channels() : \\f[\\texttt{dst} (I) = \\texttt{src1} (I) \\vee \\texttt{src2} \\quad \\texttt{if mask} (I) \\ne0\\f] A scalar and an array when src1 is constructed from Scalar or has the same number of elements as src2.channels() : \\f[\\texttt{dst} (I) = \\texttt{src1} \\vee \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\f] In case of floating-point arrays, their machine-specific bit representations (usually IEEE754-compliant) are used for the operation. In case of multi-channel arrays, each channel is processed independently. In the second and third cases above, the scalar is first converted to the array type. src1 . src2 . dst . arrays. mask . specifies elements of the output array to be changed. dst : UMat mask : UMat Python prototype (for reference): bitwise_or ( src1 , src2 [ , dst [ , mask ] ] ) -&gt; dst","ref":"OpenCV.html#bitwise_or/3","title":"OpenCV.bitwise_or/3","type":"function"},{"doc":"","ref":"OpenCV.html#bitwise_xor/2","title":"OpenCV.bitwise_xor/2","type":"function"},{"doc":"Calculates the per-element bit-wise &quot;exclusive or&quot; operation on two arrays or an array and a scalar. The function cv::bitwise_xor calculates the per-element bit-wise logical &quot;exclusive-or&quot; operation for: Two arrays when src1 and src2 have the same size : \\f[\\texttt{dst} (I) = \\texttt{src1} (I) \\oplus \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\f] An array and a scalar when src2 is constructed from Scalar or has the same number of elements as src1.channels() : \\f[\\texttt{dst} (I) = \\texttt{src1} (I) \\oplus \\texttt{src2} \\quad \\texttt{if mask} (I) \\ne0\\f] A scalar and an array when src1 is constructed from Scalar or has the same number of elements as src2.channels() : \\f[\\texttt{dst} (I) = \\texttt{src1} \\oplus \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\f] In case of floating-point arrays, their machine-specific bit representations (usually IEEE754-compliant) are used for the operation. In case of multi-channel arrays, each channel is processed independently. In the 2nd and 3rd cases above, the scalar is first converted to the array type. src1 . src2 . dst . arrays. mask . specifies elements of the output array to be changed. dst : UMat mask : UMat Python prototype (for reference): bitwise_xor ( src1 , src2 [ , dst [ , mask ] ] ) -&gt; dst","ref":"OpenCV.html#bitwise_xor/3","title":"OpenCV.bitwise_xor/3","type":"function"},{"doc":"","ref":"OpenCV.html#blendlinear/4","title":"OpenCV.blendlinear/4","type":"function"},{"doc":"Has overloading in C++ variant without mask parameter dst : UMat Python prototype (for reference): blendLinear ( src1 , src2 , weights1 , weights2 [ , dst ] ) -&gt; dst","ref":"OpenCV.html#blendlinear/5","title":"OpenCV.blendlinear/5","type":"function"},{"doc":"","ref":"OpenCV.html#blur/2","title":"OpenCV.blur/2","type":"function"},{"doc":"Blurs an image using the normalized box filter. The function smooths an image using the kernel: \\f[\\texttt{K} = \\frac{1}{\\texttt{ksize.width*ksize.height}} \\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 1 \\\\ 1 &amp; 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 1 \\\\ \\hdotsfor{6} \\\\ 1 &amp; 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 1 \\\\ \\end{bmatrix}\\f] The call blur(src, dst, ksize, anchor, borderType) is equivalent to boxFilter(src, dst, src.type(), ksize, anchor, true, borderType) . src . the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F. dst . ksize . anchor . center. borderType . @sa boxFilter, bilateralFilter, GaussianBlur, medianBlur dst : UMat anchor : Point borderType : int Python prototype (for reference): blur ( src , ksize [ , dst [ , anchor [ , borderType ] ] ] ) -&gt; dst","ref":"OpenCV.html#blur/3","title":"OpenCV.blur/3","type":"function"},{"doc":"","ref":"OpenCV.html#borderinterpolate/3","title":"OpenCV.borderinterpolate/3","type":"function"},{"doc":"","ref":"OpenCV.html#boundingrect/1","title":"OpenCV.boundingrect/1","type":"function"},{"doc":"","ref":"OpenCV.html#bowimgdescriptorextractor_bowimgdescriptorextractor/2","title":"OpenCV.bowimgdescriptorextractor_bowimgdescriptorextractor/2","type":"function"},{"doc":"","ref":"OpenCV.html#bowkmeanstrainer_bowkmeanstrainer/1","title":"OpenCV.bowkmeanstrainer_bowkmeanstrainer/1","type":"function"},{"doc":"The constructor. @see cv::kmeans termcrit : TermCriteria attempts : int flags : int Python prototype (for reference): BOWKMeansTrainer ( clusterCount [ , termcrit [ , attempts [ , flags ] ] ] ) -&gt; &lt; BOWKMeansTrainer object &gt;","ref":"OpenCV.html#bowkmeanstrainer_bowkmeanstrainer/2","title":"OpenCV.bowkmeanstrainer_bowkmeanstrainer/2","type":"function"},{"doc":"","ref":"OpenCV.html#boxfilter/3","title":"OpenCV.boxfilter/3","type":"function"},{"doc":"Blurs an image using the box filter. The function smooths an image using the kernel: \\f[\\texttt{K} = \\alpha \\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 1 \\\\ 1 &amp; 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 1 \\\\ \\hdotsfor{6} \\\\ 1 &amp; 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 1 \\end{bmatrix}\\f] where \\f[\\alpha = \\begin{cases} \\frac{1}{\\texttt{ksize.width*ksize.height}} &amp; \\texttt{when } \\texttt{normalize=true} \\\\1 &amp; \\texttt{otherwise}\\end{cases}\\f] Unnormalized box filter is useful for computing various integral characteristics over each pixel neighborhood, such as covariance matrices of image derivatives (used in dense optical flow algorithms, and so on). If you need to compute pixel sums over variable-size windows, use #integral. src . dst . ddepth . ksize . anchor . center. normalize . borderType . @sa blur, bilateralFilter, GaussianBlur, medianBlur, integral dst : UMat anchor : Point normalize : bool borderType : int Python prototype (for reference): boxFilter ( src , ddepth , ksize [ , dst [ , anchor [ , normalize [ , borderType ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#boxfilter/4","title":"OpenCV.boxfilter/4","type":"function"},{"doc":"","ref":"OpenCV.html#boxpoints/1","title":"OpenCV.boxpoints/1","type":"function"},{"doc":"Finds the four vertices of a rotated rect. Useful to draw the rotated rectangle. The function finds the four vertices of a rotated rectangle. This function is useful to draw the rectangle. In C++, instead of using this function, you can directly use RotatedRect::points method. Please visit the @ref tutorial_bounding_rotated_ellipses &quot;tutorial on Creating Bounding rotated boxes and ellipses for contours&quot; for more information. box . points . points : UMat Python prototype (for reference): boxPoints ( box [ , points ] ) -&gt; points","ref":"OpenCV.html#boxpoints/2","title":"OpenCV.boxpoints/2","type":"function"},{"doc":"","ref":"OpenCV.html#brisk_create/0","title":"OpenCV.brisk_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#brisk_create/1","title":"OpenCV.brisk_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#brisk_create/2","title":"OpenCV.brisk_create/2","type":"function"},{"doc":"","ref":"OpenCV.html#brisk_create/3","title":"OpenCV.brisk_create/3","type":"function"},{"doc":"","ref":"OpenCV.html#brisk_create/4","title":"OpenCV.brisk_create/4","type":"function"},{"doc":"The BRISK constructor for a custom pattern, detection threshold and octaves thresh . octaves . radiusList . keypoint scale 1). numberList . size as radiusList.. dMax . scale 1). dMin . keypoint scale 1). indexChange . dMax : float dMin : float indexChange : vector_int Python prototype (for reference): BRISK_create ( thresh , octaves , radiusList , numberList [ , dMax [ , dMin [ , indexChange ] ] ] ) -&gt; retval","ref":"OpenCV.html#brisk_create/5","title":"OpenCV.brisk_create/5","type":"function"},{"doc":"","ref":"OpenCV.html#buildopticalflowpyramid/3","title":"OpenCV.buildopticalflowpyramid/3","type":"function"},{"doc":"Constructs the image pyramid which can be passed to calcOpticalFlowPyrLK. img . pyramid . winSize . calcOpticalFlowPyrLK. It is needed to calculate required padding for pyramid levels. maxLevel . withDerivatives . constructed without the gradients then calcOpticalFlowPyrLK will calculate them internally. pyrBorder . derivBorder . tryReuseInputImage . to force data copying. @return number of levels in constructed pyramid. Can be less than maxLevel. pyramid : vector_UMat withDerivatives : bool pyrBorder : int derivBorder : int tryReuseInputImage : bool Python prototype (for reference): buildOpticalFlowPyramid ( img , winSize , maxLevel [ , pyramid [ , withDerivatives [ , pyrBorder [ , derivBorder [ , tryReuseInputImage ] ] ] ] ] ) -&gt; retval , pyramid","ref":"OpenCV.html#buildopticalflowpyramid/4","title":"OpenCV.buildopticalflowpyramid/4","type":"function"},{"doc":"","ref":"OpenCV.html#calcbackproject/5","title":"OpenCV.calcbackproject/5","type":"function"},{"doc":"Has overloading in C++ dst : UMat Python prototype (for reference): calcBackProject ( images , channels , hist , ranges , scale [ , dst ] ) -&gt; dst","ref":"OpenCV.html#calcbackproject/6","title":"OpenCV.calcbackproject/6","type":"function"},{"doc":"","ref":"OpenCV.html#calccovarmatrix/3","title":"OpenCV.calccovarmatrix/3","type":"function"},{"doc":"Has overloading in C++ Note : use #COVAR_ROWS or #COVAR_COLS flag samples . covar . mean . flags . ctype . covar : UMat ctype : int Python prototype (for reference): calcCovarMatrix ( samples , mean , flags [ , covar [ , ctype ] ] ) -&gt; covar , mean","ref":"OpenCV.html#calccovarmatrix/4","title":"OpenCV.calccovarmatrix/4","type":"function"},{"doc":"","ref":"OpenCV.html#calchist/5","title":"OpenCV.calchist/5","type":"function"},{"doc":"Has overloading in C++ hist : UMat accumulate : bool Python prototype (for reference): calcHist ( images , channels , mask , histSize , ranges [ , hist [ , accumulate ] ] ) -&gt; hist","ref":"OpenCV.html#calchist/6","title":"OpenCV.calchist/6","type":"function"},{"doc":"","ref":"OpenCV.html#calcopticalflowfarneback/10","title":"OpenCV.calcopticalflowfarneback/10","type":"function"},{"doc":"","ref":"OpenCV.html#calcopticalflowpyrlk/4","title":"OpenCV.calcopticalflowpyrlk/4","type":"function"},{"doc":"Calculates an optical flow for a sparse feature set using the iterative Lucas-Kanade method with pyramids. prevImg . nextImg . prevPts . single-precision floating-point numbers. nextPts . containing the calculated new positions of input features in the second image; when OPTFLOW_USE_INITIAL_FLOW flag is passed, the vector must have the same size as in the input. status . the flow for the corresponding features has been found, otherwise, it is set to 0. err . corresponding feature, type of the error measure can be set in flags parameter; if the flow wasn't found then the error is not defined (use the status parameter to find such cases). winSize . maxLevel . level), if set to 1, two levels are used, and so on; if pyramids are passed to input then algorithm will use as many levels as pyramids have but no more than maxLevel. criteria . (after the specified maximum number of iterations criteria.maxCount or when the search window moves by less than criteria.epsilon. flags . OPTFLOW_USE_INITIAL_FLOW uses initial estimations, stored in nextPts; if the flag is not set, then prevPts is copied to nextPts and is considered the initial estimate. OPTFLOW_LK_GET_MIN_EIGENVALS use minimum eigen values as an error measure (see minEigThreshold description); if the flag is not set, then L1 distance between patches around the original and a moved point, divided by number of pixels in a window, is used as a error measure. minEigThreshold . optical flow equations (this matrix is called a spatial gradient matrix in @cite Bouguet00), divided by number of pixels in a window; if this value is less than minEigThreshold, then a corresponding feature is filtered out and its flow is not processed, so it allows to remove bad points and get a performance boost. The function implements a sparse iterative version of the Lucas-Kanade optical flow in pyramids. See @cite Bouguet00 . The function is parallelized with the TBB library. Note : An example using the Lucas-Kanade optical flow algorithm can be found at opencv_source_code/samples/cpp/lkdemo.cpp (Python) An example using the Lucas-Kanade optical flow algorithm can be found at opencv_source_code/samples/python/lk_track.py (Python) An example using the Lucas-Kanade tracker for homography matching can be found at opencv_source_code/samples/python/lk_homography.py status : UMat err : UMat winSize : Size maxLevel : int criteria : TermCriteria flags : int minEigThreshold : double Python prototype (for reference): calcOpticalFlowPyrLK ( prevImg , nextImg , prevPts , nextPts [ , status [ , err [ , winSize [ , maxLevel [ , criteria [ , flags [ , minEigThreshold ] ] ] ] ] ] ] ) -&gt; nextPts , status , err","ref":"OpenCV.html#calcopticalflowpyrlk/5","title":"OpenCV.calcopticalflowpyrlk/5","type":"function"},{"doc":"","ref":"OpenCV.html#calibratecamera/5","title":"OpenCV.calibratecamera/5","type":"function"},{"doc":"Has overloading in C++ rvecs : vector_UMat tvecs : vector_UMat flags : int criteria : TermCriteria Python prototype (for reference): calibrateCamera ( objectPoints , imagePoints , imageSize , cameraMatrix , distCoeffs [ , rvecs [ , tvecs [ , flags [ , criteria ] ] ] ] ) -&gt; retval , cameraMatrix , distCoeffs , rvecs , tvecs","ref":"OpenCV.html#calibratecamera/6","title":"OpenCV.calibratecamera/6","type":"function"},{"doc":"","ref":"OpenCV.html#calibratecameraextended/5","title":"OpenCV.calibratecameraextended/5","type":"function"},{"doc":"Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern. objectPoints . the calibration pattern coordinate space (e.g. std::vector&lt;std::vector&lt;cv::Vec3f&gt;&gt;). The outer vector contains as many elements as the number of pattern views. If the same calibration pattern is shown in each view and it is fully visible, all the vectors will be the same. Although, it is possible to use partially occluded patterns or even different patterns in different views. Then, the vectors will be different. Although the points are 3D, they all lie in the calibration pattern's XY coordinate plane (thus 0 in the Z-coordinate), if the used calibration pattern is a planar rig. In the old interface all the vectors of object points from different views are concatenated together. imagePoints . pattern points (e.g. std::vector&lt;std::vector&lt;cv::Vec2f&gt;&gt;). imagePoints.size() and objectPoints.size(), and imagePoints[i].size() and objectPoints[i].size() for each i, must be equal, respectively. In the old interface all the vectors of object points from different views are concatenated together. imageSize . cameraMatrix . \\f$\\cameramatrix{A}\\f$ . If @ref CALIB_USE_INTRINSIC_GUESS and/or @ref CALIB_FIX_ASPECT_RATIO, @ref CALIB_FIX_PRINCIPAL_POINT or @ref CALIB_FIX_FOCAL_LENGTH are specified, some or all of fx, fy, cx, cy must be initialized before calling the function. distCoeffs . \\f$\\distcoeffs\\f$. rvecs . (e.g. std::vector&lt;cv::Mat&gt;&gt;). That is, each i-th rotation vector together with the corresponding i-th translation vector (see the next output parameter description) brings the calibration pattern from the object coordinate space (in which object points are specified) to the camera coordinate space. In more technical terms, the tuple of the i-th rotation and translation vector performs a change of basis from object coordinate space to camera coordinate space. Due to its duality, this tuple is equivalent to the position of the calibration pattern with respect to the camera coordinate space. tvecs . describtion above. stdDeviationsIntrinsics . parameters. Order of deviations values: \\f$(f_x, f_y, c_x, c_y, k_1, k_2, p_1, p_2, k_3, k_4, k_5, k_6 , s_1, s_2, s_3, s_4, \\tau_x, \\tau_y)\\f$ If one of parameters is not estimated, it's deviation is equals to zero. stdDeviationsExtrinsics . parameters. Order of deviations values: \\f$(R_0, T_0, \\dotsc , R_{M - 1}, T_{M - 1})\\f$ where M is the number of pattern views. \\f$R_i, T_i\\f$ are concatenated 1x3 vectors. perViewErrors . flags . @ref CALIB_USE_INTRINSIC_GUESS cameraMatrix contains valid initial values of fx, fy, cx, cy that are optimized further. Otherwise, (cx, cy) is initially set to the image center ( imageSize is used), and focal distances are computed in a least-squares fashion. Note, that if intrinsic parameters are known, there is no need to use this function just to estimate extrinsic parameters. Use @ref solvePnP instead. @ref CALIB_FIX_PRINCIPAL_POINT The principal point is not changed during the global optimization. It stays at the center or at a different location specified when @ref CALIB_USE_INTRINSIC_GUESS is set too. @ref CALIB_FIX_ASPECT_RATIO The functions consider only fy as a free parameter. The ratio fx/fy stays the same as in the input cameraMatrix . When @ref CALIB_USE_INTRINSIC_GUESS is not set, the actual input values of fx and fy are ignored, only their ratio is computed and used further. @ref CALIB_ZERO_TANGENT_DIST Tangential distortion coefficients \\f$(p_1, p_2)\\f$ are set to zeros and stay zero. @ref CALIB_FIX_FOCAL_LENGTH The focal length is not changed during the global optimization if @ref CALIB_USE_INTRINSIC_GUESS is set. @ref CALIB_FIX_K1,..., @ref CALIB_FIX_K6 The corresponding radial distortion coefficient is not changed during the optimization. If @ref CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0. @ref CALIB_RATIONAL_MODEL Coefficients k4, k5, and k6 are enabled. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the rational model and return 8 coefficients or more. @ref CALIB_THIN_PRISM_MODEL Coefficients s1, s2, s3 and s4 are enabled. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the thin prism model and return 12 coefficients or more. @ref CALIB_FIX_S1_S2_S3_S4 The thin prism distortion coefficients are not changed during the optimization. If @ref CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0. @ref CALIB_TILTED_MODEL Coefficients tauX and tauY are enabled. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the tilted sensor model and return 14 coefficients. @ref CALIB_FIX_TAUX_TAUY The coefficients of the tilted sensor model are not changed during the optimization. If @ref CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0. criteria . @return the overall RMS re-projection error. The function estimates the intrinsic camera parameters and extrinsic parameters for each of the views. The algorithm is based on @cite Zhang2000 and @cite BouguetMCT . The coordinates of 3D object points and their corresponding 2D projections in each view must be specified. That may be achieved by using an object with known geometry and easily detectable feature points. Such an object is called a calibration rig or calibration pattern, and OpenCV has built-in support for a chessboard as a calibration rig (see @ref findChessboardCorners). Currently, initialization of intrinsic parameters (when @ref CALIB_USE_INTRINSIC_GUESS is not set) is only implemented for planar calibration patterns (where Z-coordinates of the object points must be all zeros). 3D calibration rigs can also be used as long as initial cameraMatrix is provided. The algorithm performs the following steps: Compute the initial intrinsic parameters (the option only available for planar calibration patterns) or read them from the input parameters. The distortion coefficients are all set to zeros initially unless some of CALIB_FIX_K? are specified. Estimate the initial camera pose as if the intrinsic parameters have been already known. This is done using @ref solvePnP . Run the global Levenberg-Marquardt optimization algorithm to minimize the reprojection error, that is, the total sum of squared distances between the observed feature points imagePoints and the projected (using the current estimates for camera parameters and the poses) object points objectPoints. See @ref projectPoints for details. Note : If you use a non-square (i.e. non-N-by-N) grid and @ref findChessboardCorners for calibration, and @ref calibrateCamera returns bad values (zero distortion coefficients, \\f$c_x\\f$ and \\f$c_y\\f$ very far from the image center, and/or large differences between \\f$f_x\\f$ and \\f$f_y\\f$ (ratios of 10:1 or more)), then you are probably using patternSize=cvSize(rows,cols) instead of using patternSize=cvSize(cols,rows) in @ref findChessboardCorners. @sa calibrateCameraRO, findChessboardCorners, solvePnP, initCameraMatrix2D, stereoCalibrate, undistort rvecs : vector_UMat tvecs : vector_UMat stdDeviationsIntrinsics : UMat stdDeviationsExtrinsics : UMat perViewErrors : UMat flags : int criteria : TermCriteria Python prototype (for reference): calibrateCameraExtended ( objectPoints , imagePoints , imageSize , cameraMatrix , distCoeffs [ , rvecs [ , tvecs [ , stdDeviationsIntrinsics [ , stdDeviationsExtrinsics [ , perViewErrors [ , flags [ , criteria ] ] ] ] ] ] ] ) -&gt; retval , cameraMatrix , distCoeffs , rvecs , tvecs , stdDeviationsIntrinsics , stdDeviationsExtrinsics , perViewErrors","ref":"OpenCV.html#calibratecameraextended/6","title":"OpenCV.calibratecameraextended/6","type":"function"},{"doc":"","ref":"OpenCV.html#calibratecameraro/6","title":"OpenCV.calibratecameraro/6","type":"function"},{"doc":"Has overloading in C++ rvecs : vector_UMat tvecs : vector_UMat newObjPoints : UMat flags : int criteria : TermCriteria Python prototype (for reference): calibrateCameraRO ( objectPoints , imagePoints , imageSize , iFixedPoint , cameraMatrix , distCoeffs [ , rvecs [ , tvecs [ , newObjPoints [ , flags [ , criteria ] ] ] ] ] ) -&gt; retval , cameraMatrix , distCoeffs , rvecs , tvecs , newObjPoints","ref":"OpenCV.html#calibratecameraro/7","title":"OpenCV.calibratecameraro/7","type":"function"},{"doc":"","ref":"OpenCV.html#calibratecameraroextended/6","title":"OpenCV.calibratecameraroextended/6","type":"function"},{"doc":"Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern. This function is an extension of #calibrateCamera with the method of releasing object which was proposed in @cite strobl2011iccv. In many common cases with inaccurate, unmeasured, roughly planar targets (calibration plates), this method can dramatically improve the precision of the estimated camera parameters. Both the object-releasing method and standard method are supported by this function. Use the parameter iFixedPoint for method selection. In the internal implementation, #calibrateCamera is a wrapper for this function. objectPoints . coordinate space. See #calibrateCamera for details. If the method of releasing object to be used, the identical calibration board must be used in each view and it must be fully visible, and all objectPoints[i] must be the same and all points should be roughly close to a plane. The calibration target has to be rigid, or at least static if the camera (rather than the calibration target) is shifted for grabbing images. imagePoints . #calibrateCamera for details. imageSize . iFixedPoint . a switch for calibration method selection. If object-releasing method to be used, pass in the parameter in the range of [1, objectPoints[0].size()-2], otherwise a value out of this range will make standard calibration method selected. Usually the top-right corner point of the calibration board grid is recommended to be fixed when object-releasing method being utilized. According to \\cite strobl2011iccv, two other points are also fixed. In this implementation, objectPoints[0].front and objectPoints[0].back.z are used. With object-releasing method, accurate rvecs, tvecs and newObjPoints are only possible if coordinates of these three fixed points are accurate enough. cameraMatrix . distCoeffs . rvecs . for details. tvecs . newObjPoints . be scaled based on three fixed points. The returned coordinates are accurate only if the above mentioned three fixed points are accurate. If not needed, noArray() can be passed in. This parameter is ignored with standard calibration method. stdDeviationsIntrinsics . See #calibrateCamera for details. stdDeviationsExtrinsics . See #calibrateCamera for details. stdDeviationsObjPoints . of calibration pattern points. It has the same size and order as objectPoints[0] vector. This parameter is ignored with standard calibration method. perViewErrors . flags . #calibrateCamera for details. If the method of releasing object is used, the calibration time may be much longer. CALIB_USE_QR or CALIB_USE_LU could be used for faster calibration with potentially less precise and less stable in some rare cases. criteria . @return the overall RMS re-projection error. The function estimates the intrinsic camera parameters and extrinsic parameters for each of the views. The algorithm is based on @cite Zhang2000, @cite BouguetMCT and @cite strobl2011iccv. See #calibrateCamera for other detailed explanations. @sa calibrateCamera, findChessboardCorners, solvePnP, initCameraMatrix2D, stereoCalibrate, undistort rvecs : vector_UMat tvecs : vector_UMat newObjPoints : UMat stdDeviationsIntrinsics : UMat stdDeviationsExtrinsics : UMat stdDeviationsObjPoints : UMat perViewErrors : UMat flags : int criteria : TermCriteria Python prototype (for reference): calibrateCameraROExtended ( objectPoints , imagePoints , imageSize , iFixedPoint , cameraMatrix , distCoeffs [ , rvecs [ , tvecs [ , newObjPoints [ , stdDeviationsIntrinsics [ , stdDeviationsExtrinsics [ , stdDeviationsObjPoints [ , perViewErrors [ , flags [ , criteria ] ] ] ] ] ] ] ] ] ) -&gt; retval , cameraMatrix , distCoeffs , rvecs , tvecs , newObjPoints , stdDeviationsIntrinsics , stdDeviationsExtrinsics , stdDeviationsObjPoints , perViewErrors","ref":"OpenCV.html#calibratecameraroextended/7","title":"OpenCV.calibratecameraroextended/7","type":"function"},{"doc":"","ref":"OpenCV.html#calibratehandeye/4","title":"OpenCV.calibratehandeye/4","type":"function"},{"doc":"Computes Hand-Eye calibration: \\f$_{}^{g}\\textrm{T}_c\\f$ r_gripper2base . expressed in the gripper frame to the robot base frame (\\f$_{}^{b}\\textrm{T}_g\\f$). This is a vector ( vector&lt;Mat&gt; ) that contains the rotation, (3x3) rotation matrices or (3x1) rotation vectors, for all the transformations from gripper frame to robot base frame. t_gripper2base . expressed in the gripper frame to the robot base frame (\\f$_{}^{b}\\textrm{T}_g\\f$). This is a vector ( vector&lt;Mat&gt; ) that contains the (3x1) translation vectors for all the transformations from gripper frame to robot base frame. r_target2cam . expressed in the target frame to the camera frame (\\f$_{}^{c}\\textrm{T}_t\\f$). This is a vector ( vector&lt;Mat&gt; ) that contains the rotation, (3x3) rotation matrices or (3x1) rotation vectors, for all the transformations from calibration target frame to camera frame. t_target2cam . expressed in the target frame to the camera frame (\\f$_{}^{c}\\textrm{T}_t\\f$). This is a vector ( vector&lt;Mat&gt; ) that contains the (3x1) translation vectors for all the transformations from calibration target frame to camera frame. r_cam2gripper . expressed in the camera frame to the gripper frame (\\f$_{}^{g}\\textrm{T}_c\\f$). t_cam2gripper . expressed in the camera frame to the gripper frame (\\f$_{}^{g}\\textrm{T}_c\\f$). method . The function performs the Hand-Eye calibration using various methods. One approach consists in estimating the rotation then the translation (separable solutions) and the following methods are implemented: R. Tsai, R. Lenz A New Technique for Fully Autonomous and Efficient 3D Robotics Hand/EyeCalibration \\cite Tsai89 F. Park, B. Martin Robot Sensor Calibration: Solving AX = XB on the Euclidean Group \\cite Park94 R. Horaud, F. Dornaika Hand-Eye Calibration \\cite Horaud95 Another approach consists in estimating simultaneously the rotation and the translation (simultaneous solutions), with the following implemented methods: N. Andreff, R. Horaud, B. Espiau On-line Hand-Eye Calibration \\cite Andreff99 K. Daniilidis Hand-Eye Calibration Using Dual Quaternions \\cite Daniilidis98 The following picture describes the Hand-Eye calibration problem where the transformation between a camera (&quot;eye&quot;) mounted on a robot gripper (&quot;hand&quot;) has to be estimated. This configuration is called eye-in-hand. The eye-to-hand configuration consists in a static camera observing a calibration pattern mounted on the robot end-effector. The transformation from the camera to the robot base frame can then be estimated by inputting the suitable transformations to the function, see below. The calibration procedure is the following: a static calibration pattern is used to estimate the transformation between the target frame and the camera frame the robot gripper is moved in order to acquire several poses for each pose, the homogeneous transformation between the gripper frame and the robot base frame is recorded using for instance the robot kinematics \\f[ \\begin{bmatrix} X_b\\\\ Y_b\\\\ Z_b\\\\ 1 \\end{bmatrix} \\begin{bmatrix} _{}^{b}\\textrm{R}_g &amp; _{}^{b}\\textrm{t}_g \\\\ 0_{1 \\times 3} &amp; 1 \\end{bmatrix} \\begin{bmatrix} X_g\\\\ Y_g\\\\ Z_g\\\\ 1 \\end{bmatrix} \\f] for each pose, the homogeneous transformation between the calibration target frame and the camera frame is recorded using for instance a pose estimation method (PnP) from 2D-3D point correspondences \\f[ \\begin{bmatrix} X_c\\\\ Y_c\\\\ Z_c\\\\ 1 \\end{bmatrix} \\begin{bmatrix} _{}^{c}\\textrm{R}_t &amp; _{}^{c}\\textrm{t}_t \\\\ 0_{1 \\times 3} &amp; 1 \\end{bmatrix} \\begin{bmatrix} X_t\\\\ Y_t\\\\ Z_t\\\\ 1 \\end{bmatrix} \\f] The Hand-Eye calibration procedure returns the following homogeneous transformation \\f[ \\begin{bmatrix} X_g\\\\ Y_g\\\\ Z_g\\\\ 1 \\end{bmatrix} \\begin{bmatrix} _{}^{g}\\textrm{R}_c &amp; _{}^{g}\\textrm{t}_c \\\\ 0_{1 \\times 3} &amp; 1 \\end{bmatrix} \\begin{bmatrix} X_c\\\\ Y_c\\\\ Z_c\\\\ 1 \\end{bmatrix} \\f] This problem is also known as solving the \\f$\\mathbf{A}\\mathbf{X}=\\mathbf{X}\\mathbf{B}\\f$ equation: for an eye-in-hand configuration \\f[ \\begin{align*} ^{b}{\\textrm{T}_g}^{(1)} \\hspace{0.2em} ^{g}\\textrm{T}_c \\hspace{0.2em} ^{c}{\\textrm{T}_t}^{(1)} &amp;= \\hspace{0.1em} ^{b}{\\textrm{T}_g}^{(2)} \\hspace{0.2em} ^{g}\\textrm{T}_c \\hspace{0.2em} ^{c}{\\textrm{T}_t}^{(2)} \\\\ (^{b}{\\textrm{T}_g}^{(2)})^{-1} \\hspace{0.2em} ^{b}{\\textrm{T}_g}^{(1)} \\hspace{0.2em} ^{g}\\textrm{T}_c &amp;= \\hspace{0.1em} ^{g}\\textrm{T}_c \\hspace{0.2em} ^{c}{\\textrm{T}_t}^{(2)} (^{c}{\\textrm{T}_t}^{(1)})^{-1} \\\\ \\textrm{A}_i \\textrm{X} &amp;= \\textrm{X} \\textrm{B}_i \\\\ \\end{align*} \\f] for an eye-to-hand configuration \\f[ \\begin{align*} ^{g}{\\textrm{T}_b}^{(1)} \\hspace{0.2em} ^{b}\\textrm{T}_c \\hspace{0.2em} ^{c}{\\textrm{T}_t}^{(1)} &amp;= \\hspace{0.1em} ^{g}{\\textrm{T}_b}^{(2)} \\hspace{0.2em} ^{b}\\textrm{T}_c \\hspace{0.2em} ^{c}{\\textrm{T}_t}^{(2)} \\\\ (^{g}{\\textrm{T}_b}^{(2)})^{-1} \\hspace{0.2em} ^{g}{\\textrm{T}_b}^{(1)} \\hspace{0.2em} ^{b}\\textrm{T}_c &amp;= \\hspace{0.1em} ^{b}\\textrm{T}_c \\hspace{0.2em} ^{c}{\\textrm{T}_t}^{(2)} (^{c}{\\textrm{T}_t}^{(1)})^{-1} \\\\ \\textrm{A}_i \\textrm{X} &amp;= \\textrm{X} \\textrm{B}_i \\\\ \\end{align*} \\f] \\note Additional information can be found on this website . \\note A minimum of 2 motions with non parallel rotation axes are necessary to determine the hand-eye transformation. So at least 3 different poses are required, but it is strongly recommended to use many more poses. r_cam2gripper : UMat t_cam2gripper : UMat method : HandEyeCalibrationMethod Python prototype (for reference): calibrateHandEye ( R_gripper2base , t_gripper2base , R_target2cam , t_target2cam [ , R_cam2gripper [ , t_cam2gripper [ , method ] ] ] ) -&gt; R_cam2gripper , t_cam2gripper","ref":"OpenCV.html#calibratehandeye/5","title":"OpenCV.calibratehandeye/5","type":"function"},{"doc":"","ref":"OpenCV.html#calibraterobotworldhandeye/4","title":"OpenCV.calibraterobotworldhandeye/4","type":"function"},{"doc":"Computes Robot-World/Hand-Eye calibration: \\f$_{}^{w}\\textrm{T}_b\\f$ and \\f$_{}^{c}\\textrm{T}_g\\f$ r_world2cam . expressed in the world frame to the camera frame (\\f$_{}^{c}\\textrm{T}_w\\f$). This is a vector ( vector&lt;Mat&gt; ) that contains the rotation, (3x3) rotation matrices or (3x1) rotation vectors, for all the transformations from world frame to the camera frame. t_world2cam . expressed in the world frame to the camera frame (\\f$_{}^{c}\\textrm{T}_w\\f$). This is a vector ( vector&lt;Mat&gt; ) that contains the (3x1) translation vectors for all the transformations from world frame to the camera frame. r_base2gripper . expressed in the robot base frame to the gripper frame (\\f$_{}^{g}\\textrm{T}_b\\f$). This is a vector ( vector&lt;Mat&gt; ) that contains the rotation, (3x3) rotation matrices or (3x1) rotation vectors, for all the transformations from robot base frame to the gripper frame. t_base2gripper . expressed in the robot base frame to the gripper frame (\\f$_{}^{g}\\textrm{T}_b\\f$). This is a vector ( vector&lt;Mat&gt; ) that contains the (3x1) translation vectors for all the transformations from robot base frame to the gripper frame. r_base2world . expressed in the robot base frame to the world frame (\\f$_{}^{w}\\textrm{T}_b\\f$). t_base2world . expressed in the robot base frame to the world frame (\\f$_{}^{w}\\textrm{T}_b\\f$). r_gripper2cam . expressed in the gripper frame to the camera frame (\\f$_{}^{c}\\textrm{T}_g\\f$). t_gripper2cam . expressed in the gripper frame to the camera frame (\\f$_{}^{c}\\textrm{T}_g\\f$). method . The function performs the Robot-World/Hand-Eye calibration using various methods. One approach consists in estimating the rotation then the translation (separable solutions): M. Shah, Solving the robot-world/hand-eye calibration problem using the kronecker product \\cite Shah2013SolvingTR Another approach consists in estimating simultaneously the rotation and the translation (simultaneous solutions), with the following implemented method: A. Li, L. Wang, and D. Wu, Simultaneous robot-world and hand-eye calibration using dual-quaternions and kronecker product \\cite Li2010SimultaneousRA The following picture describes the Robot-World/Hand-Eye calibration problem where the transformations between a robot and a world frame and between a robot gripper (&quot;hand&quot;) and a camera (&quot;eye&quot;) mounted at the robot end-effector have to be estimated. The calibration procedure is the following: a static calibration pattern is used to estimate the transformation between the target frame and the camera frame the robot gripper is moved in order to acquire several poses for each pose, the homogeneous transformation between the gripper frame and the robot base frame is recorded using for instance the robot kinematics \\f[ \\begin{bmatrix} X_g\\\\ Y_g\\\\ Z_g\\\\ 1 \\end{bmatrix} \\begin{bmatrix} _{}^{g}\\textrm{R}_b &amp; _{}^{g}\\textrm{t}_b \\\\ 0_{1 \\times 3} &amp; 1 \\end{bmatrix} \\begin{bmatrix} X_b\\\\ Y_b\\\\ Z_b\\\\ 1 \\end{bmatrix} \\f] for each pose, the homogeneous transformation between the calibration target frame (the world frame) and the camera frame is recorded using for instance a pose estimation method (PnP) from 2D-3D point correspondences \\f[ \\begin{bmatrix} X_c\\\\ Y_c\\\\ Z_c\\\\ 1 \\end{bmatrix} \\begin{bmatrix} _{}^{c}\\textrm{R}_w &amp; _{}^{c}\\textrm{t}_w \\\\ 0_{1 \\times 3} &amp; 1 \\end{bmatrix} \\begin{bmatrix} X_w\\\\ Y_w\\\\ Z_w\\\\ 1 \\end{bmatrix} \\f] The Robot-World/Hand-Eye calibration procedure returns the following homogeneous transformations \\f[ \\begin{bmatrix} X_w\\\\ Y_w\\\\ Z_w\\\\ 1 \\end{bmatrix} \\begin{bmatrix} _{}^{w}\\textrm{R}_b &amp; _{}^{w}\\textrm{t}_b \\\\ 0_{1 \\times 3} &amp; 1 \\end{bmatrix} \\begin{bmatrix} X_b\\\\ Y_b\\\\ Z_b\\\\ 1 \\end{bmatrix} \\f] \\f[ \\begin{bmatrix} X_c\\\\ Y_c\\\\ Z_c\\\\ 1 \\end{bmatrix} \\begin{bmatrix} _{}^{c}\\textrm{R}_g &amp; _{}^{c}\\textrm{t}_g \\\\ 0_{1 \\times 3} &amp; 1 \\end{bmatrix} \\begin{bmatrix} X_g\\\\ Y_g\\\\ Z_g\\\\ 1 \\end{bmatrix} \\f] This problem is also known as solving the \\f$\\mathbf{A}\\mathbf{X}=\\mathbf{Z}\\mathbf{B}\\f$ equation, with: \\f$\\mathbf{A} \\Leftrightarrow \\hspace{0.1em} _{}^{c}\\textrm{T}_w\\f$ \\f$\\mathbf{X} \\Leftrightarrow \\hspace{0.1em} _{}^{w}\\textrm{T}_b\\f$ \\f$\\mathbf{Z} \\Leftrightarrow \\hspace{0.1em} _{}^{c}\\textrm{T}_g\\f$ \\f$\\mathbf{B} \\Leftrightarrow \\hspace{0.1em} _{}^{g}\\textrm{T}_b\\f$ \\note At least 3 measurements are required (input vectors size must be greater or equal to 3). r_base2world : UMat t_base2world : UMat r_gripper2cam : UMat t_gripper2cam : UMat method : RobotWorldHandEyeCalibrationMethod Python prototype (for reference): calibrateRobotWorldHandEye ( R_world2cam , t_world2cam , R_base2gripper , t_base2gripper [ , R_base2world [ , t_base2world [ , R_gripper2cam [ , t_gripper2cam [ , method ] ] ] ] ] ) -&gt; R_base2world , t_base2world , R_gripper2cam , t_gripper2cam","ref":"OpenCV.html#calibraterobotworldhandeye/5","title":"OpenCV.calibraterobotworldhandeye/5","type":"function"},{"doc":"","ref":"OpenCV.html#calibrationmatrixvalues/4","title":"OpenCV.calibrationmatrixvalues/4","type":"function"},{"doc":"","ref":"OpenCV.html#camshift/3","title":"OpenCV.camshift/3","type":"function"},{"doc":"","ref":"OpenCV.html#canny/4","title":"OpenCV.canny/4","type":"function"},{"doc":"\\overload Finds edges in an image using the Canny algorithm with custom image gradient. dx . dy . edges . threshold1 . threshold2 . l2gradient . \\f$=\\sqrt{(dI/dx)^2 + (dI/dy)^2}\\f$ should be used to calculate the image gradient magnitude ( L2gradient=true ), or whether the default \\f$L_1\\f$ norm \\f$=|dI/dx|+|dI/dy|\\f$ is enough ( L2gradient=false ). edges : UMat l2gradient : bool Python prototype (for reference): Canny ( dx , dy , threshold1 , threshold2 [ , edges [ , L2gradient ] ] ) -&gt; edges","ref":"OpenCV.html#canny/5","title":"OpenCV.canny/5","type":"function"},{"doc":"","ref":"OpenCV.html#carttopolar/2","title":"OpenCV.carttopolar/2","type":"function"},{"doc":"Calculates the magnitude and angle of 2D vectors. The function cv::cartToPolar calculates either the magnitude, angle, or both for every 2D vector (x(I),y(I)): \\f[\\begin{array}{l} \\texttt{magnitude} (I)= \\sqrt{\\texttt{x}(I)^2+\\texttt{y}(I)^2} , \\\\ \\texttt{angle} (I)= \\texttt{atan2} ( \\texttt{y} (I), \\texttt{x} (I))[ \\cdot180 / \\pi ] \\end{array}\\f] The angles are calculated with accuracy about 0.3 degrees. For the point (0,0), the angle is set to 0. x . double-precision floating-point array. y . magnitude . angle . x; the angles are measured in radians (from 0 to 2*Pi) or in degrees (0 to 360 degrees). angleInDegrees . in radians (which is by default), or in degrees. @sa Sobel, Scharr magnitude : UMat angle : UMat angleInDegrees : bool Python prototype (for reference): cartToPolar ( x , y [ , magnitude [ , angle [ , angleInDegrees ] ] ] ) -&gt; magnitude , angle","ref":"OpenCV.html#carttopolar/3","title":"OpenCV.carttopolar/3","type":"function"},{"doc":"","ref":"OpenCV.html#cascadeclassifier_cascadeclassifier/0","title":"OpenCV.cascadeclassifier_cascadeclassifier/0","type":"function"},{"doc":"","ref":"OpenCV.html#cascadeclassifier_cascadeclassifier/1","title":"OpenCV.cascadeclassifier_cascadeclassifier/1","type":"function"},{"doc":"","ref":"OpenCV.html#cascadeclassifier_convert/2","title":"OpenCV.cascadeclassifier_convert/2","type":"function"},{"doc":"","ref":"OpenCV.html#checkchessboard/2","title":"OpenCV.checkchessboard/2","type":"function"},{"doc":"","ref":"OpenCV.html#checkhardwaresupport/1","title":"OpenCV.checkhardwaresupport/1","type":"function"},{"doc":"","ref":"OpenCV.html#checkrange/1","title":"OpenCV.checkrange/1","type":"function"},{"doc":"Checks every element of an input array for invalid values. The function cv::checkRange checks that every array element is neither NaN nor infinite. When minVal &gt; -DBL_MAX and maxVal \\&lt; DBL_MAX, the function also checks that each value is between minVal and maxVal. In case of multi-channel arrays, each channel is processed independently. If some values are out of range, position of the first outlier is stored in pos (when pos != NULL). Then, the function either returns false (when quiet=true) or throws an exception. a . quiet . are out of range or they throw an exception. pos . elements. minVal . maxVal . quiet : bool minVal : double maxVal : double Python prototype (for reference): checkRange ( a [ , quiet [ , minVal [ , maxVal ] ] ] ) -&gt; retval , pos","ref":"OpenCV.html#checkrange/2","title":"OpenCV.checkrange/2","type":"function"},{"doc":"","ref":"OpenCV.html#circle/4","title":"OpenCV.circle/4","type":"function"},{"doc":"Draws a circle. The function cv::circle draws a simple or filled circle with a given center and radius. img . center . radius . color . thickness . mean that a filled circle is to be drawn. lineType . shift . thickness : int lineType : int shift : int Python prototype (for reference): circle ( img , center , radius , color [ , thickness [ , lineType [ , shift ] ] ] ) -&gt; img","ref":"OpenCV.html#circle/5","title":"OpenCV.circle/5","type":"function"},{"doc":"","ref":"OpenCV.html#circlesgridfinderparameters_circlesgridfinderparameters/0","title":"OpenCV.circlesgridfinderparameters_circlesgridfinderparameters/0","type":"function"},{"doc":"","ref":"OpenCV.html#clipline/3","title":"OpenCV.clipline/3","type":"function"},{"doc":"","ref":"OpenCV.html#colorchange/2","title":"OpenCV.colorchange/2","type":"function"},{"doc":"Given an original color image, two differently colored versions of this image can be mixed seamlessly. src . mask . dst . red_mul . green_mul . blue_mul . Multiplication factor is between .5 to 2.5. dst : UMat red_mul : float green_mul : float blue_mul : float Python prototype (for reference): colorChange ( src , mask [ , dst [ , red_mul [ , green_mul [ , blue_mul ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#colorchange/3","title":"OpenCV.colorchange/3","type":"function"},{"doc":"","ref":"OpenCV.html#compare/3","title":"OpenCV.compare/3","type":"function"},{"doc":"Performs the per-element comparison of two arrays or an array and scalar value. The function compares: Elements of two arrays when src1 and src2 have the same size : \\f[\\texttt{dst} (I) = \\texttt{src1} (I) \\,\\texttt{cmpop}\\, \\texttt{src2} (I)\\f] Elements of src1 with a scalar src2 when src2 is constructed from Scalar or has a single element: \\f[\\texttt{dst} (I) = \\texttt{src1}(I) \\,\\texttt{cmpop}\\, \\texttt{src2}\\f] src1 with elements of src2 when src1 is constructed from Scalar or has a single element: \\f[\\texttt{dst} (I) = \\texttt{src1} \\,\\texttt{cmpop}\\, \\texttt{src2} (I)\\f] When the comparison result is true, the corresponding element of output array is set to 255. The comparison operations can be replaced with the equivalent matrix expressions: Mat dst1 = src1 &gt;= src2; Mat dst2 = src1 &lt; 8; ... src1 . src2 . dst . the input arrays. cmpop . @sa checkRange, min, max, threshold dst : UMat Python prototype (for reference): compare ( src1 , src2 , cmpop [ , dst ] ) -&gt; dst","ref":"OpenCV.html#compare/4","title":"OpenCV.compare/4","type":"function"},{"doc":"","ref":"OpenCV.html#comparehist/3","title":"OpenCV.comparehist/3","type":"function"},{"doc":"","ref":"OpenCV.html#completesymm/1","title":"OpenCV.completesymm/1","type":"function"},{"doc":"Copies the lower or the upper half of a square matrix to its another half. The function cv::completeSymm copies the lower or the upper half of a square matrix to its another half. The matrix diagonal remains unchanged: \\f$\\texttt{m}_{ij}=\\texttt{m}_{ji}\\f$ for \\f$i &gt; j\\f$ if lowerToUpper=false \\f$\\texttt{m}_{ij}=\\texttt{m}_{ji}\\f$ for \\f$i &lt; j\\f$ if lowerToUpper=true m . lowerToUpper . the upper half. Otherwise, the upper half is copied to the lower half. @sa flip, transpose lowerToUpper : bool Python prototype (for reference): completeSymm ( m [ , lowerToUpper ] ) -&gt; m","ref":"OpenCV.html#completesymm/2","title":"OpenCV.completesymm/2","type":"function"},{"doc":"","ref":"OpenCV.html#composert/4","title":"OpenCV.composert/4","type":"function"},{"doc":"Combines two rotation-and-shift transformations. rvec1 . tvec1 . rvec2 . tvec2 . rvec3 . tvec3 . dr3dr1 . dr3dt1 . dr3dr2 . dr3dt2 . dt3dr1 . dt3dt1 . dt3dr2 . dt3dt2 . The functions compute: \\f[\\begin{array}{l} \\texttt{rvec3} = \\mathrm{rodrigues} ^{-1} \\left ( \\mathrm{rodrigues} ( \\texttt{rvec2} ) \\cdot \\mathrm{rodrigues} ( \\texttt{rvec1} ) \\right ) \\\\ \\texttt{tvec3} = \\mathrm{rodrigues} ( \\texttt{rvec2} ) \\cdot \\texttt{tvec1} + \\texttt{tvec2} \\end{array} ,\\f] where \\f$\\mathrm{rodrigues}\\f$ denotes a rotation vector to a rotation matrix transformation, and \\f$\\mathrm{rodrigues}^{-1}\\f$ denotes the inverse transformation. See Rodrigues for details. Also, the functions can compute the derivatives of the output vectors with regards to the input vectors (see matMulDeriv ). The functions are used inside #stereoCalibrate but can also be used in your own code where Levenberg-Marquardt or another gradient-based solver is used to optimize a function that contains a matrix multiplication. rvec3 : UMat tvec3 : UMat dr3dr1 : UMat dr3dt1 : UMat dr3dr2 : UMat dr3dt2 : UMat dt3dr1 : UMat dt3dt1 : UMat dt3dr2 : UMat dt3dt2 : UMat Python prototype (for reference): composeRT ( rvec1 , tvec1 , rvec2 , tvec2 [ , rvec3 [ , tvec3 [ , dr3dr1 [ , dr3dt1 [ , dr3dr2 [ , dr3dt2 [ , dt3dr1 [ , dt3dt1 [ , dt3dr2 [ , dt3dt2 ] ] ] ] ] ] ] ] ] ] ) -&gt; rvec3 , tvec3 , dr3dr1 , dr3dt1 , dr3dr2 , dr3dt2 , dt3dr1 , dt3dt1 , dt3dr2 , dt3dt2","ref":"OpenCV.html#composert/5","title":"OpenCV.composert/5","type":"function"},{"doc":"","ref":"OpenCV.html#computecorrespondepilines/3","title":"OpenCV.computecorrespondepilines/3","type":"function"},{"doc":"For points in an image of a stereo pair, computes the corresponding epilines in the other image. points . vector\\&lt;Point2f&gt; . whichImage . f . lines . Each line \\f$ax + by + c=0\\f$ is encoded by 3 numbers \\f$(a, b, c)\\f$ . For every point in one of the two images of a stereo pair, the function finds the equation of the corresponding epipolar line in the other image. From the fundamental matrix definition (see #findFundamentalMat ), line \\f$l^{(2)}_i\\f$ in the second image for the point \\f$p^{(1)}_i\\f$ in the first image (when whichImage=1 ) is computed as: \\f[l^{(2)}_i = F p^{(1)}_i\\f] And vice versa, when whichImage=2, \\f$l^{(1)}_i\\f$ is computed from \\f$p^{(2)}_i\\f$ as: \\f[l^{(1)}_i = F^T p^{(2)}_i\\f] Line coefficients are defined up to a scale. They are normalized so that \\f$a_i^2+b_i^2=1\\f$ . lines : UMat Python prototype (for reference): computeCorrespondEpilines ( points , whichImage , F [ , lines ] ) -&gt; lines","ref":"OpenCV.html#computecorrespondepilines/4","title":"OpenCV.computecorrespondepilines/4","type":"function"},{"doc":"","ref":"OpenCV.html#computeecc/2","title":"OpenCV.computeecc/2","type":"function"},{"doc":"Computes the Enhanced Correlation Coefficient value between two images @cite EP08 . templateImage . inputImage . templateImage, same type as templateImage. inputMask . @sa findTransformECC inputMask : UMat Python prototype (for reference): computeECC ( templateImage , inputImage [ , inputMask ] ) -&gt; retval","ref":"OpenCV.html#computeecc/3","title":"OpenCV.computeecc/3","type":"function"},{"doc":"","ref":"OpenCV.html#connectedcomponents/1","title":"OpenCV.connectedcomponents/1","type":"function"},{"doc":"Has overloading in C++ image . labels . connectivity . ltype . labels : UMat connectivity : int ltype : int Python prototype (for reference): connectedComponents ( image [ , labels [ , connectivity [ , ltype ] ] ] ) -&gt; retval , labels","ref":"OpenCV.html#connectedcomponents/2","title":"OpenCV.connectedcomponents/2","type":"function"},{"doc":"","ref":"OpenCV.html#connectedcomponentswithalgorithm/4","title":"OpenCV.connectedcomponentswithalgorithm/4","type":"function"},{"doc":"computes the connected components labeled image of boolean image image with 4 or 8 way connectivity - returns N, the total number of labels [0, N-1] where 0 represents the background label. ltype specifies the output label image type, an important consideration based on the total number of labels or alternatively the total number of pixels in the source image. ccltype specifies the connected components labeling algorithm to use, currently Bolelli (Spaghetti) @cite Bolelli2019, Grana (BBDT) @cite Grana2010 and Wu's (SAUF) @cite Wu2009 algorithms are supported, see the #ConnectedComponentsAlgorithmsTypes for details. Note that SAUF algorithm forces a row major ordering of labels while Spaghetti and BBDT do not. This function uses parallel version of the algorithms if at least one allowed parallel framework is enabled and if the rows of the image are at least twice the number returned by #getNumberOfCPUs. image . labels . connectivity . ltype . ccltype . labels : UMat Python prototype (for reference): connectedComponentsWithAlgorithm ( image , connectivity , ltype , ccltype [ , labels ] ) -&gt; retval , labels","ref":"OpenCV.html#connectedcomponentswithalgorithm/5","title":"OpenCV.connectedcomponentswithalgorithm/5","type":"function"},{"doc":"","ref":"OpenCV.html#connectedcomponentswithstats/1","title":"OpenCV.connectedcomponentswithstats/1","type":"function"},{"doc":"Has overloading in C++ image . labels . stats . Statistics are accessed via stats(label, COLUMN) where COLUMN is one of #ConnectedComponentsTypes, selecting the statistic. The data type is CV_32S. centroids . accessed via centroids(label, 0) for x and centroids(label, 1) for y. The data type CV_64F. connectivity . ltype . labels : UMat stats : UMat centroids : UMat connectivity : int ltype : int Python prototype (for reference): connectedComponentsWithStats ( image [ , labels [ , stats [ , centroids [ , connectivity [ , ltype ] ] ] ] ] ) -&gt; retval , labels , stats , centroids","ref":"OpenCV.html#connectedcomponentswithstats/2","title":"OpenCV.connectedcomponentswithstats/2","type":"function"},{"doc":"","ref":"OpenCV.html#connectedcomponentswithstatswithalgorithm/4","title":"OpenCV.connectedcomponentswithstatswithalgorithm/4","type":"function"},{"doc":"computes the connected components labeled image of boolean image and also produces a statistics output for each label image with 4 or 8 way connectivity - returns N, the total number of labels [0, N-1] where 0 represents the background label. ltype specifies the output label image type, an important consideration based on the total number of labels or alternatively the total number of pixels in the source image. ccltype specifies the connected components labeling algorithm to use, currently Bolelli (Spaghetti) @cite Bolelli2019, Grana (BBDT) @cite Grana2010 and Wu's (SAUF) @cite Wu2009 algorithms are supported, see the #ConnectedComponentsAlgorithmsTypes for details. Note that SAUF algorithm forces a row major ordering of labels while Spaghetti and BBDT do not. This function uses parallel version of the algorithms (statistics included) if at least one allowed parallel framework is enabled and if the rows of the image are at least twice the number returned by #getNumberOfCPUs. image . labels . stats . Statistics are accessed via stats(label, COLUMN) where COLUMN is one of #ConnectedComponentsTypes, selecting the statistic. The data type is CV_32S. centroids . accessed via centroids(label, 0) for x and centroids(label, 1) for y. The data type CV_64F. connectivity . ltype . ccltype . labels : UMat stats : UMat centroids : UMat Python prototype (for reference): connectedComponentsWithStatsWithAlgorithm ( image , connectivity , ltype , ccltype [ , labels [ , stats [ , centroids ] ] ] ) -&gt; retval , labels , stats , centroids","ref":"OpenCV.html#connectedcomponentswithstatswithalgorithm/5","title":"OpenCV.connectedcomponentswithstatswithalgorithm/5","type":"function"},{"doc":"","ref":"OpenCV.html#contourarea/1","title":"OpenCV.contourarea/1","type":"function"},{"doc":"Calculates a contour area. The function computes a contour area. Similarly to moments , the area is computed using the Green formula. Thus, the returned area and the number of non-zero pixels, if you draw the contour using #drawContours or #fillPoly , can be different. Also, the function will most certainly give a wrong results for contours with self-intersections. Example: vector &lt; Point &gt; contour ; contour . push_back ( Point2f ( 0 , 0 ) ) ; contour . push_back ( Point2f ( 10 , 0 ) ) ; contour . push_back ( Point2f ( 10 , 10 ) ) ; contour . push_back ( Point2f ( 5 , 4 ) ) ; double area0 = contourArea ( contour ) ; vector &lt; Point &gt; approx ; approxPolyDP ( contour , approx , 5 , true ) ; double area1 = contourArea ( approx ) ; cout &lt;&lt; &quot;area0 =&quot; &lt;&lt; area0 &lt;&lt; endl &lt;&lt; &quot;area1 =&quot; &lt;&lt; area1 &lt;&lt; endl &lt;&lt; &quot;approx poly vertices&quot; &lt;&lt; approx . size ( ) &lt;&lt; endl ; contour . oriented . depending on the contour orientation (clockwise or counter-clockwise). Using this feature you can determine orientation of a contour by taking the sign of an area. By default, the parameter is false, which means that the absolute value is returned. oriented : bool Python prototype (for reference): contourArea ( contour [ , oriented ] ) -&gt; retval","ref":"OpenCV.html#contourarea/2","title":"OpenCV.contourarea/2","type":"function"},{"doc":"","ref":"OpenCV.html#convertfp16/1","title":"OpenCV.convertfp16/1","type":"function"},{"doc":"Converts an array to half precision floating number. This function converts FP32 (single precision floating point) from/to FP16 (half precision floating point). CV_16S format is used to represent FP16 data. There are two use modes (src -&gt; dst): CV_32F -&gt; CV_16S and CV_16S -&gt; CV_32F. The input array has to have type of CV_32F or CV_16S to represent the bit depth. If the input array is neither of them, the function will raise an error. The format of half precision floating point is defined in IEEE 754-2008. src . dst . dst : UMat Python prototype (for reference): convertFp16 ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.html#convertfp16/2","title":"OpenCV.convertfp16/2","type":"function"},{"doc":"","ref":"OpenCV.html#convertmaps/3","title":"OpenCV.convertmaps/3","type":"function"},{"doc":"Converts image transformation maps from one representation to another. The function converts a pair of maps for remap from one representation to another. The following options ( (map1.type(), map2.type()) \\f$\\rightarrow\\f$ (dstmap1.type(), dstmap2.type()) ) are supported: \\f$\\texttt{(CV_32FC1, CV_32FC1)} \\rightarrow \\texttt{(CV_16SC2, CV_16UC1)}\\f$. This is the most frequently used conversion operation, in which the original floating-point maps (see remap ) are converted to a more compact and much faster fixed-point representation. The first output array contains the rounded coordinates and the second array (created only when nninterpolation=false ) contains indices in the interpolation tables. \\f$\\texttt{(CV_32FC2)} \\rightarrow \\texttt{(CV_16SC2, CV_16UC1)}\\f$. The same as above but the original maps are stored in one 2-channel matrix. Reverse conversion. Obviously, the reconstructed floating-point maps will not be exactly the same as the originals. map1 . map2 . respectively. dstmap1 . dstmap2 . dstmap1type . CV_32FC2 . nninterpolation . nearest-neighbor or for a more complex interpolation. @sa remap, undistort, initUndistortRectifyMap dstmap1 : UMat dstmap2 : UMat nninterpolation : bool Python prototype (for reference): convertMaps ( map1 , map2 , dstmap1type [ , dstmap1 [ , dstmap2 [ , nninterpolation ] ] ] ) -&gt; dstmap1 , dstmap2","ref":"OpenCV.html#convertmaps/4","title":"OpenCV.convertmaps/4","type":"function"},{"doc":"","ref":"OpenCV.html#convertpointsfromhomogeneous/1","title":"OpenCV.convertpointsfromhomogeneous/1","type":"function"},{"doc":"Converts points from homogeneous to Euclidean space. src . dst . The function converts points homogeneous to Euclidean space using perspective projection. That is, each point (x1, x2, ... x(n-1), xn) is converted to (x1/xn, x2/xn, ..., x(n-1)/xn). When xn=0, the output point coordinates will be (0,0,0,...). dst : UMat Python prototype (for reference): convertPointsFromHomogeneous ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.html#convertpointsfromhomogeneous/2","title":"OpenCV.convertpointsfromhomogeneous/2","type":"function"},{"doc":"","ref":"OpenCV.html#convertpointstohomogeneous/1","title":"OpenCV.convertpointstohomogeneous/1","type":"function"},{"doc":"Converts points from Euclidean to homogeneous space. src . dst . The function converts points from Euclidean to homogeneous space by appending 1's to the tuple of point coordinates. That is, each point (x1, x2, ..., xn) is converted to (x1, x2, ..., xn, 1). dst : UMat Python prototype (for reference): convertPointsToHomogeneous ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.html#convertpointstohomogeneous/2","title":"OpenCV.convertpointstohomogeneous/2","type":"function"},{"doc":"","ref":"OpenCV.html#convertscaleabs/1","title":"OpenCV.convertscaleabs/1","type":"function"},{"doc":"Scales, calculates absolute values, and converts the result to 8-bit. On each element of the input array, the function convertScaleAbs performs three operations sequentially: scaling, taking an absolute value, conversion to an unsigned 8-bit type: \\f[\\texttt{dst} (I)= \\texttt{saturate\\_cast&lt;uchar&gt;} (| \\texttt{src} (I)* \\texttt{alpha} + \\texttt{beta} |)\\f] In case of multi-channel arrays, the function processes each channel independently. When the output is not 8-bit, the operation can be emulated by calling the Mat::convertTo method (or by using matrix expressions) and then by calculating an absolute value of the result. For example: Mat_&lt;float&gt; A(30,30); randu(A, Scalar(-100), Scalar(100)); Mat_&lt;float&gt; B = A*5 + 3; B = abs(B); // Mat_&lt;float&gt; B = abs(A*5+3) will also do the job, // but it will allocate a temporary matrix src . dst . alpha . beta . @sa Mat::convertTo, cv::abs(const Mat&amp;) dst : UMat alpha : double beta : double Python prototype (for reference): convertScaleAbs ( src [ , dst [ , alpha [ , beta ] ] ] ) -&gt; dst","ref":"OpenCV.html#convertscaleabs/2","title":"OpenCV.convertscaleabs/2","type":"function"},{"doc":"","ref":"OpenCV.html#convexhull/1","title":"OpenCV.convexhull/1","type":"function"},{"doc":"Finds the convex hull of a point set. The function cv::convexHull finds the convex hull of a 2D point set using the Sklansky's algorithm @cite Sklansky82 that has O(N logN) complexity in the current implementation. points . hull . the first case, the hull elements are 0-based indices of the convex hull points in the original array (since the set of convex hull points is a subset of the original point set). In the second case, hull elements are the convex hull points themselves. clockwise . Otherwise, it is oriented counter-clockwise. The assumed coordinate system has its X axis pointing to the right, and its Y axis pointing upwards. returnPoints . returns convex hull points. Otherwise, it returns indices of the convex hull points. When the output array is std::vector, the flag is ignored, and the output depends on the type of the vector: std::vector\\&lt;int&gt; implies returnPoints=false, std::vector\\&lt;Point&gt; implies returnPoints=true. Note : points and hull should be different arrays, inplace processing isn't supported. Check @ref tutorial_hull &quot;the corresponding tutorial&quot; for more details. useful links: https://www.learnopencv.com/convex-hull-using-opencv-in-python-and-c/ hull : UMat clockwise : bool returnPoints : bool Python prototype (for reference): convexHull ( points [ , hull [ , clockwise [ , returnPoints ] ] ] ) -&gt; hull","ref":"OpenCV.html#convexhull/2","title":"OpenCV.convexhull/2","type":"function"},{"doc":"","ref":"OpenCV.html#convexitydefects/2","title":"OpenCV.convexitydefects/2","type":"function"},{"doc":"Finds the convexity defects of a contour. The figure below displays convexity defects of a hand contour: contour . convexhull . points that make the hull. convexityDefects . interface each convexity defect is represented as 4-element integer vector (a.k.a. #Vec4i): (start_index, end_index, farthest_pt_index, fixpt_depth), where indices are 0-based indices in the original contour of the convexity defect beginning, end and the farthest point, and fixpt_depth is fixed-point approximation (with 8 fractional bits) of the distance between the farthest contour point and the hull. That is, to get the floating-point value of the depth will be fixpt_depth/256.0. convexityDefects : UMat Python prototype (for reference): convexityDefects ( contour , convexhull [ , convexityDefects ] ) -&gt; convexityDefects","ref":"OpenCV.html#convexitydefects/3","title":"OpenCV.convexitydefects/3","type":"function"},{"doc":"","ref":"OpenCV.html#copymakeborder/6","title":"OpenCV.copymakeborder/6","type":"function"},{"doc":"Forms a border around an image. The function copies the source image into the middle of the destination image. The areas to the left, to the right, above and below the copied source image will be filled with extrapolated pixels. This is not what filtering functions based on it do (they extrapolate pixels on-fly), but what other more complex functions, including your own, may do to simplify image boundary handling. The function supports the mode when src is already in the middle of dst . In this case, the function does not copy src itself but simply constructs the border, for example: // let border be the same in all directions int border=2; // constructs a larger image to fit both the image and the border Mat gray_buf(rgb.rows + border*2, rgb.cols + border*2, rgb.depth()); // select the middle part of it w/o copying data Mat gray(gray_canvas, Rect(border, border, rgb.cols, rgb.rows)); // convert image from RGB to grayscale cvtColor(rgb, gray, COLOR_RGB2GRAY); // form a border in-place copyMakeBorder(gray, gray_buf, border, border, border, border, BORDER_REPLICATE); // now do some custom filtering ... ... Note : When the source image is a part (ROI) of a bigger image, the function will try to use the pixels outside of the ROI to form a border. To disable this feature and always do extrapolation, as if src was not a ROI, use borderType | #BORDER_ISOLATED. src . dst . src.rows+top+bottom) . top . bottom . left . right . to extrapolate. For example, top=1, bottom=1, left=1, right=1 mean that 1 pixel-wide border needs to be built. borderType . value . @sa borderInterpolate dst : UMat value : Scalar Python prototype (for reference): copyMakeBorder ( src , top , bottom , left , right , borderType [ , dst [ , value ] ] ) -&gt; dst","ref":"OpenCV.html#copymakeborder/7","title":"OpenCV.copymakeborder/7","type":"function"},{"doc":"","ref":"OpenCV.html#copyto/2","title":"OpenCV.copyto/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience (python) Copies the matrix to another one. When the operation mask is specified, if the Mat::create call shown above reallocates the matrix, the newly allocated matrix is initialized with all zeros before copying the data. src . dst . reallocated. mask . elements need to be copied. The mask has to be of type CV_8U and can have 1 or multiple channels. dst : UMat Python prototype (for reference): copyTo ( src , mask [ , dst ] ) -&gt; dst","ref":"OpenCV.html#copyto/3","title":"OpenCV.copyto/3","type":"function"},{"doc":"","ref":"OpenCV.html#cornereigenvalsandvecs/3","title":"OpenCV.cornereigenvalsandvecs/3","type":"function"},{"doc":"Calculates eigenvalues and eigenvectors of image blocks for corner detection. For every pixel \\f$p\\f$ , the function cornerEigenValsAndVecs considers a blockSize \\f$\\times\\f$ blockSize neighborhood \\f$S(p)\\f$ . It calculates the covariation matrix of derivatives over the neighborhood as: \\f[M = \\begin{bmatrix} \\sum _{S(p)}(dI/dx)^2 &amp; \\sum _{S(p)}dI/dx dI/dy \\\\ \\sum _{S(p)}dI/dx dI/dy &amp; \\sum _{S(p)}(dI/dy)^2 \\end{bmatrix}\\f] where the derivatives are computed using the Sobel operator. After that, it finds eigenvectors and eigenvalues of \\f$M\\f$ and stores them in the destination image as \\f$(\\lambda_1, \\lambda_2, x_1, y_1, x_2, y_2)\\f$ where \\f$\\lambda_1, \\lambda_2\\f$ are the non-sorted eigenvalues of \\f$M\\f$ \\f$x_1, y_1\\f$ are the eigenvectors corresponding to \\f$\\lambda_1\\f$ \\f$x_2, y_2\\f$ are the eigenvectors corresponding to \\f$\\lambda_2\\f$ The output of the function can be used for robust edge or corner detection. src . dst . blockSize . ksize . borderType . @sa cornerMinEigenVal, cornerHarris, preCornerDetect dst : UMat borderType : int Python prototype (for reference): cornerEigenValsAndVecs ( src , blockSize , ksize [ , dst [ , borderType ] ] ) -&gt; dst","ref":"OpenCV.html#cornereigenvalsandvecs/4","title":"OpenCV.cornereigenvalsandvecs/4","type":"function"},{"doc":"","ref":"OpenCV.html#cornerharris/4","title":"OpenCV.cornerharris/4","type":"function"},{"doc":"Harris corner detector. The function runs the Harris corner detector on the image. Similarly to cornerMinEigenVal and cornerEigenValsAndVecs , for each pixel \\f$(x, y)\\f$ it calculates a \\f$2\\times2\\f$ gradient covariance matrix \\f$M^{(x,y)}\\f$ over a \\f$\\texttt{blockSize} \\times \\texttt{blockSize}\\f$ neighborhood. Then, it computes the following characteristic: \\f[\\texttt{dst} (x,y) = \\mathrm{det} M^{(x,y)} - k \\cdot \\left ( \\mathrm{tr} M^{(x,y)} \\right )^2\\f] Corners in the image can be found as the local maxima of this response map. src . dst . size as src . blockSize . ksize . k . borderType . dst : UMat borderType : int Python prototype (for reference): cornerHarris ( src , blockSize , ksize , k [ , dst [ , borderType ] ] ) -&gt; dst","ref":"OpenCV.html#cornerharris/5","title":"OpenCV.cornerharris/5","type":"function"},{"doc":"","ref":"OpenCV.html#cornermineigenval/2","title":"OpenCV.cornermineigenval/2","type":"function"},{"doc":"Calculates the minimal eigenvalue of gradient matrices for corner detection. The function is similar to cornerEigenValsAndVecs but it calculates and stores only the minimal eigenvalue of the covariance matrix of derivatives, that is, \\f$\\min(\\lambda_1, \\lambda_2)\\f$ in terms of the formulae in the cornerEigenValsAndVecs description. src . dst . src . blockSize . ksize . borderType . dst : UMat ksize : int borderType : int Python prototype (for reference): cornerMinEigenVal ( src , blockSize [ , dst [ , ksize [ , borderType ] ] ] ) -&gt; dst","ref":"OpenCV.html#cornermineigenval/3","title":"OpenCV.cornermineigenval/3","type":"function"},{"doc":"","ref":"OpenCV.html#cornersubpix/5","title":"OpenCV.cornersubpix/5","type":"function"},{"doc":"","ref":"OpenCV.html#correctmatches/3","title":"OpenCV.correctmatches/3","type":"function"},{"doc":"Refines coordinates of corresponding points. f . points1 . points2 . newPoints1 . newPoints2 . The function implements the Optimal Triangulation Method (see Multiple View Geometry for details). For each given point correspondence points1[i] \\&lt;-&gt; points2[i], and a fundamental matrix F, it computes the corrected correspondences newPoints1[i] \\&lt;-&gt; newPoints2[i] that minimize the geometric error \\f$d(points1[i], newPoints1[i])^2 + d(points2[i],newPoints2[i])^2\\f$ (where \\f$d(a,b)\\f$ is the geometric distance between points \\f$a\\f$ and \\f$b\\f$ ) subject to the epipolar constraint \\f$newPoints2^T * F * newPoints1 = 0\\f$ . newPoints1 : UMat newPoints2 : UMat Python prototype (for reference): correctMatches ( F , points1 , points2 [ , newPoints1 [ , newPoints2 ] ] ) -&gt; newPoints1 , newPoints2","ref":"OpenCV.html#correctmatches/4","title":"OpenCV.correctmatches/4","type":"function"},{"doc":"","ref":"OpenCV.html#countnonzero/1","title":"OpenCV.countnonzero/1","type":"function"},{"doc":"","ref":"OpenCV.html#createalignmtb/0","title":"OpenCV.createalignmtb/0","type":"function"},{"doc":"Creates AlignMTB object max_bits . usually good enough (31 and 63 pixels shift respectively). exclude_range . median value. cut . max_bits : int exclude_range : int cut : bool Python prototype (for reference): createAlignMTB ( [ , max_bits [ , exclude_range [ , cut ] ] ] ) -&gt; retval","ref":"OpenCV.html#createalignmtb/1","title":"OpenCV.createalignmtb/1","type":"function"},{"doc":"","ref":"OpenCV.html#createbackgroundsubtractorknn/0","title":"OpenCV.createbackgroundsubtractorknn/0","type":"function"},{"doc":"Creates KNN Background Subtractor history . dist2Threshold . whether a pixel is close to that sample. This parameter does not affect the background update. detectShadows . speed a bit, so if you do not need this feature, set the parameter to false. history : int dist2Threshold : double detectShadows : bool Python prototype (for reference): createBackgroundSubtractorKNN ( [ , history [ , dist2Threshold [ , detectShadows ] ] ] ) -&gt; retval","ref":"OpenCV.html#createbackgroundsubtractorknn/1","title":"OpenCV.createbackgroundsubtractorknn/1","type":"function"},{"doc":"","ref":"OpenCV.html#createbackgroundsubtractormog2/0","title":"OpenCV.createbackgroundsubtractormog2/0","type":"function"},{"doc":"Creates MOG2 Background Subtractor history . varThreshold . to decide whether a pixel is well described by the background model. This parameter does not affect the background update. detectShadows . speed a bit, so if you do not need this feature, set the parameter to false. history : int varThreshold : double detectShadows : bool Python prototype (for reference): createBackgroundSubtractorMOG2 ( [ , history [ , varThreshold [ , detectShadows ] ] ] ) -&gt; retval","ref":"OpenCV.html#createbackgroundsubtractormog2/1","title":"OpenCV.createbackgroundsubtractormog2/1","type":"function"},{"doc":"","ref":"OpenCV.html#createcalibratedebevec/0","title":"OpenCV.createcalibratedebevec/0","type":"function"},{"doc":"Creates CalibrateDebevec object samples . lambda . response. random . rectangular grid. samples : int lambda_ : float random : bool Python prototype (for reference): createCalibrateDebevec ( [ , samples [ , lambda_ [ , random ] ] ] ) -&gt; retval","ref":"OpenCV.html#createcalibratedebevec/1","title":"OpenCV.createcalibratedebevec/1","type":"function"},{"doc":"","ref":"OpenCV.html#createcalibraterobertson/0","title":"OpenCV.createcalibraterobertson/0","type":"function"},{"doc":"Creates CalibrateRobertson object max_iter . threshold . max_iter : int threshold : float Python prototype (for reference): createCalibrateRobertson ( [ , max_iter [ , threshold ] ] ) -&gt; retval","ref":"OpenCV.html#createcalibraterobertson/1","title":"OpenCV.createcalibraterobertson/1","type":"function"},{"doc":"","ref":"OpenCV.html#createclahe/0","title":"OpenCV.createclahe/0","type":"function"},{"doc":"Creates a smart pointer to a cv::CLAHE class and initializes it. clipLimit . tileGridSize . equally sized rectangular tiles. tileGridSize defines the number of tiles in row and column. clipLimit : double tileGridSize : Size Python prototype (for reference): createCLAHE ( [ , clipLimit [ , tileGridSize ] ] ) -&gt; retval","ref":"OpenCV.html#createclahe/1","title":"OpenCV.createclahe/1","type":"function"},{"doc":"","ref":"OpenCV.html#creategeneralizedhoughballard/0","title":"OpenCV.creategeneralizedhoughballard/0","type":"function"},{"doc":"","ref":"OpenCV.html#creategeneralizedhoughguil/0","title":"OpenCV.creategeneralizedhoughguil/0","type":"function"},{"doc":"","ref":"OpenCV.html#createhanningwindow/2","title":"OpenCV.createhanningwindow/2","type":"function"},{"doc":"This function computes a Hanning window coefficients in two dimensions. See ( http://en.wikipedia.org/wiki/Hann_function ) and ( http://en.wikipedia.org/wiki/Window_function ) for more information. An example is shown below: // create hanning window of size 100 x100 and type CV_32F Mat hann ; createHanningWindow ( hann , Size ( 100 , 100 ) , CV_32F ) ; dst . winSize . type . dst : UMat Python prototype (for reference): createHanningWindow ( winSize , type [ , dst ] ) -&gt; dst","ref":"OpenCV.html#createhanningwindow/3","title":"OpenCV.createhanningwindow/3","type":"function"},{"doc":"","ref":"OpenCV.html#createlinesegmentdetector/0","title":"OpenCV.createlinesegmentdetector/0","type":"function"},{"doc":"Creates a smart pointer to a LineSegmentDetector object and initializes it. The LineSegmentDetector algorithm is defined using the standard values. Only advanced users may want to edit those, as to tailor it for their own application. refine . scale . sigma_scale . quant . ang_th . log_eps . density_th . n_bins . refine : int scale : double sigma_scale : double quant : double ang_th : double log_eps : double density_th : double n_bins : int Python prototype (for reference): createLineSegmentDetector ( [ , refine [ , scale [ , sigma_scale [ , quant [ , ang_th [ , log_eps [ , density_th [ , n_bins ] ] ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#createlinesegmentdetector/1","title":"OpenCV.createlinesegmentdetector/1","type":"function"},{"doc":"","ref":"OpenCV.html#createmergedebevec/0","title":"OpenCV.createmergedebevec/0","type":"function"},{"doc":"","ref":"OpenCV.html#createmergemertens/0","title":"OpenCV.createmergemertens/0","type":"function"},{"doc":"Creates MergeMertens object contrast_weight . saturation_weight . exposure_weight . contrast_weight : float saturation_weight : float exposure_weight : float Python prototype (for reference): createMergeMertens ( [ , contrast_weight [ , saturation_weight [ , exposure_weight ] ] ] ) -&gt; retval","ref":"OpenCV.html#createmergemertens/1","title":"OpenCV.createmergemertens/1","type":"function"},{"doc":"","ref":"OpenCV.html#createmergerobertson/0","title":"OpenCV.createmergerobertson/0","type":"function"},{"doc":"","ref":"OpenCV.html#createtonemap/0","title":"OpenCV.createtonemap/0","type":"function"},{"doc":"Creates simple linear mapper with gamma correction gamma . equal to 2.2f is suitable for most displays. Generally gamma &gt; 1 brightens the image and gamma \\&lt; 1 darkens it. gamma : float Python prototype (for reference): createTonemap ( [ , gamma ] ) -&gt; retval","ref":"OpenCV.html#createtonemap/1","title":"OpenCV.createtonemap/1","type":"function"},{"doc":"","ref":"OpenCV.html#createtonemapdrago/0","title":"OpenCV.createtonemapdrago/0","type":"function"},{"doc":"Creates TonemapDrago object gamma . saturation . than 1 increase saturation and values less than 1 decrease it. bias . results, default value is 0.85. gamma : float saturation : float bias : float Python prototype (for reference): createTonemapDrago ( [ , gamma [ , saturation [ , bias ] ] ] ) -&gt; retval","ref":"OpenCV.html#createtonemapdrago/1","title":"OpenCV.createtonemapdrago/1","type":"function"},{"doc":"","ref":"OpenCV.html#createtonemapmantiuk/0","title":"OpenCV.createtonemapmantiuk/0","type":"function"},{"doc":"Creates TonemapMantiuk object gamma . scale . dynamic range. Values from 0.6 to 0.9 produce best results. saturation . gamma : float scale : float saturation : float Python prototype (for reference): createTonemapMantiuk ( [ , gamma [ , scale [ , saturation ] ] ] ) -&gt; retval","ref":"OpenCV.html#createtonemapmantiuk/1","title":"OpenCV.createtonemapmantiuk/1","type":"function"},{"doc":"","ref":"OpenCV.html#createtonemapreinhard/0","title":"OpenCV.createtonemapreinhard/0","type":"function"},{"doc":"Creates TonemapReinhard object gamma . intensity . light_adapt . value, if 0 it's global, otherwise it's a weighted mean of this two cases. color_adapt . if 0 adaptation level is the same for each channel. gamma : float intensity : float light_adapt : float color_adapt : float Python prototype (for reference): createTonemapReinhard ( [ , gamma [ , intensity [ , light_adapt [ , color_adapt ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#createtonemapreinhard/1","title":"OpenCV.createtonemapreinhard/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuberoot/1","title":"OpenCV.cuberoot/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_createcontinuous/3","title":"OpenCV.cuda_createcontinuous/3","type":"function"},{"doc":"Creates a continuous matrix. rows . cols . type . arr . \\f$\\texttt{rows} \\times \\texttt{cols}\\f$ ). Matrix is called continuous if its elements are stored continuously, that is, without gaps at the end of each row. arr : UMat Python prototype (for reference): createContinuous ( rows , cols , type [ , arr ] ) -&gt; arr","ref":"OpenCV.html#cuda_createcontinuous/4","title":"OpenCV.cuda_createcontinuous/4","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_cuda_deviceinfo_deviceinfo/0","title":"OpenCV.cuda_cuda_deviceinfo_deviceinfo/0","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_cuda_deviceinfo_deviceinfo/1","title":"OpenCV.cuda_cuda_deviceinfo_deviceinfo/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_cuda_event_event/0","title":"OpenCV.cuda_cuda_event_event/0","type":"function"},{"doc":"flags : Event_CreateFlags Python prototype (for reference): Event ( [ , flags ] ) -&gt; &lt; cuda_Event object &gt;","ref":"OpenCV.html#cuda_cuda_event_event/1","title":"OpenCV.cuda_cuda_event_event/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_cuda_gpumat_gpumat/1","title":"OpenCV.cuda_cuda_gpumat_gpumat/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_cuda_gpumat_gpumat/2","title":"OpenCV.cuda_cuda_gpumat_gpumat/2","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_cuda_gpumat_gpumat/3","title":"OpenCV.cuda_cuda_gpumat_gpumat/3","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_cuda_gpumat_gpumat/4","title":"OpenCV.cuda_cuda_gpumat_gpumat/4","type":"function"},{"doc":"allocator : GpuMat_Allocator* Python prototype (for reference): GpuMat ( rows , cols , type , s [ , allocator ] ) -&gt; &lt; cuda_GpuMat object &gt;","ref":"OpenCV.html#cuda_cuda_gpumat_gpumat/5","title":"OpenCV.cuda_cuda_gpumat_gpumat/5","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_cuda_hostmem_hostmem/1","title":"OpenCV.cuda_cuda_hostmem_hostmem/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_cuda_hostmem_hostmem/2","title":"OpenCV.cuda_cuda_hostmem_hostmem/2","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_cuda_hostmem_hostmem/3","title":"OpenCV.cuda_cuda_hostmem_hostmem/3","type":"function"},{"doc":"alloc_type : HostMem_AllocType Python prototype (for reference): HostMem ( rows , cols , type [ , alloc_type ] ) -&gt; &lt; cuda_HostMem object &gt;","ref":"OpenCV.html#cuda_cuda_hostmem_hostmem/4","title":"OpenCV.cuda_cuda_hostmem_hostmem/4","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_cuda_stream_stream/1","title":"OpenCV.cuda_cuda_stream_stream/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_ensuresizeisenough/3","title":"OpenCV.cuda_ensuresizeisenough/3","type":"function"},{"doc":"Ensures that the size of a matrix is big enough and the matrix has a proper type. rows . cols . type . arr . The function does not reallocate memory if the matrix has proper attributes already. arr : UMat Python prototype (for reference): ensureSizeIsEnough ( rows , cols , type [ , arr ] ) -&gt; arr","ref":"OpenCV.html#cuda_ensuresizeisenough/4","title":"OpenCV.cuda_ensuresizeisenough/4","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_event_elapsedtime/2","title":"OpenCV.cuda_event_elapsedtime/2","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_getcudaenableddevicecount/0","title":"OpenCV.cuda_getcudaenableddevicecount/0","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_getdevice/0","title":"OpenCV.cuda_getdevice/0","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_gpumat_defaultallocator/0","title":"OpenCV.cuda_gpumat_defaultallocator/0","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_gpumat_setdefaultallocator/1","title":"OpenCV.cuda_gpumat_setdefaultallocator/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_printcudadeviceinfo/1","title":"OpenCV.cuda_printcudadeviceinfo/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_printshortcudadeviceinfo/1","title":"OpenCV.cuda_printshortcudadeviceinfo/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_registerpagelocked/1","title":"OpenCV.cuda_registerpagelocked/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_resetdevice/0","title":"OpenCV.cuda_resetdevice/0","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_setbufferpoolconfig/3","title":"OpenCV.cuda_setbufferpoolconfig/3","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_setbufferpoolusage/1","title":"OpenCV.cuda_setbufferpoolusage/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_setdevice/1","title":"OpenCV.cuda_setdevice/1","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_stream_null/0","title":"OpenCV.cuda_stream_null/0","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_targetarchs_has/2","title":"OpenCV.cuda_targetarchs_has/2","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_targetarchs_hasbin/2","title":"OpenCV.cuda_targetarchs_hasbin/2","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_targetarchs_hasequalorgreater/2","title":"OpenCV.cuda_targetarchs_hasequalorgreater/2","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_targetarchs_hasequalorgreaterbin/2","title":"OpenCV.cuda_targetarchs_hasequalorgreaterbin/2","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_targetarchs_hasequalorgreaterptx/2","title":"OpenCV.cuda_targetarchs_hasequalorgreaterptx/2","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_targetarchs_hasequalorlessptx/2","title":"OpenCV.cuda_targetarchs_hasequalorlessptx/2","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_targetarchs_hasptx/2","title":"OpenCV.cuda_targetarchs_hasptx/2","type":"function"},{"doc":"","ref":"OpenCV.html#cuda_unregisterpagelocked/1","title":"OpenCV.cuda_unregisterpagelocked/1","type":"function"},{"doc":"","ref":"OpenCV.html#cv_access_fast/0","title":"OpenCV.cv_access_fast/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_access_mask/0","title":"OpenCV.cv_access_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_access_read/0","title":"OpenCV.cv_access_read/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_access_rw/0","title":"OpenCV.cv_access_rw/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_access_write/0","title":"OpenCV.cv_access_write/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_adaptive_thresh_gaussian_c/0","title":"OpenCV.cv_adaptive_thresh_gaussian_c/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_adaptive_thresh_mean_c/0","title":"OpenCV.cv_adaptive_thresh_mean_c/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_agast_5_8/0","title":"OpenCV.cv_agast_5_8/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_agast_7_12d/0","title":"OpenCV.cv_agast_7_12d/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_agast_7_12s/0","title":"OpenCV.cv_agast_7_12s/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_algorithm/0","title":"OpenCV.cv_algorithm/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_anneal/0","title":"OpenCV.cv_anneal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_append/0","title":"OpenCV.cv_append/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_array_buffer/0","title":"OpenCV.cv_array_buffer/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_as_is/0","title":"OpenCV.cv_as_is/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_asgd/0","title":"OpenCV.cv_asgd/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_asymmetric_grid/0","title":"OpenCV.cv_asymmetric_grid/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_async_cleanup/0","title":"OpenCV.cv_async_cleanup/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_auto_step/0","title":"OpenCV.cv_auto_step/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_backprop/0","title":"OpenCV.cv_backprop/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badalign/0","title":"OpenCV.cv_badalign/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badalphachannel/0","title":"OpenCV.cv_badalphachannel/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badcallback/0","title":"OpenCV.cv_badcallback/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badcoi/0","title":"OpenCV.cv_badcoi/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_baddataptr/0","title":"OpenCV.cv_baddataptr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_baddepth/0","title":"OpenCV.cv_baddepth/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badimagesize/0","title":"OpenCV.cv_badimagesize/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badmodelorchseq/0","title":"OpenCV.cv_badmodelorchseq/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badnumchannel1u/0","title":"OpenCV.cv_badnumchannel1u/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badnumchannels/0","title":"OpenCV.cv_badnumchannels/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badoffset/0","title":"OpenCV.cv_badoffset/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badorder/0","title":"OpenCV.cv_badorder/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badorigin/0","title":"OpenCV.cv_badorigin/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badroisize/0","title":"OpenCV.cv_badroisize/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badstep/0","title":"OpenCV.cv_badstep/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_badtilesize/0","title":"OpenCV.cv_badtilesize/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_base64/0","title":"OpenCV.cv_base64/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_batch/0","title":"OpenCV.cv_batch/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_blocking_sync/0","title":"OpenCV.cv_blocking_sync/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_boolean/0","title":"OpenCV.cv_boolean/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_boost_real/0","title":"OpenCV.cv_boost_real/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_border_constant/0","title":"OpenCV.cv_border_constant/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_border_default/0","title":"OpenCV.cv_border_default/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_border_isolated/0","title":"OpenCV.cv_border_isolated/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_border_reflect/0","title":"OpenCV.cv_border_reflect/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_border_reflect101/0","title":"OpenCV.cv_border_reflect101/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_border_reflect_101/0","title":"OpenCV.cv_border_reflect_101/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_border_replicate/0","title":"OpenCV.cv_border_replicate/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_border_transparent/0","title":"OpenCV.cv_border_transparent/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_border_wrap/0","title":"OpenCV.cv_border_wrap/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_brute_force/0","title":"OpenCV.cv_brute_force/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_bruteforce/0","title":"OpenCV.cv_bruteforce/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_bruteforce_hamming/0","title":"OpenCV.cv_bruteforce_hamming/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_bruteforce_hamminglut/0","title":"OpenCV.cv_bruteforce_hamminglut/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_bruteforce_l1/0","title":"OpenCV.cv_bruteforce_l1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_bruteforce_sl2/0","title":"OpenCV.cv_bruteforce_sl2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_buffer_read_only/0","title":"OpenCV.cv_buffer_read_only/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_buffer_read_write/0","title":"OpenCV.cv_buffer_read_write/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_buffer_write_only/0","title":"OpenCV.cv_buffer_write_only/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_c/0","title":"OpenCV.cv_c/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_c_svc/0","title":"OpenCV.cv_c_svc/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_cb_accuracy/0","title":"OpenCV.cv_calib_cb_accuracy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_cb_adaptive_thresh/0","title":"OpenCV.cv_calib_cb_adaptive_thresh/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_cb_asymmetric_grid/0","title":"OpenCV.cv_calib_cb_asymmetric_grid/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_cb_clustering/0","title":"OpenCV.cv_calib_cb_clustering/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_cb_exhaustive/0","title":"OpenCV.cv_calib_cb_exhaustive/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_cb_fast_check/0","title":"OpenCV.cv_calib_cb_fast_check/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_cb_filter_quads/0","title":"OpenCV.cv_calib_cb_filter_quads/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_cb_larger/0","title":"OpenCV.cv_calib_cb_larger/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_cb_marker/0","title":"OpenCV.cv_calib_cb_marker/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_cb_normalize_image/0","title":"OpenCV.cv_calib_cb_normalize_image/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_cb_symmetric_grid/0","title":"OpenCV.cv_calib_cb_symmetric_grid/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_check_cond/0","title":"OpenCV.cv_calib_check_cond/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_aspect_ratio/0","title":"OpenCV.cv_calib_fix_aspect_ratio/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_focal_length/0","title":"OpenCV.cv_calib_fix_focal_length/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_intrinsic/0","title":"OpenCV.cv_calib_fix_intrinsic/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_k1/0","title":"OpenCV.cv_calib_fix_k1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_k2/0","title":"OpenCV.cv_calib_fix_k2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_k3/0","title":"OpenCV.cv_calib_fix_k3/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_k4/0","title":"OpenCV.cv_calib_fix_k4/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_k5/0","title":"OpenCV.cv_calib_fix_k5/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_k6/0","title":"OpenCV.cv_calib_fix_k6/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_principal_point/0","title":"OpenCV.cv_calib_fix_principal_point/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_s1_s2_s3_s4/0","title":"OpenCV.cv_calib_fix_s1_s2_s3_s4/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_skew/0","title":"OpenCV.cv_calib_fix_skew/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_tangent_dist/0","title":"OpenCV.cv_calib_fix_tangent_dist/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_fix_taux_tauy/0","title":"OpenCV.cv_calib_fix_taux_tauy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_hand_eye_andreff/0","title":"OpenCV.cv_calib_hand_eye_andreff/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_hand_eye_daniilidis/0","title":"OpenCV.cv_calib_hand_eye_daniilidis/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_hand_eye_horaud/0","title":"OpenCV.cv_calib_hand_eye_horaud/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_hand_eye_park/0","title":"OpenCV.cv_calib_hand_eye_park/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_hand_eye_tsai/0","title":"OpenCV.cv_calib_hand_eye_tsai/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_nintrinsic/0","title":"OpenCV.cv_calib_nintrinsic/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_rational_model/0","title":"OpenCV.cv_calib_rational_model/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_recompute_extrinsic/0","title":"OpenCV.cv_calib_recompute_extrinsic/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_robot_world_hand_eye_li/0","title":"OpenCV.cv_calib_robot_world_hand_eye_li/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_robot_world_hand_eye_shah/0","title":"OpenCV.cv_calib_robot_world_hand_eye_shah/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_same_focal_length/0","title":"OpenCV.cv_calib_same_focal_length/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_thin_prism_model/0","title":"OpenCV.cv_calib_thin_prism_model/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_tilted_model/0","title":"OpenCV.cv_calib_tilted_model/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_use_extrinsic_guess/0","title":"OpenCV.cv_calib_use_extrinsic_guess/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_use_intrinsic_guess/0","title":"OpenCV.cv_calib_use_intrinsic_guess/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_use_lu/0","title":"OpenCV.cv_calib_use_lu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_use_qr/0","title":"OpenCV.cv_calib_use_qr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_zero_disparity/0","title":"OpenCV.cv_calib_zero_disparity/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_calib_zero_tangent_dist/0","title":"OpenCV.cv_calib_zero_tangent_dist/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_android/0","title":"OpenCV.cv_cap_android/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_any/0","title":"OpenCV.cv_cap_any/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_aravis/0","title":"OpenCV.cv_cap_aravis/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_avfoundation/0","title":"OpenCV.cv_cap_avfoundation/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_cmu1394/0","title":"OpenCV.cv_cap_cmu1394/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_dc1394/0","title":"OpenCV.cv_cap_dc1394/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_dshow/0","title":"OpenCV.cv_cap_dshow/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_ffmpeg/0","title":"OpenCV.cv_cap_ffmpeg/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_fireware/0","title":"OpenCV.cv_cap_fireware/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_firewire/0","title":"OpenCV.cv_cap_firewire/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_giganetix/0","title":"OpenCV.cv_cap_giganetix/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_gphoto2/0","title":"OpenCV.cv_cap_gphoto2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_gstreamer/0","title":"OpenCV.cv_cap_gstreamer/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_ieee1394/0","title":"OpenCV.cv_cap_ieee1394/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_images/0","title":"OpenCV.cv_cap_images/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_intel_mfx/0","title":"OpenCV.cv_cap_intel_mfx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_intelperc/0","title":"OpenCV.cv_cap_intelperc/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_intelperc_depth_generator/0","title":"OpenCV.cv_cap_intelperc_depth_generator/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_intelperc_depth_map/0","title":"OpenCV.cv_cap_intelperc_depth_map/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_intelperc_generators_mask/0","title":"OpenCV.cv_cap_intelperc_generators_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_intelperc_image/0","title":"OpenCV.cv_cap_intelperc_image/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_intelperc_image_generator/0","title":"OpenCV.cv_cap_intelperc_image_generator/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_intelperc_ir_generator/0","title":"OpenCV.cv_cap_intelperc_ir_generator/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_intelperc_ir_map/0","title":"OpenCV.cv_cap_intelperc_ir_map/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_intelperc_uvdepth_map/0","title":"OpenCV.cv_cap_intelperc_uvdepth_map/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_msmf/0","title":"OpenCV.cv_cap_msmf/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_opencv_mjpeg/0","title":"OpenCV.cv_cap_opencv_mjpeg/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni/0","title":"OpenCV.cv_cap_openni/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni2/0","title":"OpenCV.cv_cap_openni2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni2_astra/0","title":"OpenCV.cv_cap_openni2_astra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni2_asus/0","title":"OpenCV.cv_cap_openni2_asus/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_asus/0","title":"OpenCV.cv_cap_openni_asus/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_bgr_image/0","title":"OpenCV.cv_cap_openni_bgr_image/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_depth_generator/0","title":"OpenCV.cv_cap_openni_depth_generator/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_depth_generator_baseline/0","title":"OpenCV.cv_cap_openni_depth_generator_baseline/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_depth_generator_focal_length/0","title":"OpenCV.cv_cap_openni_depth_generator_focal_length/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_depth_generator_present/0","title":"OpenCV.cv_cap_openni_depth_generator_present/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_depth_generator_registration/0","title":"OpenCV.cv_cap_openni_depth_generator_registration/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_depth_generator_registration_on/0","title":"OpenCV.cv_cap_openni_depth_generator_registration_on/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_depth_map/0","title":"OpenCV.cv_cap_openni_depth_map/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_disparity_map/0","title":"OpenCV.cv_cap_openni_disparity_map/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_disparity_map_32f/0","title":"OpenCV.cv_cap_openni_disparity_map_32f/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_generators_mask/0","title":"OpenCV.cv_cap_openni_generators_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_gray_image/0","title":"OpenCV.cv_cap_openni_gray_image/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_image_generator/0","title":"OpenCV.cv_cap_openni_image_generator/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_image_generator_output_mode/0","title":"OpenCV.cv_cap_openni_image_generator_output_mode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_image_generator_present/0","title":"OpenCV.cv_cap_openni_image_generator_present/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_ir_generator/0","title":"OpenCV.cv_cap_openni_ir_generator/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_ir_generator_present/0","title":"OpenCV.cv_cap_openni_ir_generator_present/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_ir_image/0","title":"OpenCV.cv_cap_openni_ir_image/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_point_cloud_map/0","title":"OpenCV.cv_cap_openni_point_cloud_map/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_qvga_30hz/0","title":"OpenCV.cv_cap_openni_qvga_30hz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_qvga_60hz/0","title":"OpenCV.cv_cap_openni_qvga_60hz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_sxga_15hz/0","title":"OpenCV.cv_cap_openni_sxga_15hz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_sxga_30hz/0","title":"OpenCV.cv_cap_openni_sxga_30hz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_valid_depth_mask/0","title":"OpenCV.cv_cap_openni_valid_depth_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_openni_vga_30hz/0","title":"OpenCV.cv_cap_openni_vga_30hz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_aperture/0","title":"OpenCV.cv_cap_prop_aperture/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_aravis_autotrigger/0","title":"OpenCV.cv_cap_prop_aravis_autotrigger/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_audio_base_index/0","title":"OpenCV.cv_cap_prop_audio_base_index/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_audio_data_depth/0","title":"OpenCV.cv_cap_prop_audio_data_depth/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_audio_pos/0","title":"OpenCV.cv_cap_prop_audio_pos/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_audio_samples_per_second/0","title":"OpenCV.cv_cap_prop_audio_samples_per_second/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_audio_shift_nsec/0","title":"OpenCV.cv_cap_prop_audio_shift_nsec/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_audio_stream/0","title":"OpenCV.cv_cap_prop_audio_stream/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_audio_synchronize/0","title":"OpenCV.cv_cap_prop_audio_synchronize/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_audio_total_channels/0","title":"OpenCV.cv_cap_prop_audio_total_channels/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_audio_total_streams/0","title":"OpenCV.cv_cap_prop_audio_total_streams/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_auto_exposure/0","title":"OpenCV.cv_cap_prop_auto_exposure/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_auto_wb/0","title":"OpenCV.cv_cap_prop_auto_wb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_autofocus/0","title":"OpenCV.cv_cap_prop_autofocus/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_backend/0","title":"OpenCV.cv_cap_prop_backend/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_backlight/0","title":"OpenCV.cv_cap_prop_backlight/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_bitrate/0","title":"OpenCV.cv_cap_prop_bitrate/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_brightness/0","title":"OpenCV.cv_cap_prop_brightness/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_buffersize/0","title":"OpenCV.cv_cap_prop_buffersize/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_channel/0","title":"OpenCV.cv_cap_prop_channel/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_codec_extradata_index/0","title":"OpenCV.cv_cap_prop_codec_extradata_index/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_codec_pixel_format/0","title":"OpenCV.cv_cap_prop_codec_pixel_format/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_contrast/0","title":"OpenCV.cv_cap_prop_contrast/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_convert_rgb/0","title":"OpenCV.cv_cap_prop_convert_rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_dc1394_max/0","title":"OpenCV.cv_cap_prop_dc1394_max/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_dc1394_mode_auto/0","title":"OpenCV.cv_cap_prop_dc1394_mode_auto/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_dc1394_mode_manual/0","title":"OpenCV.cv_cap_prop_dc1394_mode_manual/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_dc1394_mode_one_push_auto/0","title":"OpenCV.cv_cap_prop_dc1394_mode_one_push_auto/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_dc1394_off/0","title":"OpenCV.cv_cap_prop_dc1394_off/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_exposure/0","title":"OpenCV.cv_cap_prop_exposure/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_exposureprogram/0","title":"OpenCV.cv_cap_prop_exposureprogram/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_focus/0","title":"OpenCV.cv_cap_prop_focus/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_format/0","title":"OpenCV.cv_cap_prop_format/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_fourcc/0","title":"OpenCV.cv_cap_prop_fourcc/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_fps/0","title":"OpenCV.cv_cap_prop_fps/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_frame_count/0","title":"OpenCV.cv_cap_prop_frame_count/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_frame_height/0","title":"OpenCV.cv_cap_prop_frame_height/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_frame_width/0","title":"OpenCV.cv_cap_prop_frame_width/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_gain/0","title":"OpenCV.cv_cap_prop_gain/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_gamma/0","title":"OpenCV.cv_cap_prop_gamma/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_giga_frame_heigh_max/0","title":"OpenCV.cv_cap_prop_giga_frame_heigh_max/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_giga_frame_offset_x/0","title":"OpenCV.cv_cap_prop_giga_frame_offset_x/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_giga_frame_offset_y/0","title":"OpenCV.cv_cap_prop_giga_frame_offset_y/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_giga_frame_sens_heigh/0","title":"OpenCV.cv_cap_prop_giga_frame_sens_heigh/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_giga_frame_sens_width/0","title":"OpenCV.cv_cap_prop_giga_frame_sens_width/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_giga_frame_width_max/0","title":"OpenCV.cv_cap_prop_giga_frame_width_max/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_gphoto2_collect_msgs/0","title":"OpenCV.cv_cap_prop_gphoto2_collect_msgs/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_gphoto2_flush_msgs/0","title":"OpenCV.cv_cap_prop_gphoto2_flush_msgs/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_gphoto2_preview/0","title":"OpenCV.cv_cap_prop_gphoto2_preview/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_gphoto2_reload_config/0","title":"OpenCV.cv_cap_prop_gphoto2_reload_config/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_gphoto2_reload_on_change/0","title":"OpenCV.cv_cap_prop_gphoto2_reload_on_change/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_gphoto2_widget_enumerate/0","title":"OpenCV.cv_cap_prop_gphoto2_widget_enumerate/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_gstreamer_queue_length/0","title":"OpenCV.cv_cap_prop_gstreamer_queue_length/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_guid/0","title":"OpenCV.cv_cap_prop_guid/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_hue/0","title":"OpenCV.cv_cap_prop_hue/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_hw_acceleration/0","title":"OpenCV.cv_cap_prop_hw_acceleration/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_hw_acceleration_use_opencl/0","title":"OpenCV.cv_cap_prop_hw_acceleration_use_opencl/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_hw_device/0","title":"OpenCV.cv_cap_prop_hw_device/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_images_base/0","title":"OpenCV.cv_cap_prop_images_base/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_images_last/0","title":"OpenCV.cv_cap_prop_images_last/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_intelperc_depth_confidence_threshold/0","title":"OpenCV.cv_cap_prop_intelperc_depth_confidence_threshold/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_intelperc_depth_focal_length_horz/0","title":"OpenCV.cv_cap_prop_intelperc_depth_focal_length_horz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_intelperc_depth_focal_length_vert/0","title":"OpenCV.cv_cap_prop_intelperc_depth_focal_length_vert/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_intelperc_depth_low_confidence_value/0","title":"OpenCV.cv_cap_prop_intelperc_depth_low_confidence_value/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_intelperc_depth_saturation_value/0","title":"OpenCV.cv_cap_prop_intelperc_depth_saturation_value/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_intelperc_profile_count/0","title":"OpenCV.cv_cap_prop_intelperc_profile_count/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_intelperc_profile_idx/0","title":"OpenCV.cv_cap_prop_intelperc_profile_idx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_ios_device_exposure/0","title":"OpenCV.cv_cap_prop_ios_device_exposure/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_ios_device_flash/0","title":"OpenCV.cv_cap_prop_ios_device_flash/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_ios_device_focus/0","title":"OpenCV.cv_cap_prop_ios_device_focus/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_ios_device_torch/0","title":"OpenCV.cv_cap_prop_ios_device_torch/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_ios_device_whitebalance/0","title":"OpenCV.cv_cap_prop_ios_device_whitebalance/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_iris/0","title":"OpenCV.cv_cap_prop_iris/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_iso_speed/0","title":"OpenCV.cv_cap_prop_iso_speed/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_lrf_has_key_frame/0","title":"OpenCV.cv_cap_prop_lrf_has_key_frame/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_mode/0","title":"OpenCV.cv_cap_prop_mode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_monochrome/0","title":"OpenCV.cv_cap_prop_monochrome/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_open_timeout_msec/0","title":"OpenCV.cv_cap_prop_open_timeout_msec/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni2_mirror/0","title":"OpenCV.cv_cap_prop_openni2_mirror/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni2_sync/0","title":"OpenCV.cv_cap_prop_openni2_sync/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni_approx_frame_sync/0","title":"OpenCV.cv_cap_prop_openni_approx_frame_sync/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni_baseline/0","title":"OpenCV.cv_cap_prop_openni_baseline/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni_circle_buffer/0","title":"OpenCV.cv_cap_prop_openni_circle_buffer/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni_focal_length/0","title":"OpenCV.cv_cap_prop_openni_focal_length/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni_frame_max_depth/0","title":"OpenCV.cv_cap_prop_openni_frame_max_depth/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni_generator_present/0","title":"OpenCV.cv_cap_prop_openni_generator_present/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni_max_buffer_size/0","title":"OpenCV.cv_cap_prop_openni_max_buffer_size/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni_max_time_duration/0","title":"OpenCV.cv_cap_prop_openni_max_time_duration/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni_output_mode/0","title":"OpenCV.cv_cap_prop_openni_output_mode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni_registration/0","title":"OpenCV.cv_cap_prop_openni_registration/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_openni_registration_on/0","title":"OpenCV.cv_cap_prop_openni_registration_on/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_orientation_auto/0","title":"OpenCV.cv_cap_prop_orientation_auto/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_orientation_meta/0","title":"OpenCV.cv_cap_prop_orientation_meta/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_pan/0","title":"OpenCV.cv_cap_prop_pan/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_pos_avi_ratio/0","title":"OpenCV.cv_cap_prop_pos_avi_ratio/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_pos_frames/0","title":"OpenCV.cv_cap_prop_pos_frames/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_pos_msec/0","title":"OpenCV.cv_cap_prop_pos_msec/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_pvapi_binningx/0","title":"OpenCV.cv_cap_prop_pvapi_binningx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_pvapi_binningy/0","title":"OpenCV.cv_cap_prop_pvapi_binningy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_pvapi_decimationhorizontal/0","title":"OpenCV.cv_cap_prop_pvapi_decimationhorizontal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_pvapi_decimationvertical/0","title":"OpenCV.cv_cap_prop_pvapi_decimationvertical/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_pvapi_framestarttriggermode/0","title":"OpenCV.cv_cap_prop_pvapi_framestarttriggermode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_pvapi_multicastip/0","title":"OpenCV.cv_cap_prop_pvapi_multicastip/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_pvapi_pixelformat/0","title":"OpenCV.cv_cap_prop_pvapi_pixelformat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_read_timeout_msec/0","title":"OpenCV.cv_cap_prop_read_timeout_msec/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_rectification/0","title":"OpenCV.cv_cap_prop_rectification/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_roll/0","title":"OpenCV.cv_cap_prop_roll/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_sar_den/0","title":"OpenCV.cv_cap_prop_sar_den/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_sar_num/0","title":"OpenCV.cv_cap_prop_sar_num/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_saturation/0","title":"OpenCV.cv_cap_prop_saturation/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_settings/0","title":"OpenCV.cv_cap_prop_settings/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_sharpness/0","title":"OpenCV.cv_cap_prop_sharpness/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_speed/0","title":"OpenCV.cv_cap_prop_speed/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_stream_open_time_usec/0","title":"OpenCV.cv_cap_prop_stream_open_time_usec/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_temperature/0","title":"OpenCV.cv_cap_prop_temperature/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_tilt/0","title":"OpenCV.cv_cap_prop_tilt/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_trigger/0","title":"OpenCV.cv_cap_prop_trigger/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_trigger_delay/0","title":"OpenCV.cv_cap_prop_trigger_delay/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_video_stream/0","title":"OpenCV.cv_cap_prop_video_stream/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_video_total_channels/0","title":"OpenCV.cv_cap_prop_video_total_channels/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_viewfinder/0","title":"OpenCV.cv_cap_prop_viewfinder/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_wb_temperature/0","title":"OpenCV.cv_cap_prop_wb_temperature/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_white_balance_blue_u/0","title":"OpenCV.cv_cap_prop_white_balance_blue_u/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_white_balance_red_v/0","title":"OpenCV.cv_cap_prop_white_balance_red_v/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_acq_buffer_size/0","title":"OpenCV.cv_cap_prop_xi_acq_buffer_size/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_acq_buffer_size_unit/0","title":"OpenCV.cv_cap_prop_xi_acq_buffer_size_unit/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_acq_frame_burst_count/0","title":"OpenCV.cv_cap_prop_xi_acq_frame_burst_count/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_acq_timing_mode/0","title":"OpenCV.cv_cap_prop_xi_acq_timing_mode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_acq_transport_buffer_commit/0","title":"OpenCV.cv_cap_prop_xi_acq_transport_buffer_commit/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_acq_transport_buffer_size/0","title":"OpenCV.cv_cap_prop_xi_acq_transport_buffer_size/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_ae_max_limit/0","title":"OpenCV.cv_cap_prop_xi_ae_max_limit/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_aeag/0","title":"OpenCV.cv_cap_prop_xi_aeag/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_aeag_level/0","title":"OpenCV.cv_cap_prop_xi_aeag_level/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_aeag_roi_height/0","title":"OpenCV.cv_cap_prop_xi_aeag_roi_height/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_aeag_roi_offset_x/0","title":"OpenCV.cv_cap_prop_xi_aeag_roi_offset_x/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_aeag_roi_offset_y/0","title":"OpenCV.cv_cap_prop_xi_aeag_roi_offset_y/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_aeag_roi_width/0","title":"OpenCV.cv_cap_prop_xi_aeag_roi_width/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_ag_max_limit/0","title":"OpenCV.cv_cap_prop_xi_ag_max_limit/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_apply_cms/0","title":"OpenCV.cv_cap_prop_xi_apply_cms/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_auto_bandwidth_calculation/0","title":"OpenCV.cv_cap_prop_xi_auto_bandwidth_calculation/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_auto_wb/0","title":"OpenCV.cv_cap_prop_xi_auto_wb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_available_bandwidth/0","title":"OpenCV.cv_cap_prop_xi_available_bandwidth/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_binning_horizontal/0","title":"OpenCV.cv_cap_prop_xi_binning_horizontal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_binning_pattern/0","title":"OpenCV.cv_cap_prop_xi_binning_pattern/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_binning_selector/0","title":"OpenCV.cv_cap_prop_xi_binning_selector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_binning_vertical/0","title":"OpenCV.cv_cap_prop_xi_binning_vertical/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_bpc/0","title":"OpenCV.cv_cap_prop_xi_bpc/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_buffer_policy/0","title":"OpenCV.cv_cap_prop_xi_buffer_policy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_buffers_queue_size/0","title":"OpenCV.cv_cap_prop_xi_buffers_queue_size/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_00/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_00/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_01/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_01/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_02/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_02/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_03/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_03/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_10/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_10/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_11/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_11/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_12/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_13/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_13/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_20/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_20/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_21/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_21/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_22/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_22/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_23/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_23/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_30/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_30/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_31/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_31/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_32/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_32/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cc_matrix_33/0","title":"OpenCV.cv_cap_prop_xi_cc_matrix_33/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_chip_temp/0","title":"OpenCV.cv_cap_prop_xi_chip_temp/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cms/0","title":"OpenCV.cv_cap_prop_xi_cms/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_color_filter_array/0","title":"OpenCV.cv_cap_prop_xi_color_filter_array/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_column_fpn_correction/0","title":"OpenCV.cv_cap_prop_xi_column_fpn_correction/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_cooling/0","title":"OpenCV.cv_cap_prop_xi_cooling/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_counter_selector/0","title":"OpenCV.cv_cap_prop_xi_counter_selector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_counter_value/0","title":"OpenCV.cv_cap_prop_xi_counter_value/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_data_format/0","title":"OpenCV.cv_cap_prop_xi_data_format/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_debounce_en/0","title":"OpenCV.cv_cap_prop_xi_debounce_en/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_debounce_pol/0","title":"OpenCV.cv_cap_prop_xi_debounce_pol/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_debounce_t0/0","title":"OpenCV.cv_cap_prop_xi_debounce_t0/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_debounce_t1/0","title":"OpenCV.cv_cap_prop_xi_debounce_t1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_debug_level/0","title":"OpenCV.cv_cap_prop_xi_debug_level/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_decimation_horizontal/0","title":"OpenCV.cv_cap_prop_xi_decimation_horizontal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_decimation_pattern/0","title":"OpenCV.cv_cap_prop_xi_decimation_pattern/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_decimation_selector/0","title":"OpenCV.cv_cap_prop_xi_decimation_selector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_decimation_vertical/0","title":"OpenCV.cv_cap_prop_xi_decimation_vertical/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_default_cc_matrix/0","title":"OpenCV.cv_cap_prop_xi_default_cc_matrix/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_device_model_id/0","title":"OpenCV.cv_cap_prop_xi_device_model_id/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_device_reset/0","title":"OpenCV.cv_cap_prop_xi_device_reset/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_device_sn/0","title":"OpenCV.cv_cap_prop_xi_device_sn/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_downsampling/0","title":"OpenCV.cv_cap_prop_xi_downsampling/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_downsampling_type/0","title":"OpenCV.cv_cap_prop_xi_downsampling_type/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_exp_priority/0","title":"OpenCV.cv_cap_prop_xi_exp_priority/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_exposure/0","title":"OpenCV.cv_cap_prop_xi_exposure/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_exposure_burst_count/0","title":"OpenCV.cv_cap_prop_xi_exposure_burst_count/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_ffs_access_key/0","title":"OpenCV.cv_cap_prop_xi_ffs_access_key/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_ffs_file_id/0","title":"OpenCV.cv_cap_prop_xi_ffs_file_id/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_ffs_file_size/0","title":"OpenCV.cv_cap_prop_xi_ffs_file_size/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_framerate/0","title":"OpenCV.cv_cap_prop_xi_framerate/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_free_ffs_size/0","title":"OpenCV.cv_cap_prop_xi_free_ffs_size/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_gain/0","title":"OpenCV.cv_cap_prop_xi_gain/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_gain_selector/0","title":"OpenCV.cv_cap_prop_xi_gain_selector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_gammac/0","title":"OpenCV.cv_cap_prop_xi_gammac/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_gammay/0","title":"OpenCV.cv_cap_prop_xi_gammay/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_gpi_level/0","title":"OpenCV.cv_cap_prop_xi_gpi_level/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_gpi_mode/0","title":"OpenCV.cv_cap_prop_xi_gpi_mode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_gpi_selector/0","title":"OpenCV.cv_cap_prop_xi_gpi_selector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_gpo_mode/0","title":"OpenCV.cv_cap_prop_xi_gpo_mode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_gpo_selector/0","title":"OpenCV.cv_cap_prop_xi_gpo_selector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_hdr/0","title":"OpenCV.cv_cap_prop_xi_hdr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_hdr_kneepoint_count/0","title":"OpenCV.cv_cap_prop_xi_hdr_kneepoint_count/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_hdr_t1/0","title":"OpenCV.cv_cap_prop_xi_hdr_t1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_hdr_t2/0","title":"OpenCV.cv_cap_prop_xi_hdr_t2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_height/0","title":"OpenCV.cv_cap_prop_xi_height/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_hous_back_side_temp/0","title":"OpenCV.cv_cap_prop_xi_hous_back_side_temp/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_hous_temp/0","title":"OpenCV.cv_cap_prop_xi_hous_temp/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_hw_revision/0","title":"OpenCV.cv_cap_prop_xi_hw_revision/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_image_black_level/0","title":"OpenCV.cv_cap_prop_xi_image_black_level/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_image_data_bit_depth/0","title":"OpenCV.cv_cap_prop_xi_image_data_bit_depth/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_image_data_format/0","title":"OpenCV.cv_cap_prop_xi_image_data_format/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_image_data_format_rgb32_alpha/0","title":"OpenCV.cv_cap_prop_xi_image_data_format_rgb32_alpha/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_image_is_color/0","title":"OpenCV.cv_cap_prop_xi_image_is_color/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_image_payload_size/0","title":"OpenCV.cv_cap_prop_xi_image_payload_size/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_is_cooled/0","title":"OpenCV.cv_cap_prop_xi_is_cooled/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_is_device_exist/0","title":"OpenCV.cv_cap_prop_xi_is_device_exist/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_kneepoint1/0","title":"OpenCV.cv_cap_prop_xi_kneepoint1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_kneepoint2/0","title":"OpenCV.cv_cap_prop_xi_kneepoint2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_led_mode/0","title":"OpenCV.cv_cap_prop_xi_led_mode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_led_selector/0","title":"OpenCV.cv_cap_prop_xi_led_selector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_lens_aperture_value/0","title":"OpenCV.cv_cap_prop_xi_lens_aperture_value/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_lens_feature/0","title":"OpenCV.cv_cap_prop_xi_lens_feature/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_lens_feature_selector/0","title":"OpenCV.cv_cap_prop_xi_lens_feature_selector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_lens_focal_length/0","title":"OpenCV.cv_cap_prop_xi_lens_focal_length/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_lens_focus_distance/0","title":"OpenCV.cv_cap_prop_xi_lens_focus_distance/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_lens_focus_move/0","title":"OpenCV.cv_cap_prop_xi_lens_focus_move/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_lens_focus_movement_value/0","title":"OpenCV.cv_cap_prop_xi_lens_focus_movement_value/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_lens_mode/0","title":"OpenCV.cv_cap_prop_xi_lens_mode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_limit_bandwidth/0","title":"OpenCV.cv_cap_prop_xi_limit_bandwidth/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_lut_en/0","title":"OpenCV.cv_cap_prop_xi_lut_en/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_lut_index/0","title":"OpenCV.cv_cap_prop_xi_lut_index/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_lut_value/0","title":"OpenCV.cv_cap_prop_xi_lut_value/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_manual_wb/0","title":"OpenCV.cv_cap_prop_xi_manual_wb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_offset_x/0","title":"OpenCV.cv_cap_prop_xi_offset_x/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_offset_y/0","title":"OpenCV.cv_cap_prop_xi_offset_y/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_output_data_bit_depth/0","title":"OpenCV.cv_cap_prop_xi_output_data_bit_depth/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_output_data_packing/0","title":"OpenCV.cv_cap_prop_xi_output_data_packing/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_output_data_packing_type/0","title":"OpenCV.cv_cap_prop_xi_output_data_packing_type/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_recent_frame/0","title":"OpenCV.cv_cap_prop_xi_recent_frame/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_region_mode/0","title":"OpenCV.cv_cap_prop_xi_region_mode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_region_selector/0","title":"OpenCV.cv_cap_prop_xi_region_selector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_row_fpn_correction/0","title":"OpenCV.cv_cap_prop_xi_row_fpn_correction/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_sensor_board_temp/0","title":"OpenCV.cv_cap_prop_xi_sensor_board_temp/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_sensor_clock_freq_hz/0","title":"OpenCV.cv_cap_prop_xi_sensor_clock_freq_hz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_sensor_clock_freq_index/0","title":"OpenCV.cv_cap_prop_xi_sensor_clock_freq_index/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_sensor_data_bit_depth/0","title":"OpenCV.cv_cap_prop_xi_sensor_data_bit_depth/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_sensor_feature_selector/0","title":"OpenCV.cv_cap_prop_xi_sensor_feature_selector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_sensor_feature_value/0","title":"OpenCV.cv_cap_prop_xi_sensor_feature_value/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_sensor_mode/0","title":"OpenCV.cv_cap_prop_xi_sensor_mode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_sensor_output_channel_count/0","title":"OpenCV.cv_cap_prop_xi_sensor_output_channel_count/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_sensor_taps/0","title":"OpenCV.cv_cap_prop_xi_sensor_taps/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_sharpness/0","title":"OpenCV.cv_cap_prop_xi_sharpness/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_shutter_type/0","title":"OpenCV.cv_cap_prop_xi_shutter_type/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_target_temp/0","title":"OpenCV.cv_cap_prop_xi_target_temp/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_test_pattern/0","title":"OpenCV.cv_cap_prop_xi_test_pattern/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_test_pattern_generator_selector/0","title":"OpenCV.cv_cap_prop_xi_test_pattern_generator_selector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_timeout/0","title":"OpenCV.cv_cap_prop_xi_timeout/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_transport_pixel_format/0","title":"OpenCV.cv_cap_prop_xi_transport_pixel_format/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_trg_delay/0","title":"OpenCV.cv_cap_prop_xi_trg_delay/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_trg_selector/0","title":"OpenCV.cv_cap_prop_xi_trg_selector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_trg_software/0","title":"OpenCV.cv_cap_prop_xi_trg_software/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_trg_source/0","title":"OpenCV.cv_cap_prop_xi_trg_source/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_ts_rst_mode/0","title":"OpenCV.cv_cap_prop_xi_ts_rst_mode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_ts_rst_source/0","title":"OpenCV.cv_cap_prop_xi_ts_rst_source/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_used_ffs_size/0","title":"OpenCV.cv_cap_prop_xi_used_ffs_size/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_wb_kb/0","title":"OpenCV.cv_cap_prop_xi_wb_kb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_wb_kg/0","title":"OpenCV.cv_cap_prop_xi_wb_kg/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_wb_kr/0","title":"OpenCV.cv_cap_prop_xi_wb_kr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_xi_width/0","title":"OpenCV.cv_cap_prop_xi_width/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_prop_zoom/0","title":"OpenCV.cv_cap_prop_zoom/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi/0","title":"OpenCV.cv_cap_pvapi/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_decimation_2outof16/0","title":"OpenCV.cv_cap_pvapi_decimation_2outof16/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_decimation_2outof4/0","title":"OpenCV.cv_cap_pvapi_decimation_2outof4/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_decimation_2outof8/0","title":"OpenCV.cv_cap_pvapi_decimation_2outof8/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_decimation_off/0","title":"OpenCV.cv_cap_pvapi_decimation_off/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_fstrigmode_fixedrate/0","title":"OpenCV.cv_cap_pvapi_fstrigmode_fixedrate/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_fstrigmode_freerun/0","title":"OpenCV.cv_cap_pvapi_fstrigmode_freerun/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_fstrigmode_software/0","title":"OpenCV.cv_cap_pvapi_fstrigmode_software/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_fstrigmode_syncin1/0","title":"OpenCV.cv_cap_pvapi_fstrigmode_syncin1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_fstrigmode_syncin2/0","title":"OpenCV.cv_cap_pvapi_fstrigmode_syncin2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_pixelformat_bayer16/0","title":"OpenCV.cv_cap_pvapi_pixelformat_bayer16/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_pixelformat_bayer8/0","title":"OpenCV.cv_cap_pvapi_pixelformat_bayer8/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_pixelformat_bgr24/0","title":"OpenCV.cv_cap_pvapi_pixelformat_bgr24/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_pixelformat_bgra32/0","title":"OpenCV.cv_cap_pvapi_pixelformat_bgra32/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_pixelformat_mono16/0","title":"OpenCV.cv_cap_pvapi_pixelformat_mono16/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_pixelformat_mono8/0","title":"OpenCV.cv_cap_pvapi_pixelformat_mono8/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_pixelformat_rgb24/0","title":"OpenCV.cv_cap_pvapi_pixelformat_rgb24/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_pvapi_pixelformat_rgba32/0","title":"OpenCV.cv_cap_pvapi_pixelformat_rgba32/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_qt/0","title":"OpenCV.cv_cap_qt/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_realsense/0","title":"OpenCV.cv_cap_realsense/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_ueye/0","title":"OpenCV.cv_cap_ueye/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_unicap/0","title":"OpenCV.cv_cap_unicap/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_v4l/0","title":"OpenCV.cv_cap_v4l/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_v4l2/0","title":"OpenCV.cv_cap_v4l2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_vfw/0","title":"OpenCV.cv_cap_vfw/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_winrt/0","title":"OpenCV.cv_cap_winrt/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_xiapi/0","title":"OpenCV.cv_cap_xiapi/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cap_xine/0","title":"OpenCV.cv_cap_xine/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cascade_do_canny_pruning/0","title":"OpenCV.cv_cascade_do_canny_pruning/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cascade_do_rough_search/0","title":"OpenCV.cv_cascade_do_rough_search/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cascade_find_biggest_object/0","title":"OpenCV.cv_cascade_find_biggest_object/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cascade_scale_image/0","title":"OpenCV.cv_cascade_scale_image/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cc_stat_area/0","title":"OpenCV.cv_cc_stat_area/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cc_stat_height/0","title":"OpenCV.cv_cc_stat_height/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cc_stat_left/0","title":"OpenCV.cv_cc_stat_left/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cc_stat_max/0","title":"OpenCV.cv_cc_stat_max/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cc_stat_top/0","title":"OpenCV.cv_cc_stat_top/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cc_stat_width/0","title":"OpenCV.cv_cc_stat_width/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ccl_bbdt/0","title":"OpenCV.cv_ccl_bbdt/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ccl_bolelli/0","title":"OpenCV.cv_ccl_bolelli/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ccl_default/0","title":"OpenCV.cv_ccl_default/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ccl_grana/0","title":"OpenCV.cv_ccl_grana/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ccl_sauf/0","title":"OpenCV.cv_ccl_sauf/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ccl_spaghetti/0","title":"OpenCV.cv_ccl_spaghetti/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ccl_wu/0","title":"OpenCV.cv_ccl_wu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_chain_approx_none/0","title":"OpenCV.cv_chain_approx_none/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_chain_approx_simple/0","title":"OpenCV.cv_chain_approx_simple/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_chain_approx_tc89_kcos/0","title":"OpenCV.cv_chain_approx_tc89_kcos/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_chain_approx_tc89_l1/0","title":"OpenCV.cv_chain_approx_tc89_l1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_channels/0","title":"OpenCV.cv_channels/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_channels_blocks/0","title":"OpenCV.cv_channels_blocks/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_chi2/0","title":"OpenCV.cv_chi2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cmp_eq/0","title":"OpenCV.cv_cmp_eq/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cmp_ge/0","title":"OpenCV.cv_cmp_ge/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cmp_gt/0","title":"OpenCV.cv_cmp_gt/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cmp_le/0","title":"OpenCV.cv_cmp_le/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cmp_lt/0","title":"OpenCV.cv_cmp_lt/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cmp_ne/0","title":"OpenCV.cv_cmp_ne/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_coef/0","title":"OpenCV.cv_coef/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_col_sample/0","title":"OpenCV.cv_col_sample/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color/0","title":"OpenCV.cv_color/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbg2bgr/0","title":"OpenCV.cv_color_bayerbg2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbg2bgr_ea/0","title":"OpenCV.cv_color_bayerbg2bgr_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbg2bgr_vng/0","title":"OpenCV.cv_color_bayerbg2bgr_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbg2bgra/0","title":"OpenCV.cv_color_bayerbg2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbg2gray/0","title":"OpenCV.cv_color_bayerbg2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbg2rgb/0","title":"OpenCV.cv_color_bayerbg2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbg2rgb_ea/0","title":"OpenCV.cv_color_bayerbg2rgb_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbg2rgb_vng/0","title":"OpenCV.cv_color_bayerbg2rgb_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbg2rgba/0","title":"OpenCV.cv_color_bayerbg2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbggr2bgr/0","title":"OpenCV.cv_color_bayerbggr2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbggr2bgr_ea/0","title":"OpenCV.cv_color_bayerbggr2bgr_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbggr2bgr_vng/0","title":"OpenCV.cv_color_bayerbggr2bgr_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbggr2bgra/0","title":"OpenCV.cv_color_bayerbggr2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbggr2gray/0","title":"OpenCV.cv_color_bayerbggr2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbggr2rgb/0","title":"OpenCV.cv_color_bayerbggr2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbggr2rgb_ea/0","title":"OpenCV.cv_color_bayerbggr2rgb_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbggr2rgb_vng/0","title":"OpenCV.cv_color_bayerbggr2rgb_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerbggr2rgba/0","title":"OpenCV.cv_color_bayerbggr2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergb2bgr/0","title":"OpenCV.cv_color_bayergb2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergb2bgr_ea/0","title":"OpenCV.cv_color_bayergb2bgr_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergb2bgr_vng/0","title":"OpenCV.cv_color_bayergb2bgr_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergb2bgra/0","title":"OpenCV.cv_color_bayergb2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergb2gray/0","title":"OpenCV.cv_color_bayergb2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergb2rgb/0","title":"OpenCV.cv_color_bayergb2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergb2rgb_ea/0","title":"OpenCV.cv_color_bayergb2rgb_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergb2rgb_vng/0","title":"OpenCV.cv_color_bayergb2rgb_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergb2rgba/0","title":"OpenCV.cv_color_bayergb2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergbrg2bgr/0","title":"OpenCV.cv_color_bayergbrg2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergbrg2bgr_ea/0","title":"OpenCV.cv_color_bayergbrg2bgr_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergbrg2bgr_vng/0","title":"OpenCV.cv_color_bayergbrg2bgr_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergbrg2bgra/0","title":"OpenCV.cv_color_bayergbrg2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergbrg2gray/0","title":"OpenCV.cv_color_bayergbrg2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergbrg2rgb/0","title":"OpenCV.cv_color_bayergbrg2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergbrg2rgb_ea/0","title":"OpenCV.cv_color_bayergbrg2rgb_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergbrg2rgb_vng/0","title":"OpenCV.cv_color_bayergbrg2rgb_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergbrg2rgba/0","title":"OpenCV.cv_color_bayergbrg2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergr2bgr/0","title":"OpenCV.cv_color_bayergr2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergr2bgr_ea/0","title":"OpenCV.cv_color_bayergr2bgr_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergr2bgr_vng/0","title":"OpenCV.cv_color_bayergr2bgr_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergr2bgra/0","title":"OpenCV.cv_color_bayergr2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergr2gray/0","title":"OpenCV.cv_color_bayergr2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergr2rgb/0","title":"OpenCV.cv_color_bayergr2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergr2rgb_ea/0","title":"OpenCV.cv_color_bayergr2rgb_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergr2rgb_vng/0","title":"OpenCV.cv_color_bayergr2rgb_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergr2rgba/0","title":"OpenCV.cv_color_bayergr2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergrbg2bgr/0","title":"OpenCV.cv_color_bayergrbg2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergrbg2bgr_ea/0","title":"OpenCV.cv_color_bayergrbg2bgr_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergrbg2bgr_vng/0","title":"OpenCV.cv_color_bayergrbg2bgr_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergrbg2bgra/0","title":"OpenCV.cv_color_bayergrbg2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergrbg2gray/0","title":"OpenCV.cv_color_bayergrbg2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergrbg2rgb/0","title":"OpenCV.cv_color_bayergrbg2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergrbg2rgb_ea/0","title":"OpenCV.cv_color_bayergrbg2rgb_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergrbg2rgb_vng/0","title":"OpenCV.cv_color_bayergrbg2rgb_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayergrbg2rgba/0","title":"OpenCV.cv_color_bayergrbg2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrg2bgr/0","title":"OpenCV.cv_color_bayerrg2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrg2bgr_ea/0","title":"OpenCV.cv_color_bayerrg2bgr_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrg2bgr_vng/0","title":"OpenCV.cv_color_bayerrg2bgr_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrg2bgra/0","title":"OpenCV.cv_color_bayerrg2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrg2gray/0","title":"OpenCV.cv_color_bayerrg2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrg2rgb/0","title":"OpenCV.cv_color_bayerrg2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrg2rgb_ea/0","title":"OpenCV.cv_color_bayerrg2rgb_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrg2rgb_vng/0","title":"OpenCV.cv_color_bayerrg2rgb_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrg2rgba/0","title":"OpenCV.cv_color_bayerrg2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrggb2bgr/0","title":"OpenCV.cv_color_bayerrggb2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrggb2bgr_ea/0","title":"OpenCV.cv_color_bayerrggb2bgr_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrggb2bgr_vng/0","title":"OpenCV.cv_color_bayerrggb2bgr_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrggb2bgra/0","title":"OpenCV.cv_color_bayerrggb2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrggb2gray/0","title":"OpenCV.cv_color_bayerrggb2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrggb2rgb/0","title":"OpenCV.cv_color_bayerrggb2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrggb2rgb_ea/0","title":"OpenCV.cv_color_bayerrggb2rgb_ea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrggb2rgb_vng/0","title":"OpenCV.cv_color_bayerrggb2rgb_vng/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bayerrggb2rgba/0","title":"OpenCV.cv_color_bayerrggb2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2bgr555/0","title":"OpenCV.cv_color_bgr2bgr555/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2bgr565/0","title":"OpenCV.cv_color_bgr2bgr565/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2bgra/0","title":"OpenCV.cv_color_bgr2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2gray/0","title":"OpenCV.cv_color_bgr2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2hls/0","title":"OpenCV.cv_color_bgr2hls/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2hls_full/0","title":"OpenCV.cv_color_bgr2hls_full/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2hsv/0","title":"OpenCV.cv_color_bgr2hsv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2hsv_full/0","title":"OpenCV.cv_color_bgr2hsv_full/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2lab/0","title":"OpenCV.cv_color_bgr2lab/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2luv/0","title":"OpenCV.cv_color_bgr2luv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2rgb/0","title":"OpenCV.cv_color_bgr2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2rgba/0","title":"OpenCV.cv_color_bgr2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2xyz/0","title":"OpenCV.cv_color_bgr2xyz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2ycrcb/0","title":"OpenCV.cv_color_bgr2ycrcb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2yuv/0","title":"OpenCV.cv_color_bgr2yuv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2yuv_i420/0","title":"OpenCV.cv_color_bgr2yuv_i420/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2yuv_iyuv/0","title":"OpenCV.cv_color_bgr2yuv_iyuv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr2yuv_yv12/0","title":"OpenCV.cv_color_bgr2yuv_yv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr5552bgr/0","title":"OpenCV.cv_color_bgr5552bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr5552bgra/0","title":"OpenCV.cv_color_bgr5552bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr5552gray/0","title":"OpenCV.cv_color_bgr5552gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr5552rgb/0","title":"OpenCV.cv_color_bgr5552rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr5552rgba/0","title":"OpenCV.cv_color_bgr5552rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr5652bgr/0","title":"OpenCV.cv_color_bgr5652bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr5652bgra/0","title":"OpenCV.cv_color_bgr5652bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr5652gray/0","title":"OpenCV.cv_color_bgr5652gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr5652rgb/0","title":"OpenCV.cv_color_bgr5652rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgr5652rgba/0","title":"OpenCV.cv_color_bgr5652rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgra2bgr/0","title":"OpenCV.cv_color_bgra2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgra2bgr555/0","title":"OpenCV.cv_color_bgra2bgr555/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgra2bgr565/0","title":"OpenCV.cv_color_bgra2bgr565/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgra2gray/0","title":"OpenCV.cv_color_bgra2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgra2rgb/0","title":"OpenCV.cv_color_bgra2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgra2rgba/0","title":"OpenCV.cv_color_bgra2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgra2yuv_i420/0","title":"OpenCV.cv_color_bgra2yuv_i420/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgra2yuv_iyuv/0","title":"OpenCV.cv_color_bgra2yuv_iyuv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_bgra2yuv_yv12/0","title":"OpenCV.cv_color_bgra2yuv_yv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_colorcvt_max/0","title":"OpenCV.cv_color_colorcvt_max/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_grad/0","title":"OpenCV.cv_color_grad/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_gray2bgr/0","title":"OpenCV.cv_color_gray2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_gray2bgr555/0","title":"OpenCV.cv_color_gray2bgr555/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_gray2bgr565/0","title":"OpenCV.cv_color_gray2bgr565/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_gray2bgra/0","title":"OpenCV.cv_color_gray2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_gray2rgb/0","title":"OpenCV.cv_color_gray2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_gray2rgba/0","title":"OpenCV.cv_color_gray2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_hls2bgr/0","title":"OpenCV.cv_color_hls2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_hls2bgr_full/0","title":"OpenCV.cv_color_hls2bgr_full/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_hls2rgb/0","title":"OpenCV.cv_color_hls2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_hls2rgb_full/0","title":"OpenCV.cv_color_hls2rgb_full/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_hsv2bgr/0","title":"OpenCV.cv_color_hsv2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_hsv2bgr_full/0","title":"OpenCV.cv_color_hsv2bgr_full/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_hsv2rgb/0","title":"OpenCV.cv_color_hsv2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_hsv2rgb_full/0","title":"OpenCV.cv_color_hsv2rgb_full/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_lab2bgr/0","title":"OpenCV.cv_color_lab2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_lab2lbgr/0","title":"OpenCV.cv_color_lab2lbgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_lab2lrgb/0","title":"OpenCV.cv_color_lab2lrgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_lab2rgb/0","title":"OpenCV.cv_color_lab2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_lbgr2lab/0","title":"OpenCV.cv_color_lbgr2lab/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_lbgr2luv/0","title":"OpenCV.cv_color_lbgr2luv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_lrgb2lab/0","title":"OpenCV.cv_color_lrgb2lab/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_lrgb2luv/0","title":"OpenCV.cv_color_lrgb2luv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_luv2bgr/0","title":"OpenCV.cv_color_luv2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_luv2lbgr/0","title":"OpenCV.cv_color_luv2lbgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_luv2lrgb/0","title":"OpenCV.cv_color_luv2lrgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_luv2rgb/0","title":"OpenCV.cv_color_luv2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_mrgba2rgba/0","title":"OpenCV.cv_color_mrgba2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2bgr/0","title":"OpenCV.cv_color_rgb2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2bgr555/0","title":"OpenCV.cv_color_rgb2bgr555/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2bgr565/0","title":"OpenCV.cv_color_rgb2bgr565/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2bgra/0","title":"OpenCV.cv_color_rgb2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2gray/0","title":"OpenCV.cv_color_rgb2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2hls/0","title":"OpenCV.cv_color_rgb2hls/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2hls_full/0","title":"OpenCV.cv_color_rgb2hls_full/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2hsv/0","title":"OpenCV.cv_color_rgb2hsv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2hsv_full/0","title":"OpenCV.cv_color_rgb2hsv_full/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2lab/0","title":"OpenCV.cv_color_rgb2lab/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2luv/0","title":"OpenCV.cv_color_rgb2luv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2rgba/0","title":"OpenCV.cv_color_rgb2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2xyz/0","title":"OpenCV.cv_color_rgb2xyz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2ycrcb/0","title":"OpenCV.cv_color_rgb2ycrcb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2yuv/0","title":"OpenCV.cv_color_rgb2yuv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2yuv_i420/0","title":"OpenCV.cv_color_rgb2yuv_i420/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2yuv_iyuv/0","title":"OpenCV.cv_color_rgb2yuv_iyuv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgb2yuv_yv12/0","title":"OpenCV.cv_color_rgb2yuv_yv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgba2bgr/0","title":"OpenCV.cv_color_rgba2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgba2bgr555/0","title":"OpenCV.cv_color_rgba2bgr555/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgba2bgr565/0","title":"OpenCV.cv_color_rgba2bgr565/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgba2bgra/0","title":"OpenCV.cv_color_rgba2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgba2gray/0","title":"OpenCV.cv_color_rgba2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgba2mrgba/0","title":"OpenCV.cv_color_rgba2mrgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgba2rgb/0","title":"OpenCV.cv_color_rgba2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgba2yuv_i420/0","title":"OpenCV.cv_color_rgba2yuv_i420/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgba2yuv_iyuv/0","title":"OpenCV.cv_color_rgba2yuv_iyuv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_rgba2yuv_yv12/0","title":"OpenCV.cv_color_rgba2yuv_yv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_xyz2bgr/0","title":"OpenCV.cv_color_xyz2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_xyz2rgb/0","title":"OpenCV.cv_color_xyz2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_ycrcb2bgr/0","title":"OpenCV.cv_color_ycrcb2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_ycrcb2rgb/0","title":"OpenCV.cv_color_ycrcb2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr/0","title":"OpenCV.cv_color_yuv2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr_i420/0","title":"OpenCV.cv_color_yuv2bgr_i420/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr_iyuv/0","title":"OpenCV.cv_color_yuv2bgr_iyuv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr_nv12/0","title":"OpenCV.cv_color_yuv2bgr_nv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr_nv21/0","title":"OpenCV.cv_color_yuv2bgr_nv21/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr_uynv/0","title":"OpenCV.cv_color_yuv2bgr_uynv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr_uyvy/0","title":"OpenCV.cv_color_yuv2bgr_uyvy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr_y422/0","title":"OpenCV.cv_color_yuv2bgr_y422/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr_yunv/0","title":"OpenCV.cv_color_yuv2bgr_yunv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr_yuy2/0","title":"OpenCV.cv_color_yuv2bgr_yuy2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr_yuyv/0","title":"OpenCV.cv_color_yuv2bgr_yuyv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr_yv12/0","title":"OpenCV.cv_color_yuv2bgr_yv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgr_yvyu/0","title":"OpenCV.cv_color_yuv2bgr_yvyu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgra_i420/0","title":"OpenCV.cv_color_yuv2bgra_i420/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgra_iyuv/0","title":"OpenCV.cv_color_yuv2bgra_iyuv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgra_nv12/0","title":"OpenCV.cv_color_yuv2bgra_nv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgra_nv21/0","title":"OpenCV.cv_color_yuv2bgra_nv21/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgra_uynv/0","title":"OpenCV.cv_color_yuv2bgra_uynv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgra_uyvy/0","title":"OpenCV.cv_color_yuv2bgra_uyvy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgra_y422/0","title":"OpenCV.cv_color_yuv2bgra_y422/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgra_yunv/0","title":"OpenCV.cv_color_yuv2bgra_yunv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgra_yuy2/0","title":"OpenCV.cv_color_yuv2bgra_yuy2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgra_yuyv/0","title":"OpenCV.cv_color_yuv2bgra_yuyv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgra_yv12/0","title":"OpenCV.cv_color_yuv2bgra_yv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2bgra_yvyu/0","title":"OpenCV.cv_color_yuv2bgra_yvyu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_420/0","title":"OpenCV.cv_color_yuv2gray_420/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_i420/0","title":"OpenCV.cv_color_yuv2gray_i420/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_iyuv/0","title":"OpenCV.cv_color_yuv2gray_iyuv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_nv12/0","title":"OpenCV.cv_color_yuv2gray_nv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_nv21/0","title":"OpenCV.cv_color_yuv2gray_nv21/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_uynv/0","title":"OpenCV.cv_color_yuv2gray_uynv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_uyvy/0","title":"OpenCV.cv_color_yuv2gray_uyvy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_y422/0","title":"OpenCV.cv_color_yuv2gray_y422/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_yunv/0","title":"OpenCV.cv_color_yuv2gray_yunv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_yuy2/0","title":"OpenCV.cv_color_yuv2gray_yuy2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_yuyv/0","title":"OpenCV.cv_color_yuv2gray_yuyv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_yv12/0","title":"OpenCV.cv_color_yuv2gray_yv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2gray_yvyu/0","title":"OpenCV.cv_color_yuv2gray_yvyu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb/0","title":"OpenCV.cv_color_yuv2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb_i420/0","title":"OpenCV.cv_color_yuv2rgb_i420/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb_iyuv/0","title":"OpenCV.cv_color_yuv2rgb_iyuv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb_nv12/0","title":"OpenCV.cv_color_yuv2rgb_nv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb_nv21/0","title":"OpenCV.cv_color_yuv2rgb_nv21/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb_uynv/0","title":"OpenCV.cv_color_yuv2rgb_uynv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb_uyvy/0","title":"OpenCV.cv_color_yuv2rgb_uyvy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb_y422/0","title":"OpenCV.cv_color_yuv2rgb_y422/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb_yunv/0","title":"OpenCV.cv_color_yuv2rgb_yunv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb_yuy2/0","title":"OpenCV.cv_color_yuv2rgb_yuy2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb_yuyv/0","title":"OpenCV.cv_color_yuv2rgb_yuyv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb_yv12/0","title":"OpenCV.cv_color_yuv2rgb_yv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgb_yvyu/0","title":"OpenCV.cv_color_yuv2rgb_yvyu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgba_i420/0","title":"OpenCV.cv_color_yuv2rgba_i420/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgba_iyuv/0","title":"OpenCV.cv_color_yuv2rgba_iyuv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgba_nv12/0","title":"OpenCV.cv_color_yuv2rgba_nv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgba_nv21/0","title":"OpenCV.cv_color_yuv2rgba_nv21/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgba_uynv/0","title":"OpenCV.cv_color_yuv2rgba_uynv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgba_uyvy/0","title":"OpenCV.cv_color_yuv2rgba_uyvy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgba_y422/0","title":"OpenCV.cv_color_yuv2rgba_y422/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgba_yunv/0","title":"OpenCV.cv_color_yuv2rgba_yunv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgba_yuy2/0","title":"OpenCV.cv_color_yuv2rgba_yuy2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgba_yuyv/0","title":"OpenCV.cv_color_yuv2rgba_yuyv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgba_yv12/0","title":"OpenCV.cv_color_yuv2rgba_yv12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv2rgba_yvyu/0","title":"OpenCV.cv_color_yuv2rgba_yvyu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv420p2bgr/0","title":"OpenCV.cv_color_yuv420p2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv420p2bgra/0","title":"OpenCV.cv_color_yuv420p2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv420p2gray/0","title":"OpenCV.cv_color_yuv420p2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv420p2rgb/0","title":"OpenCV.cv_color_yuv420p2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv420p2rgba/0","title":"OpenCV.cv_color_yuv420p2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv420sp2bgr/0","title":"OpenCV.cv_color_yuv420sp2bgr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv420sp2bgra/0","title":"OpenCV.cv_color_yuv420sp2bgra/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv420sp2gray/0","title":"OpenCV.cv_color_yuv420sp2gray/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv420sp2rgb/0","title":"OpenCV.cv_color_yuv420sp2rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_color_yuv420sp2rgba/0","title":"OpenCV.cv_color_yuv420sp2rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_autumn/0","title":"OpenCV.cv_colormap_autumn/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_bone/0","title":"OpenCV.cv_colormap_bone/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_cividis/0","title":"OpenCV.cv_colormap_cividis/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_cool/0","title":"OpenCV.cv_colormap_cool/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_deepgreen/0","title":"OpenCV.cv_colormap_deepgreen/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_hot/0","title":"OpenCV.cv_colormap_hot/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_hsv/0","title":"OpenCV.cv_colormap_hsv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_inferno/0","title":"OpenCV.cv_colormap_inferno/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_jet/0","title":"OpenCV.cv_colormap_jet/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_magma/0","title":"OpenCV.cv_colormap_magma/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_ocean/0","title":"OpenCV.cv_colormap_ocean/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_parula/0","title":"OpenCV.cv_colormap_parula/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_pink/0","title":"OpenCV.cv_colormap_pink/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_plasma/0","title":"OpenCV.cv_colormap_plasma/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_rainbow/0","title":"OpenCV.cv_colormap_rainbow/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_spring/0","title":"OpenCV.cv_colormap_spring/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_summer/0","title":"OpenCV.cv_colormap_summer/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_turbo/0","title":"OpenCV.cv_colormap_turbo/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_twilight/0","title":"OpenCV.cv_colormap_twilight/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_twilight_shifted/0","title":"OpenCV.cv_colormap_twilight_shifted/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_viridis/0","title":"OpenCV.cv_colormap_viridis/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_colormap_winter/0","title":"OpenCV.cv_colormap_winter/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_compressed_input/0","title":"OpenCV.cv_compressed_input/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_computemodedefault/0","title":"OpenCV.cv_computemodedefault/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_computemodeexclusive/0","title":"OpenCV.cv_computemodeexclusive/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_computemodeexclusiveprocess/0","title":"OpenCV.cv_computemodeexclusiveprocess/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_computemodeprohibited/0","title":"OpenCV.cv_computemodeprohibited/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_constant/0","title":"OpenCV.cv_constant/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_contours_match_i1/0","title":"OpenCV.cv_contours_match_i1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_contours_match_i2/0","title":"OpenCV.cv_contours_match_i2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_contours_match_i3/0","title":"OpenCV.cv_contours_match_i3/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_copy_on_map/0","title":"OpenCV.cv_copy_on_map/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_correct_level_h/0","title":"OpenCV.cv_correct_level_h/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_correct_level_l/0","title":"OpenCV.cv_correct_level_l/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_correct_level_m/0","title":"OpenCV.cv_correct_level_m/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_correct_level_q/0","title":"OpenCV.cv_correct_level_q/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cost_color/0","title":"OpenCV.cv_cost_color/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cost_color_grad/0","title":"OpenCV.cv_cost_color_grad/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_count/0","title":"OpenCV.cv_count/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cov_mat_default/0","title":"OpenCV.cv_cov_mat_default/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cov_mat_diagonal/0","title":"OpenCV.cv_cov_mat_diagonal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cov_mat_generic/0","title":"OpenCV.cv_cov_mat_generic/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cov_mat_spherical/0","title":"OpenCV.cv_cov_mat_spherical/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_covar_cols/0","title":"OpenCV.cv_covar_cols/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_covar_normal/0","title":"OpenCV.cv_covar_normal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_covar_rows/0","title":"OpenCV.cv_covar_rows/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_covar_scale/0","title":"OpenCV.cv_covar_scale/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_covar_scrambled/0","title":"OpenCV.cv_covar_scrambled/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_covar_use_avg/0","title":"OpenCV.cv_covar_use_avg/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_crop/0","title":"OpenCV.cv_crop/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cuda_gpu_mat/0","title":"OpenCV.cv_cuda_gpu_mat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_cuda_host_mem/0","title":"OpenCV.cv_cuda_host_mem/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_custom/0","title":"OpenCV.cv_custom/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_data_as_col/0","title":"OpenCV.cv_data_as_col/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_data_as_row/0","title":"OpenCV.cv_data_as_row/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dct_inverse/0","title":"OpenCV.cv_dct_inverse/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dct_rows/0","title":"OpenCV.cv_dct_rows/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_decomp_cholesky/0","title":"OpenCV.cv_decomp_cholesky/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_decomp_eig/0","title":"OpenCV.cv_decomp_eig/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_decomp_lu/0","title":"OpenCV.cv_decomp_lu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_decomp_normal/0","title":"OpenCV.cv_decomp_normal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_decomp_qr/0","title":"OpenCV.cv_decomp_qr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_decomp_svd/0","title":"OpenCV.cv_decomp_svd/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_default/0","title":"OpenCV.cv_default/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_default_max_iters/0","title":"OpenCV.cv_default_max_iters/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_default_nclusters/0","title":"OpenCV.cv_default_nclusters/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_default_nlevels/0","title":"OpenCV.cv_default_nlevels/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_degree/0","title":"OpenCV.cv_degree/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_component/0","title":"OpenCV.cv_depth_component/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask/0","title":"OpenCV.cv_depth_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask_16f/0","title":"OpenCV.cv_depth_mask_16f/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask_16s/0","title":"OpenCV.cv_depth_mask_16s/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask_16u/0","title":"OpenCV.cv_depth_mask_16u/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask_32f/0","title":"OpenCV.cv_depth_mask_32f/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask_32s/0","title":"OpenCV.cv_depth_mask_32s/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask_64f/0","title":"OpenCV.cv_depth_mask_64f/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask_8s/0","title":"OpenCV.cv_depth_mask_8s/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask_8u/0","title":"OpenCV.cv_depth_mask_8u/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask_all/0","title":"OpenCV.cv_depth_mask_all/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask_all_16f/0","title":"OpenCV.cv_depth_mask_all_16f/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask_all_but_8s/0","title":"OpenCV.cv_depth_mask_all_but_8s/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_depth_mask_flt/0","title":"OpenCV.cv_depth_mask_flt/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_descr_format_col_by_col/0","title":"OpenCV.cv_descr_format_col_by_col/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_descr_format_row_by_row/0","title":"OpenCV.cv_descr_format_row_by_row/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_descriptor_kaze/0","title":"OpenCV.cv_descriptor_kaze/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_descriptor_kaze_upright/0","title":"OpenCV.cv_descriptor_kaze_upright/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_descriptor_mldb/0","title":"OpenCV.cv_descriptor_mldb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_descriptor_mldb_upright/0","title":"OpenCV.cv_descriptor_mldb_upright/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_device_copy_obsolete/0","title":"OpenCV.cv_device_copy_obsolete/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_device_mem_mapped/0","title":"OpenCV.cv_device_mem_mapped/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dft_complex_input/0","title":"OpenCV.cv_dft_complex_input/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dft_complex_output/0","title":"OpenCV.cv_dft_complex_output/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dft_inverse/0","title":"OpenCV.cv_dft_inverse/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dft_real_output/0","title":"OpenCV.cv_dft_real_output/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dft_rows/0","title":"OpenCV.cv_dft_rows/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dft_scale/0","title":"OpenCV.cv_dft_scale/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_diff_charbonnier/0","title":"OpenCV.cv_diff_charbonnier/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_diff_pm_g1/0","title":"OpenCV.cv_diff_pm_g1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_diff_pm_g2/0","title":"OpenCV.cv_diff_pm_g2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_diff_weickert/0","title":"OpenCV.cv_diff_weickert/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_disable_timing/0","title":"OpenCV.cv_disable_timing/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_discrete/0","title":"OpenCV.cv_discrete/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_disp_scale/0","title":"OpenCV.cv_disp_scale/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_disp_shift/0","title":"OpenCV.cv_disp_shift/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_c/0","title":"OpenCV.cv_dist_c/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_fair/0","title":"OpenCV.cv_dist_fair/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_huber/0","title":"OpenCV.cv_dist_huber/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_l1/0","title":"OpenCV.cv_dist_l1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_l12/0","title":"OpenCV.cv_dist_l12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_l2/0","title":"OpenCV.cv_dist_l2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_label_ccomp/0","title":"OpenCV.cv_dist_label_ccomp/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_label_pixel/0","title":"OpenCV.cv_dist_label_pixel/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_mask_3/0","title":"OpenCV.cv_dist_mask_3/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_mask_5/0","title":"OpenCV.cv_dist_mask_5/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_mask_precise/0","title":"OpenCV.cv_dist_mask_precise/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_user/0","title":"OpenCV.cv_dist_user/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dist_welsch/0","title":"OpenCV.cv_dist_welsch/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_backend_cuda/0","title":"OpenCV.cv_dnn_backend_cuda/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_backend_default/0","title":"OpenCV.cv_dnn_backend_default/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_backend_halide/0","title":"OpenCV.cv_dnn_backend_halide/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_backend_inference_engine/0","title":"OpenCV.cv_dnn_backend_inference_engine/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_backend_opencv/0","title":"OpenCV.cv_dnn_backend_opencv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_backend_vkcom/0","title":"OpenCV.cv_dnn_backend_vkcom/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_backend_webnn/0","title":"OpenCV.cv_dnn_backend_webnn/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_target_cpu/0","title":"OpenCV.cv_dnn_target_cpu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_target_cuda/0","title":"OpenCV.cv_dnn_target_cuda/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_target_cuda_fp16/0","title":"OpenCV.cv_dnn_target_cuda_fp16/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_target_fpga/0","title":"OpenCV.cv_dnn_target_fpga/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_target_hddl/0","title":"OpenCV.cv_dnn_target_hddl/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_target_myriad/0","title":"OpenCV.cv_dnn_target_myriad/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_target_opencl/0","title":"OpenCV.cv_dnn_target_opencl/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_target_opencl_fp16/0","title":"OpenCV.cv_dnn_target_opencl_fp16/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dnn_target_vulkan/0","title":"OpenCV.cv_dnn_target_vulkan/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dp_seam/0","title":"OpenCV.cv_dp_seam/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_draw_over_outimg/0","title":"OpenCV.cv_draw_over_outimg/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_draw_rich_keypoints/0","title":"OpenCV.cv_draw_rich_keypoints/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_dynamic_parallelism/0","title":"OpenCV.cv_dynamic_parallelism/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_eci_utf8/0","title":"OpenCV.cv_eci_utf8/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_element_array_buffer/0","title":"OpenCV.cv_element_array_buffer/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_empty/0","title":"OpenCV.cv_empty/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_eps/0","title":"OpenCV.cv_eps/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_eps_svr/0","title":"OpenCV.cv_eps_svr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_err_camera_params_adjust_fail/0","title":"OpenCV.cv_err_camera_params_adjust_fail/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_err_homography_est_fail/0","title":"OpenCV.cv_err_homography_est_fail/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_err_need_more_imgs/0","title":"OpenCV.cv_err_need_more_imgs/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_euler_angles_max_value/0","title":"OpenCV.cv_euler_angles_max_value/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_flag_altkey/0","title":"OpenCV.cv_event_flag_altkey/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_flag_ctrlkey/0","title":"OpenCV.cv_event_flag_ctrlkey/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_flag_lbutton/0","title":"OpenCV.cv_event_flag_lbutton/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_flag_mbutton/0","title":"OpenCV.cv_event_flag_mbutton/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_flag_rbutton/0","title":"OpenCV.cv_event_flag_rbutton/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_flag_shiftkey/0","title":"OpenCV.cv_event_flag_shiftkey/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_lbuttondblclk/0","title":"OpenCV.cv_event_lbuttondblclk/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_lbuttondown/0","title":"OpenCV.cv_event_lbuttondown/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_lbuttonup/0","title":"OpenCV.cv_event_lbuttonup/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_mbuttondblclk/0","title":"OpenCV.cv_event_mbuttondblclk/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_mbuttondown/0","title":"OpenCV.cv_event_mbuttondown/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_mbuttonup/0","title":"OpenCV.cv_event_mbuttonup/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_mousehwheel/0","title":"OpenCV.cv_event_mousehwheel/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_mousemove/0","title":"OpenCV.cv_event_mousemove/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_mousewheel/0","title":"OpenCV.cv_event_mousewheel/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_rbuttondblclk/0","title":"OpenCV.cv_event_rbuttondblclk/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_rbuttondown/0","title":"OpenCV.cv_event_rbuttondown/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_event_rbuttonup/0","title":"OpenCV.cv_event_rbuttonup/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_exec_kernel/0","title":"OpenCV.cv_exec_kernel/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_exec_native_kernel/0","title":"OpenCV.cv_exec_native_kernel/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_expr/0","title":"OpenCV.cv_expr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ext_xyx/0","title":"OpenCV.cv_ext_xyx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ext_xyz/0","title":"OpenCV.cv_ext_xyz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ext_xzx/0","title":"OpenCV.cv_ext_xzx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ext_xzy/0","title":"OpenCV.cv_ext_xzy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ext_yxy/0","title":"OpenCV.cv_ext_yxy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ext_yxz/0","title":"OpenCV.cv_ext_yxz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ext_yzx/0","title":"OpenCV.cv_ext_yzx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ext_yzy/0","title":"OpenCV.cv_ext_yzy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ext_zxy/0","title":"OpenCV.cv_ext_zxy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ext_zxz/0","title":"OpenCV.cv_ext_zxz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ext_zyx/0","title":"OpenCV.cv_ext_zyx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ext_zyz/0","title":"OpenCV.cv_ext_zyz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fast_n/0","title":"OpenCV.cv_fast_n/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fast_score/0","title":"OpenCV.cv_fast_score/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_feather/0","title":"OpenCV.cv_feather/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_feature_set_compute_10/0","title":"OpenCV.cv_feature_set_compute_10/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_feature_set_compute_11/0","title":"OpenCV.cv_feature_set_compute_11/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_feature_set_compute_12/0","title":"OpenCV.cv_feature_set_compute_12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_feature_set_compute_13/0","title":"OpenCV.cv_feature_set_compute_13/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_feature_set_compute_20/0","title":"OpenCV.cv_feature_set_compute_20/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_feature_set_compute_21/0","title":"OpenCV.cv_feature_set_compute_21/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_feature_set_compute_30/0","title":"OpenCV.cv_feature_set_compute_30/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_feature_set_compute_32/0","title":"OpenCV.cv_feature_set_compute_32/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_feature_set_compute_35/0","title":"OpenCV.cv_feature_set_compute_35/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_feature_set_compute_50/0","title":"OpenCV.cv_feature_set_compute_50/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_filenode_float/0","title":"OpenCV.cv_filenode_float/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_filenode_int/0","title":"OpenCV.cv_filenode_int/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_filenode_none/0","title":"OpenCV.cv_filenode_none/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_filenode_string/0","title":"OpenCV.cv_filenode_string/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_filenode_type_mask/0","title":"OpenCV.cv_filenode_type_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_filenode_uniform/0","title":"OpenCV.cv_filenode_uniform/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_filled/0","title":"OpenCV.cv_filled/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_filter_scharr/0","title":"OpenCV.cv_filter_scharr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fisheye_calib_fix_focal_length/0","title":"OpenCV.cv_fisheye_calib_fix_focal_length/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fisheye_calib_fix_intrinsic/0","title":"OpenCV.cv_fisheye_calib_fix_intrinsic/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fisheye_calib_fix_k1/0","title":"OpenCV.cv_fisheye_calib_fix_k1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fisheye_calib_fix_k2/0","title":"OpenCV.cv_fisheye_calib_fix_k2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fisheye_calib_fix_k3/0","title":"OpenCV.cv_fisheye_calib_fix_k3/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fisheye_calib_fix_k4/0","title":"OpenCV.cv_fisheye_calib_fix_k4/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fisheye_calib_fix_principal_point/0","title":"OpenCV.cv_fisheye_calib_fix_principal_point/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fisheye_calib_use_intrinsic_guess/0","title":"OpenCV.cv_fisheye_calib_use_intrinsic_guess/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fisheye_calib_zero_disparity/0","title":"OpenCV.cv_fisheye_calib_zero_disparity/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fixed_size/0","title":"OpenCV.cv_fixed_size/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fixed_type/0","title":"OpenCV.cv_fixed_type/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_flann_index_type_16s/0","title":"OpenCV.cv_flann_index_type_16s/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_flann_index_type_16u/0","title":"OpenCV.cv_flann_index_type_16u/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_flann_index_type_32f/0","title":"OpenCV.cv_flann_index_type_32f/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_flann_index_type_32s/0","title":"OpenCV.cv_flann_index_type_32s/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_flann_index_type_64f/0","title":"OpenCV.cv_flann_index_type_64f/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_flann_index_type_8s/0","title":"OpenCV.cv_flann_index_type_8s/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_flann_index_type_8u/0","title":"OpenCV.cv_flann_index_type_8u/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_flann_index_type_algorithm/0","title":"OpenCV.cv_flann_index_type_algorithm/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_flann_index_type_bool/0","title":"OpenCV.cv_flann_index_type_bool/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_flann_index_type_string/0","title":"OpenCV.cv_flann_index_type_string/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_flannbased/0","title":"OpenCV.cv_flannbased/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_float/0","title":"OpenCV.cv_float/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_floodfill_fixed_range/0","title":"OpenCV.cv_floodfill_fixed_range/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_floodfill_mask_only/0","title":"OpenCV.cv_floodfill_mask_only/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_flow/0","title":"OpenCV.cv_flow/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fm_7point/0","title":"OpenCV.cv_fm_7point/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fm_8point/0","title":"OpenCV.cv_fm_8point/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fm_lmeds/0","title":"OpenCV.cv_fm_lmeds/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fm_ransac/0","title":"OpenCV.cv_fm_ransac/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fmt_c/0","title":"OpenCV.cv_fmt_c/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fmt_csv/0","title":"OpenCV.cv_fmt_csv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fmt_default/0","title":"OpenCV.cv_fmt_default/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fmt_matlab/0","title":"OpenCV.cv_fmt_matlab/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fmt_numpy/0","title":"OpenCV.cv_fmt_numpy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fmt_python/0","title":"OpenCV.cv_fmt_python/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_font_hershey_complex/0","title":"OpenCV.cv_font_hershey_complex/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_font_hershey_complex_small/0","title":"OpenCV.cv_font_hershey_complex_small/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_font_hershey_duplex/0","title":"OpenCV.cv_font_hershey_duplex/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_font_hershey_plain/0","title":"OpenCV.cv_font_hershey_plain/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_font_hershey_script_complex/0","title":"OpenCV.cv_font_hershey_script_complex/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_font_hershey_script_simplex/0","title":"OpenCV.cv_font_hershey_script_simplex/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_font_hershey_simplex/0","title":"OpenCV.cv_font_hershey_simplex/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_font_hershey_triplex/0","title":"OpenCV.cv_font_hershey_triplex/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_font_italic/0","title":"OpenCV.cv_font_italic/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_format_auto/0","title":"OpenCV.cv_format_auto/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_format_json/0","title":"OpenCV.cv_format_json/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_format_mask/0","title":"OpenCV.cv_format_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_format_xml/0","title":"OpenCV.cv_format_xml/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_format_yaml/0","title":"OpenCV.cv_format_yaml/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fp_correctly_rounded_divide_sqrt/0","title":"OpenCV.cv_fp_correctly_rounded_divide_sqrt/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fp_denorm/0","title":"OpenCV.cv_fp_denorm/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fp_fma/0","title":"OpenCV.cv_fp_fma/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fp_inf_nan/0","title":"OpenCV.cv_fp_inf_nan/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fp_round_to_inf/0","title":"OpenCV.cv_fp_round_to_inf/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fp_round_to_nearest/0","title":"OpenCV.cv_fp_round_to_nearest/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fp_round_to_zero/0","title":"OpenCV.cv_fp_round_to_zero/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fp_soft_float/0","title":"OpenCV.cv_fp_soft_float/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fr_cosine/0","title":"OpenCV.cv_fr_cosine/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_fr_norm_l2/0","title":"OpenCV.cv_fr_norm_l2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_full_uv/0","title":"OpenCV.cv_full_uv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gain/0","title":"OpenCV.cv_gain/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gain_blocks/0","title":"OpenCV.cv_gain_blocks/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gamma/0","title":"OpenCV.cv_gamma/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gaussian/0","title":"OpenCV.cv_gaussian/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gc_bgd/0","title":"OpenCV.cv_gc_bgd/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gc_eval/0","title":"OpenCV.cv_gc_eval/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gc_eval_freeze_model/0","title":"OpenCV.cv_gc_eval_freeze_model/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gc_fgd/0","title":"OpenCV.cv_gc_fgd/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gc_init_with_mask/0","title":"OpenCV.cv_gc_init_with_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gc_init_with_rect/0","title":"OpenCV.cv_gc_init_with_rect/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gc_pr_bgd/0","title":"OpenCV.cv_gc_pr_bgd/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gc_pr_fgd/0","title":"OpenCV.cv_gc_pr_fgd/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gemm_1_t/0","title":"OpenCV.cv_gemm_1_t/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gemm_2_t/0","title":"OpenCV.cv_gemm_2_t/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gemm_3_t/0","title":"OpenCV.cv_gemm_3_t/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gentle/0","title":"OpenCV.cv_gentle/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_global_atomics/0","title":"OpenCV.cv_global_atomics/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gpuapicallerror/0","title":"OpenCV.cv_gpuapicallerror/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_gpunotsupported/0","title":"OpenCV.cv_gpunotsupported/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_hard_margin/0","title":"OpenCV.cv_hard_margin/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_harris_score/0","title":"OpenCV.cv_harris_score/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_hash_bit/0","title":"OpenCV.cv_hash_bit/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_hash_scale/0","title":"OpenCV.cv_hash_scale/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_headerisnull/0","title":"OpenCV.cv_headerisnull/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_histcmp_bhattacharyya/0","title":"OpenCV.cv_histcmp_bhattacharyya/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_histcmp_chisqr/0","title":"OpenCV.cv_histcmp_chisqr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_histcmp_chisqr_alt/0","title":"OpenCV.cv_histcmp_chisqr_alt/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_histcmp_correl/0","title":"OpenCV.cv_histcmp_correl/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_histcmp_hellinger/0","title":"OpenCV.cv_histcmp_hellinger/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_histcmp_intersect/0","title":"OpenCV.cv_histcmp_intersect/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_histcmp_kl_div/0","title":"OpenCV.cv_histcmp_kl_div/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_host_copy_obsolete/0","title":"OpenCV.cv_host_copy_obsolete/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_hough_gradient/0","title":"OpenCV.cv_hough_gradient/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_hough_gradient_alt/0","title":"OpenCV.cv_hough_gradient_alt/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_hough_multi_scale/0","title":"OpenCV.cv_hough_multi_scale/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_hough_probabilistic/0","title":"OpenCV.cv_hough_probabilistic/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_hough_standard/0","title":"OpenCV.cv_hough_standard/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_identity/0","title":"OpenCV.cv_identity/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_anycolor/0","title":"OpenCV.cv_imread_anycolor/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_anydepth/0","title":"OpenCV.cv_imread_anydepth/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_color/0","title":"OpenCV.cv_imread_color/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_grayscale/0","title":"OpenCV.cv_imread_grayscale/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_ignore_orientation/0","title":"OpenCV.cv_imread_ignore_orientation/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_load_gdal/0","title":"OpenCV.cv_imread_load_gdal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_reduced_color_2/0","title":"OpenCV.cv_imread_reduced_color_2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_reduced_color_4/0","title":"OpenCV.cv_imread_reduced_color_4/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_reduced_color_8/0","title":"OpenCV.cv_imread_reduced_color_8/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_reduced_grayscale_2/0","title":"OpenCV.cv_imread_reduced_grayscale_2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_reduced_grayscale_4/0","title":"OpenCV.cv_imread_reduced_grayscale_4/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_reduced_grayscale_8/0","title":"OpenCV.cv_imread_reduced_grayscale_8/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imread_unchanged/0","title":"OpenCV.cv_imread_unchanged/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_compression/0","title":"OpenCV.cv_imwrite_exr_compression/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_compression_b44/0","title":"OpenCV.cv_imwrite_exr_compression_b44/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_compression_b44a/0","title":"OpenCV.cv_imwrite_exr_compression_b44a/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_compression_dwaa/0","title":"OpenCV.cv_imwrite_exr_compression_dwaa/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_compression_dwab/0","title":"OpenCV.cv_imwrite_exr_compression_dwab/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_compression_no/0","title":"OpenCV.cv_imwrite_exr_compression_no/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_compression_piz/0","title":"OpenCV.cv_imwrite_exr_compression_piz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_compression_pxr24/0","title":"OpenCV.cv_imwrite_exr_compression_pxr24/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_compression_rle/0","title":"OpenCV.cv_imwrite_exr_compression_rle/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_compression_zip/0","title":"OpenCV.cv_imwrite_exr_compression_zip/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_compression_zips/0","title":"OpenCV.cv_imwrite_exr_compression_zips/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_type/0","title":"OpenCV.cv_imwrite_exr_type/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_type_float/0","title":"OpenCV.cv_imwrite_exr_type_float/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_exr_type_half/0","title":"OpenCV.cv_imwrite_exr_type_half/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_jpeg2000_compression_x1000/0","title":"OpenCV.cv_imwrite_jpeg2000_compression_x1000/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_jpeg_chroma_quality/0","title":"OpenCV.cv_imwrite_jpeg_chroma_quality/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_jpeg_luma_quality/0","title":"OpenCV.cv_imwrite_jpeg_luma_quality/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_jpeg_optimize/0","title":"OpenCV.cv_imwrite_jpeg_optimize/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_jpeg_progressive/0","title":"OpenCV.cv_imwrite_jpeg_progressive/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_jpeg_quality/0","title":"OpenCV.cv_imwrite_jpeg_quality/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_jpeg_rst_interval/0","title":"OpenCV.cv_imwrite_jpeg_rst_interval/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_pam_format_blackandwhite/0","title":"OpenCV.cv_imwrite_pam_format_blackandwhite/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_pam_format_grayscale/0","title":"OpenCV.cv_imwrite_pam_format_grayscale/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_pam_format_grayscale_alpha/0","title":"OpenCV.cv_imwrite_pam_format_grayscale_alpha/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_pam_format_null/0","title":"OpenCV.cv_imwrite_pam_format_null/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_pam_format_rgb/0","title":"OpenCV.cv_imwrite_pam_format_rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_pam_format_rgb_alpha/0","title":"OpenCV.cv_imwrite_pam_format_rgb_alpha/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_pam_tupletype/0","title":"OpenCV.cv_imwrite_pam_tupletype/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_png_bilevel/0","title":"OpenCV.cv_imwrite_png_bilevel/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_png_compression/0","title":"OpenCV.cv_imwrite_png_compression/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_png_strategy/0","title":"OpenCV.cv_imwrite_png_strategy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_png_strategy_default/0","title":"OpenCV.cv_imwrite_png_strategy_default/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_png_strategy_filtered/0","title":"OpenCV.cv_imwrite_png_strategy_filtered/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_png_strategy_fixed/0","title":"OpenCV.cv_imwrite_png_strategy_fixed/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_png_strategy_huffman_only/0","title":"OpenCV.cv_imwrite_png_strategy_huffman_only/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_png_strategy_rle/0","title":"OpenCV.cv_imwrite_png_strategy_rle/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_pxm_binary/0","title":"OpenCV.cv_imwrite_pxm_binary/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_tiff_compression/0","title":"OpenCV.cv_imwrite_tiff_compression/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_tiff_resunit/0","title":"OpenCV.cv_imwrite_tiff_resunit/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_tiff_xdpi/0","title":"OpenCV.cv_imwrite_tiff_xdpi/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_tiff_ydpi/0","title":"OpenCV.cv_imwrite_tiff_ydpi/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_imwrite_webp_quality/0","title":"OpenCV.cv_imwrite_webp_quality/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inpaint_ns/0","title":"OpenCV.cv_inpaint_ns/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inpaint_telea/0","title":"OpenCV.cv_inpaint_telea/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inputarray_mat/0","title":"OpenCV.cv_inputarray_mat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inside_map/0","title":"OpenCV.cv_inside_map/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int/0","title":"OpenCV.cv_int/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int_xyx/0","title":"OpenCV.cv_int_xyx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int_xyz/0","title":"OpenCV.cv_int_xyz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int_xzx/0","title":"OpenCV.cv_int_xzx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int_xzy/0","title":"OpenCV.cv_int_xzy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int_yxy/0","title":"OpenCV.cv_int_yxy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int_yxz/0","title":"OpenCV.cv_int_yxz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int_yzx/0","title":"OpenCV.cv_int_yzx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int_yzy/0","title":"OpenCV.cv_int_yzy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int_zxy/0","title":"OpenCV.cv_int_zxy/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int_zxz/0","title":"OpenCV.cv_int_zxz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int_zyx/0","title":"OpenCV.cv_int_zyx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_int_zyz/0","title":"OpenCV.cv_int_zyz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter/0","title":"OpenCV.cv_inter/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter_area/0","title":"OpenCV.cv_inter_area/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter_bits/0","title":"OpenCV.cv_inter_bits/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter_bits2/0","title":"OpenCV.cv_inter_bits2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter_cubic/0","title":"OpenCV.cv_inter_cubic/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter_lanczos4/0","title":"OpenCV.cv_inter_lanczos4/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter_linear/0","title":"OpenCV.cv_inter_linear/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter_linear_exact/0","title":"OpenCV.cv_inter_linear_exact/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter_max/0","title":"OpenCV.cv_inter_max/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter_nearest/0","title":"OpenCV.cv_inter_nearest/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter_nearest_exact/0","title":"OpenCV.cv_inter_nearest_exact/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter_tab_size/0","title":"OpenCV.cv_inter_tab_size/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_inter_tab_size2/0","title":"OpenCV.cv_inter_tab_size2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_interprocess/0","title":"OpenCV.cv_interprocess/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_intersect_full/0","title":"OpenCV.cv_intersect_full/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_intersect_none/0","title":"OpenCV.cv_intersect_none/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_intersect_partial/0","title":"OpenCV.cv_intersect_partial/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_kdtree/0","title":"OpenCV.cv_kdtree/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_kind_mask/0","title":"OpenCV.cv_kind_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_kind_shift/0","title":"OpenCV.cv_kind_shift/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_kmeans_pp_centers/0","title":"OpenCV.cv_kmeans_pp_centers/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_kmeans_random_centers/0","title":"OpenCV.cv_kmeans_random_centers/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_kmeans_use_initial_labels/0","title":"OpenCV.cv_kmeans_use_initial_labels/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_l2hys/0","title":"OpenCV.cv_l2hys/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_last_value_flann_index_type/0","title":"OpenCV.cv_last_value_flann_index_type/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ldr_size/0","title":"OpenCV.cv_ldr_size/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_leakyrelu/0","title":"OpenCV.cv_leakyrelu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_line_4/0","title":"OpenCV.cv_line_4/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_line_8/0","title":"OpenCV.cv_line_8/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_line_aa/0","title":"OpenCV.cv_line_aa/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_line_loop/0","title":"OpenCV.cv_line_loop/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_line_strip/0","title":"OpenCV.cv_line_strip/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_linear/0","title":"OpenCV.cv_linear/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_lines/0","title":"OpenCV.cv_lines/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_lmeds/0","title":"OpenCV.cv_lmeds/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_local/0","title":"OpenCV.cv_local/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_local_is_global/0","title":"OpenCV.cv_local_is_global/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_local_is_local/0","title":"OpenCV.cv_local_is_local/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_local_optim_gc/0","title":"OpenCV.cv_local_optim_gc/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_local_optim_inner_and_iter_lo/0","title":"OpenCV.cv_local_optim_inner_and_iter_lo/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_local_optim_inner_lo/0","title":"OpenCV.cv_local_optim_inner_lo/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_local_optim_null/0","title":"OpenCV.cv_local_optim_null/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_local_optim_sigma/0","title":"OpenCV.cv_local_optim_sigma/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_logit/0","title":"OpenCV.cv_logit/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_lsd_refine_adv/0","title":"OpenCV.cv_lsd_refine_adv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_lsd_refine_none/0","title":"OpenCV.cv_lsd_refine_none/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_lsd_refine_std/0","title":"OpenCV.cv_lsd_refine_std/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_magic_mask/0","title":"OpenCV.cv_magic_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_magic_val/0","title":"OpenCV.cv_magic_val/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_map/0","title":"OpenCV.cv_map/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_marker_cross/0","title":"OpenCV.cv_marker_cross/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_marker_diamond/0","title":"OpenCV.cv_marker_diamond/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_marker_square/0","title":"OpenCV.cv_marker_square/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_marker_star/0","title":"OpenCV.cv_marker_star/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_marker_tilted_cross/0","title":"OpenCV.cv_marker_tilted_cross/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_marker_triangle_down/0","title":"OpenCV.cv_marker_triangle_down/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_marker_triangle_up/0","title":"OpenCV.cv_marker_triangle_up/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_maskistiled/0","title":"OpenCV.cv_maskistiled/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mat/0","title":"OpenCV.cv_mat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mat_vector/0","title":"OpenCV.cv_mat_vector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_matx/0","title":"OpenCV.cv_matx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_max_dim/0","title":"OpenCV.cv_max_dim/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_max_iter/0","title":"OpenCV.cv_max_iter/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_memory/0","title":"OpenCV.cv_memory/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mini_batch/0","title":"OpenCV.cv_mini_batch/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mixed_clone/0","title":"OpenCV.cv_mixed_clone/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_alphanumeric/0","title":"OpenCV.cv_mode_alphanumeric/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_auto/0","title":"OpenCV.cv_mode_auto/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_byte/0","title":"OpenCV.cv_mode_byte/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_detect/0","title":"OpenCV.cv_mode_detect/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_eci/0","title":"OpenCV.cv_mode_eci/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_hh/0","title":"OpenCV.cv_mode_hh/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_hh4/0","title":"OpenCV.cv_mode_hh4/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_init_neg/0","title":"OpenCV.cv_mode_init_neg/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_init_pos/0","title":"OpenCV.cv_mode_init_pos/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_kanji/0","title":"OpenCV.cv_mode_kanji/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_numeric/0","title":"OpenCV.cv_mode_numeric/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_sgbm/0","title":"OpenCV.cv_mode_sgbm/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_sgbm_3way/0","title":"OpenCV.cv_mode_sgbm_3way/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_structured_append/0","title":"OpenCV.cv_mode_structured_append/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_track_neg/0","title":"OpenCV.cv_mode_track_neg/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_mode_track_pos/0","title":"OpenCV.cv_mode_track_pos/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_modify_a/0","title":"OpenCV.cv_modify_a/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_monochrome_transfer/0","title":"OpenCV.cv_monochrome_transfer/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_morph_blackhat/0","title":"OpenCV.cv_morph_blackhat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_morph_close/0","title":"OpenCV.cv_morph_close/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_morph_cross/0","title":"OpenCV.cv_morph_cross/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_morph_dilate/0","title":"OpenCV.cv_morph_dilate/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_morph_ellipse/0","title":"OpenCV.cv_morph_ellipse/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_morph_erode/0","title":"OpenCV.cv_morph_erode/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_morph_gradient/0","title":"OpenCV.cv_morph_gradient/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_morph_hitmiss/0","title":"OpenCV.cv_morph_hitmiss/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_morph_open/0","title":"OpenCV.cv_morph_open/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_morph_rect/0","title":"OpenCV.cv_morph_rect/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_morph_tophat/0","title":"OpenCV.cv_morph_tophat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_motion_affine/0","title":"OpenCV.cv_motion_affine/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_motion_euclidean/0","title":"OpenCV.cv_motion_euclidean/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_motion_homography/0","title":"OpenCV.cv_motion_homography/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_motion_translation/0","title":"OpenCV.cv_motion_translation/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_multi_band/0","title":"OpenCV.cv_multi_band/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_name_expected/0","title":"OpenCV.cv_name_expected/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_named/0","title":"OpenCV.cv_named/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_native_double/0","title":"OpenCV.cv_native_double/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_neigh_flann_knn/0","title":"OpenCV.cv_neigh_flann_knn/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_neigh_flann_radius/0","title":"OpenCV.cv_neigh_flann_radius/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_neigh_grid/0","title":"OpenCV.cv_neigh_grid/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_next_around_dst/0","title":"OpenCV.cv_next_around_dst/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_next_around_left/0","title":"OpenCV.cv_next_around_left/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_next_around_org/0","title":"OpenCV.cv_next_around_org/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_next_around_right/0","title":"OpenCV.cv_next_around_right/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_no/0","title":"OpenCV.cv_no/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_no_cache/0","title":"OpenCV.cv_no_cache/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_no_input_scale/0","title":"OpenCV.cv_no_input_scale/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_no_local_mem/0","title":"OpenCV.cv_no_local_mem/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_no_output_scale/0","title":"OpenCV.cv_no_output_scale/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_no_size/0","title":"OpenCV.cv_no_size/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_no_uv/0","title":"OpenCV.cv_no_uv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_none/0","title":"OpenCV.cv_none/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_nonmax_suppression/0","title":"OpenCV.cv_nonmax_suppression/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_norm_hamming/0","title":"OpenCV.cv_norm_hamming/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_norm_hamming2/0","title":"OpenCV.cv_norm_hamming2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_norm_inf/0","title":"OpenCV.cv_norm_inf/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_norm_l1/0","title":"OpenCV.cv_norm_l1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_norm_l2/0","title":"OpenCV.cv_norm_l2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_norm_l2sqr/0","title":"OpenCV.cv_norm_l2sqr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_norm_minmax/0","title":"OpenCV.cv_norm_minmax/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_norm_relative/0","title":"OpenCV.cv_norm_relative/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_norm_type_mask/0","title":"OpenCV.cv_norm_type_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_normal/0","title":"OpenCV.cv_normal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_normal_clone/0","title":"OpenCV.cv_normal_clone/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_normconv_filter/0","title":"OpenCV.cv_normconv_filter/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_not_draw_single_points/0","title":"OpenCV.cv_not_draw_single_points/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_nu/0","title":"OpenCV.cv_nu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_nu_svc/0","title":"OpenCV.cv_nu_svc/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_nu_svr/0","title":"OpenCV.cv_nu_svr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_oast_9_16/0","title":"OpenCV.cv_oast_9_16/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ocl_vector_default/0","title":"OpenCV.cv_ocl_vector_default/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ocl_vector_max/0","title":"OpenCV.cv_ocl_vector_max/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ocl_vector_own/0","title":"OpenCV.cv_ocl_vector_own/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ok/0","title":"OpenCV.cv_ok/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_one_class/0","title":"OpenCV.cv_one_class/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_openclapicallerror/0","title":"OpenCV.cv_openclapicallerror/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_opencldoublenotsupported/0","title":"OpenCV.cv_opencldoublenotsupported/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_opencliniterror/0","title":"OpenCV.cv_opencliniterror/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_openclnoamdblasfft/0","title":"OpenCV.cv_openclnoamdblasfft/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_opengl_buffer/0","title":"OpenCV.cv_opengl_buffer/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_openglapicallerror/0","title":"OpenCV.cv_openglapicallerror/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_openglnotsupported/0","title":"OpenCV.cv_openglnotsupported/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_optflow_farneback_gaussian/0","title":"OpenCV.cv_optflow_farneback_gaussian/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_optflow_lk_get_min_eigenvals/0","title":"OpenCV.cv_optflow_lk_get_min_eigenvals/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_optflow_use_initial_flow/0","title":"OpenCV.cv_optflow_use_initial_flow/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_p/0","title":"OpenCV.cv_p/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_page_locked/0","title":"OpenCV.cv_page_locked/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_panorama/0","title":"OpenCV.cv_panorama/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_pixel_pack_buffer/0","title":"OpenCV.cv_pixel_pack_buffer/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_pixel_unpack_buffer/0","title":"OpenCV.cv_pixel_unpack_buffer/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_points/0","title":"OpenCV.cv_points/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_poly/0","title":"OpenCV.cv_poly/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_polygon/0","title":"OpenCV.cv_polygon/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_predict_auto/0","title":"OpenCV.cv_predict_auto/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_predict_mask/0","title":"OpenCV.cv_predict_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_predict_max_vote/0","title":"OpenCV.cv_predict_max_vote/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_predict_sum/0","title":"OpenCV.cv_predict_sum/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_prefilter_normalized_response/0","title":"OpenCV.cv_prefilter_normalized_response/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_prefilter_xsobel/0","title":"OpenCV.cv_prefilter_xsobel/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_preprocessed_input/0","title":"OpenCV.cv_preprocessed_input/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_preset_fast/0","title":"OpenCV.cv_preset_fast/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_preset_medium/0","title":"OpenCV.cv_preset_medium/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_preset_ultrafast/0","title":"OpenCV.cv_preset_ultrafast/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_prev_around_dst/0","title":"OpenCV.cv_prev_around_dst/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_prev_around_left/0","title":"OpenCV.cv_prev_around_left/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_prev_around_org/0","title":"OpenCV.cv_prev_around_org/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_prev_around_right/0","title":"OpenCV.cv_prev_around_right/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_proj_spherical_eqrect/0","title":"OpenCV.cv_proj_spherical_eqrect/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_proj_spherical_ortho/0","title":"OpenCV.cv_proj_spherical_ortho/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ptloc_error/0","title":"OpenCV.cv_ptloc_error/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ptloc_inside/0","title":"OpenCV.cv_ptloc_inside/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ptloc_on_edge/0","title":"OpenCV.cv_ptloc_on_edge/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ptloc_outside_rect/0","title":"OpenCV.cv_ptloc_outside_rect/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ptloc_vertex/0","title":"OpenCV.cv_ptloc_vertex/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ptr_only/0","title":"OpenCV.cv_ptr_only/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_qt_checkbox/0","title":"OpenCV.cv_qt_checkbox/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_qt_font_black/0","title":"OpenCV.cv_qt_font_black/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_qt_font_bold/0","title":"OpenCV.cv_qt_font_bold/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_qt_font_demibold/0","title":"OpenCV.cv_qt_font_demibold/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_qt_font_light/0","title":"OpenCV.cv_qt_font_light/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_qt_font_normal/0","title":"OpenCV.cv_qt_font_normal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_qt_new_buttonbar/0","title":"OpenCV.cv_qt_new_buttonbar/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_qt_push_button/0","title":"OpenCV.cv_qt_push_button/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_qt_radiobox/0","title":"OpenCV.cv_qt_radiobox/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_qt_style_italic/0","title":"OpenCV.cv_qt_style_italic/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_qt_style_normal/0","title":"OpenCV.cv_qt_style_normal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_qt_style_oblique/0","title":"OpenCV.cv_qt_style_oblique/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_quad_strip/0","title":"OpenCV.cv_quad_strip/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_quads/0","title":"OpenCV.cv_quads/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_quat_assume_not_unit/0","title":"OpenCV.cv_quat_assume_not_unit/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_quat_assume_unit/0","title":"OpenCV.cv_quat_assume_unit/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_ransac/0","title":"OpenCV.cv_ransac/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_raw_output/0","title":"OpenCV.cv_raw_output/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_rbf/0","title":"OpenCV.cv_rbf/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_read/0","title":"OpenCV.cv_read/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_read_only/0","title":"OpenCV.cv_read_only/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_read_only_cache/0","title":"OpenCV.cv_read_only_cache/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_read_write/0","title":"OpenCV.cv_read_write/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_read_write_cache/0","title":"OpenCV.cv_read_write_cache/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_real/0","title":"OpenCV.cv_real/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_recurs_filter/0","title":"OpenCV.cv_recurs_filter/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_reduce_avg/0","title":"OpenCV.cv_reduce_avg/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_reduce_max/0","title":"OpenCV.cv_reduce_max/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_reduce_min/0","title":"OpenCV.cv_reduce_min/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_reduce_sum/0","title":"OpenCV.cv_reduce_sum/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_reg_disable/0","title":"OpenCV.cv_reg_disable/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_reg_l1/0","title":"OpenCV.cv_reg_l1/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_reg_l2/0","title":"OpenCV.cv_reg_l2/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_relu/0","title":"OpenCV.cv_relu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_retr_ccomp/0","title":"OpenCV.cv_retr_ccomp/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_retr_external/0","title":"OpenCV.cv_retr_external/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_retr_floodfill/0","title":"OpenCV.cv_retr_floodfill/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_retr_list/0","title":"OpenCV.cv_retr_list/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_retr_tree/0","title":"OpenCV.cv_retr_tree/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_rgb/0","title":"OpenCV.cv_rgb/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_rgba/0","title":"OpenCV.cv_rgba/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_rho/0","title":"OpenCV.cv_rho/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_rotate_180/0","title":"OpenCV.cv_rotate_180/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_rotate_90_clockwise/0","title":"OpenCV.cv_rotate_90_clockwise/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_rotate_90_counterclockwise/0","title":"OpenCV.cv_rotate_90_counterclockwise/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_row_sample/0","title":"OpenCV.cv_row_sample/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_rprop/0","title":"OpenCV.cv_rprop/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_sampling_napsac/0","title":"OpenCV.cv_sampling_napsac/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_sampling_progressive_napsac/0","title":"OpenCV.cv_sampling_progressive_napsac/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_sampling_prosac/0","title":"OpenCV.cv_sampling_prosac/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_sampling_uniform/0","title":"OpenCV.cv_sampling_uniform/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_scalar/0","title":"OpenCV.cv_scalar/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_scans/0","title":"OpenCV.cv_scans/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_score_method_lmeds/0","title":"OpenCV.cv_score_method_lmeds/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_score_method_magsac/0","title":"OpenCV.cv_score_method_magsac/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_score_method_msac/0","title":"OpenCV.cv_score_method_msac/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_score_method_ransac/0","title":"OpenCV.cv_score_method_ransac/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_seq/0","title":"OpenCV.cv_seq/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_sgd/0","title":"OpenCV.cv_sgd/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_shared/0","title":"OpenCV.cv_shared/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_shared_atomics/0","title":"OpenCV.cv_shared_atomics/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_sigmoid/0","title":"OpenCV.cv_sigmoid/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_sigmoid_sym/0","title":"OpenCV.cv_sigmoid_sym/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_soft_margin/0","title":"OpenCV.cv_soft_margin/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_softnms_gaussian/0","title":"OpenCV.cv_softnms_gaussian/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_softnms_linear/0","title":"OpenCV.cv_softnms_linear/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvelp_multi/0","title":"OpenCV.cv_solvelp_multi/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvelp_single/0","title":"OpenCV.cv_solvelp_single/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvelp_unbounded/0","title":"OpenCV.cv_solvelp_unbounded/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvelp_unfeasible/0","title":"OpenCV.cv_solvelp_unfeasible/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvepnp_ap3p/0","title":"OpenCV.cv_solvepnp_ap3p/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvepnp_dls/0","title":"OpenCV.cv_solvepnp_dls/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvepnp_epnp/0","title":"OpenCV.cv_solvepnp_epnp/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvepnp_ippe/0","title":"OpenCV.cv_solvepnp_ippe/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvepnp_ippe_square/0","title":"OpenCV.cv_solvepnp_ippe_square/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvepnp_iterative/0","title":"OpenCV.cv_solvepnp_iterative/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvepnp_max_count/0","title":"OpenCV.cv_solvepnp_max_count/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvepnp_p3p/0","title":"OpenCV.cv_solvepnp_p3p/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvepnp_sqpnp/0","title":"OpenCV.cv_solvepnp_sqpnp/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_solvepnp_upnp/0","title":"OpenCV.cv_solvepnp_upnp/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_sort_ascending/0","title":"OpenCV.cv_sort_ascending/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_sort_descending/0","title":"OpenCV.cv_sort_descending/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_sort_every_column/0","title":"OpenCV.cv_sort_every_column/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_sort_every_row/0","title":"OpenCV.cv_sort_every_row/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_sparsemat_magic_val/0","title":"OpenCV.cv_sparsemat_magic_val/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_start_auto_step/0","title":"OpenCV.cv_start_auto_step/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_start_e_step/0","title":"OpenCV.cv_start_e_step/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_start_m_step/0","title":"OpenCV.cv_start_m_step/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_std_array/0","title":"OpenCV.cv_std_array/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_std_array_mat/0","title":"OpenCV.cv_std_array_mat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_std_bool_vector/0","title":"OpenCV.cv_std_bool_vector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_std_vector/0","title":"OpenCV.cv_std_vector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_std_vector_cuda_gpu_mat/0","title":"OpenCV.cv_std_vector_cuda_gpu_mat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_std_vector_mat/0","title":"OpenCV.cv_std_vector_mat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_std_vector_umat/0","title":"OpenCV.cv_std_vector_umat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_std_vector_vector/0","title":"OpenCV.cv_std_vector_vector/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_str/0","title":"OpenCV.cv_str/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_string/0","title":"OpenCV.cv_string/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsassert/0","title":"OpenCV.cv_stsassert/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsautotrace/0","title":"OpenCV.cv_stsautotrace/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsbacktrace/0","title":"OpenCV.cv_stsbacktrace/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsbadarg/0","title":"OpenCV.cv_stsbadarg/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsbadflag/0","title":"OpenCV.cv_stsbadflag/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsbadfunc/0","title":"OpenCV.cv_stsbadfunc/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsbadmask/0","title":"OpenCV.cv_stsbadmask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsbadmemblock/0","title":"OpenCV.cv_stsbadmemblock/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsbadpoint/0","title":"OpenCV.cv_stsbadpoint/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsbadsize/0","title":"OpenCV.cv_stsbadsize/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsdivbyzero/0","title":"OpenCV.cv_stsdivbyzero/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stserror/0","title":"OpenCV.cv_stserror/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsfilteroffseterr/0","title":"OpenCV.cv_stsfilteroffseterr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsfilterstructcontenterr/0","title":"OpenCV.cv_stsfilterstructcontenterr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsinplacenotsupported/0","title":"OpenCV.cv_stsinplacenotsupported/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsinternal/0","title":"OpenCV.cv_stsinternal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stskernelstructcontenterr/0","title":"OpenCV.cv_stskernelstructcontenterr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsnoconv/0","title":"OpenCV.cv_stsnoconv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsnomem/0","title":"OpenCV.cv_stsnomem/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsnotimplemented/0","title":"OpenCV.cv_stsnotimplemented/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsnullptr/0","title":"OpenCV.cv_stsnullptr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsobjectnotfound/0","title":"OpenCV.cv_stsobjectnotfound/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsok/0","title":"OpenCV.cv_stsok/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsoutofrange/0","title":"OpenCV.cv_stsoutofrange/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsparseerror/0","title":"OpenCV.cv_stsparseerror/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsunmatchedformats/0","title":"OpenCV.cv_stsunmatchedformats/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsunmatchedsizes/0","title":"OpenCV.cv_stsunmatchedsizes/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsunsupportedformat/0","title":"OpenCV.cv_stsunsupportedformat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_stsveclengtherr/0","title":"OpenCV.cv_stsveclengtherr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_symmetric_grid/0","title":"OpenCV.cv_symmetric_grid/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_temp_copied_umat/0","title":"OpenCV.cv_temp_copied_umat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_temp_umat/0","title":"OpenCV.cv_temp_umat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_test_custom/0","title":"OpenCV.cv_test_custom/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_test_eq/0","title":"OpenCV.cv_test_eq/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_test_error/0","title":"OpenCV.cv_test_error/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_test_ge/0","title":"OpenCV.cv_test_ge/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_test_gt/0","title":"OpenCV.cv_test_gt/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_test_le/0","title":"OpenCV.cv_test_le/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_test_lt/0","title":"OpenCV.cv_test_lt/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_test_ne/0","title":"OpenCV.cv_test_ne/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_texture2d_none/0","title":"OpenCV.cv_texture2d_none/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_thresh_binary/0","title":"OpenCV.cv_thresh_binary/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_thresh_binary_inv/0","title":"OpenCV.cv_thresh_binary_inv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_thresh_mask/0","title":"OpenCV.cv_thresh_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_thresh_otsu/0","title":"OpenCV.cv_thresh_otsu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_thresh_tozero/0","title":"OpenCV.cv_thresh_tozero/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_thresh_tozero_inv/0","title":"OpenCV.cv_thresh_tozero_inv/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_thresh_triangle/0","title":"OpenCV.cv_thresh_triangle/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_thresh_trunc/0","title":"OpenCV.cv_thresh_trunc/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_threshold/0","title":"OpenCV.cv_threshold/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_tm_ccoeff/0","title":"OpenCV.cv_tm_ccoeff/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_tm_ccoeff_normed/0","title":"OpenCV.cv_tm_ccoeff_normed/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_tm_ccorr/0","title":"OpenCV.cv_tm_ccorr/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_tm_ccorr_normed/0","title":"OpenCV.cv_tm_ccorr_normed/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_tm_sqdiff/0","title":"OpenCV.cv_tm_sqdiff/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_tm_sqdiff_normed/0","title":"OpenCV.cv_tm_sqdiff_normed/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_train_error/0","title":"OpenCV.cv_train_error/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_triangle_fan/0","title":"OpenCV.cv_triangle_fan/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_triangle_strip/0","title":"OpenCV.cv_triangle_strip/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_triangles/0","title":"OpenCV.cv_triangles/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_type_5_8/0","title":"OpenCV.cv_type_5_8/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_type_7_12/0","title":"OpenCV.cv_type_7_12/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_type_9_16/0","title":"OpenCV.cv_type_9_16/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_type_accelerator/0","title":"OpenCV.cv_type_accelerator/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_type_all/0","title":"OpenCV.cv_type_all/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_type_cpu/0","title":"OpenCV.cv_type_cpu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_type_default/0","title":"OpenCV.cv_type_default/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_type_dgpu/0","title":"OpenCV.cv_type_dgpu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_type_gpu/0","title":"OpenCV.cv_type_gpu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_type_igpu/0","title":"OpenCV.cv_type_igpu/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_type_mask/0","title":"OpenCV.cv_type_mask/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_uchar/0","title":"OpenCV.cv_uchar/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_uint64/0","title":"OpenCV.cv_uint64/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_umat/0","title":"OpenCV.cv_umat/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_umat_usage_flags_32bit/0","title":"OpenCV.cv_umat_usage_flags_32bit/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_undefined/0","title":"OpenCV.cv_undefined/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_uniform/0","title":"OpenCV.cv_uniform/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_unknown_vendor/0","title":"OpenCV.cv_unknown_vendor/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_unsigned_int/0","title":"OpenCV.cv_unsigned_int/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_update_model/0","title":"OpenCV.cv_update_model/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_update_weights/0","title":"OpenCV.cv_update_weights/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_usac_accurate/0","title":"OpenCV.cv_usac_accurate/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_usac_default/0","title":"OpenCV.cv_usac_default/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_usac_fast/0","title":"OpenCV.cv_usac_fast/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_usac_fm_8pts/0","title":"OpenCV.cv_usac_fm_8pts/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_usac_magsac/0","title":"OpenCV.cv_usac_magsac/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_usac_parallel/0","title":"OpenCV.cv_usac_parallel/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_usac_prosac/0","title":"OpenCV.cv_usac_prosac/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_usage_allocate_device_memory/0","title":"OpenCV.cv_usage_allocate_device_memory/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_usage_allocate_host_memory/0","title":"OpenCV.cv_usage_allocate_host_memory/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_usage_allocate_shared_memory/0","title":"OpenCV.cv_usage_allocate_shared_memory/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_usage_default/0","title":"OpenCV.cv_usage_default/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_use_avg/0","title":"OpenCV.cv_use_avg/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_user_allocated/0","title":"OpenCV.cv_user_allocated/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_value_expected/0","title":"OpenCV.cv_value_expected/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_var_categorical/0","title":"OpenCV.cv_var_categorical/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_var_numerical/0","title":"OpenCV.cv_var_numerical/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_var_ordered/0","title":"OpenCV.cv_var_ordered/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_vendor_amd/0","title":"OpenCV.cv_vendor_amd/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_vendor_intel/0","title":"OpenCV.cv_vendor_intel/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_vendor_nvidia/0","title":"OpenCV.cv_vendor_nvidia/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_video_acceleration_any/0","title":"OpenCV.cv_video_acceleration_any/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_video_acceleration_d3d11/0","title":"OpenCV.cv_video_acceleration_d3d11/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_video_acceleration_mfx/0","title":"OpenCV.cv_video_acceleration_mfx/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_video_acceleration_none/0","title":"OpenCV.cv_video_acceleration_none/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_video_acceleration_vaapi/0","title":"OpenCV.cv_video_acceleration_vaapi/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_videowriter_prop_depth/0","title":"OpenCV.cv_videowriter_prop_depth/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_videowriter_prop_framebytes/0","title":"OpenCV.cv_videowriter_prop_framebytes/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_videowriter_prop_hw_acceleration/0","title":"OpenCV.cv_videowriter_prop_hw_acceleration/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_videowriter_prop_hw_acceleration_use_opencl/0","title":"OpenCV.cv_videowriter_prop_hw_acceleration_use_opencl/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_videowriter_prop_hw_device/0","title":"OpenCV.cv_videowriter_prop_hw_device/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_videowriter_prop_is_color/0","title":"OpenCV.cv_videowriter_prop_is_color/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_videowriter_prop_nstripes/0","title":"OpenCV.cv_videowriter_prop_nstripes/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_videowriter_prop_quality/0","title":"OpenCV.cv_videowriter_prop_quality/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_voronoi_seam/0","title":"OpenCV.cv_voronoi_seam/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_warp_fill_outliers/0","title":"OpenCV.cv_warp_fill_outliers/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_warp_inverse_map/0","title":"OpenCV.cv_warp_inverse_map/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_warp_polar_linear/0","title":"OpenCV.cv_warp_polar_linear/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_warp_polar_log/0","title":"OpenCV.cv_warp_polar_log/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_warp_shuffle_functions/0","title":"OpenCV.cv_warp_shuffle_functions/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_wave_correct_auto/0","title":"OpenCV.cv_wave_correct_auto/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_wave_correct_horiz/0","title":"OpenCV.cv_wave_correct_horiz/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_wave_correct_vert/0","title":"OpenCV.cv_wave_correct_vert/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_window_autosize/0","title":"OpenCV.cv_window_autosize/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_window_freeratio/0","title":"OpenCV.cv_window_freeratio/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_window_fullscreen/0","title":"OpenCV.cv_window_fullscreen/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_window_gui_expanded/0","title":"OpenCV.cv_window_gui_expanded/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_window_gui_normal/0","title":"OpenCV.cv_window_gui_normal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_window_keepratio/0","title":"OpenCV.cv_window_keepratio/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_window_normal/0","title":"OpenCV.cv_window_normal/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_window_opengl/0","title":"OpenCV.cv_window_opengl/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_wnd_prop_aspect_ratio/0","title":"OpenCV.cv_wnd_prop_aspect_ratio/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_wnd_prop_autosize/0","title":"OpenCV.cv_wnd_prop_autosize/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_wnd_prop_fullscreen/0","title":"OpenCV.cv_wnd_prop_fullscreen/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_wnd_prop_opengl/0","title":"OpenCV.cv_wnd_prop_opengl/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_wnd_prop_topmost/0","title":"OpenCV.cv_wnd_prop_topmost/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_wnd_prop_visible/0","title":"OpenCV.cv_wnd_prop_visible/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_wnd_prop_vsync/0","title":"OpenCV.cv_wnd_prop_vsync/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_write/0","title":"OpenCV.cv_write/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_write_base64/0","title":"OpenCV.cv_write_base64/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_write_combined/0","title":"OpenCV.cv_write_combined/0","type":"function"},{"doc":"","ref":"OpenCV.html#cv_write_only/0","title":"OpenCV.cv_write_only/0","type":"function"},{"doc":"","ref":"OpenCV.html#cvtcolor/2","title":"OpenCV.cvtcolor/2","type":"function"},{"doc":"Converts an image from one color space to another. The function converts an input image from one color space to another. In case of a transformation to-from RGB color space, the order of the channels should be specified explicitly (RGB or BGR). Note that the default color format in OpenCV is often referred to as RGB but it is actually BGR (the bytes are reversed). So the first byte in a standard (24-bit) color image will be an 8-bit Blue component, the second byte will be Green, and the third byte will be Red. The fourth, fifth, and sixth bytes would then be the second pixel (Blue, then Green, then Red), and so on. The conventional ranges for R, G, and B channel values are: 0 to 255 for CV_8U images 0 to 65535 for CV_16U images 0 to 1 for CV_32F images In case of linear transformations, the range does not matter. But in case of a non-linear transformation, an input RGB image should be normalized to the proper value range to get the correct results, for example, for RGB \\f$\\rightarrow\\f$ L*u*v* transformation. For example, if you have a 32-bit floating-point image directly converted from an 8-bit image without any scaling, then it will have the 0..255 value range instead of 0..1 assumed by the function. So, before calling #cvtColor , you need first to scale the image down: img * = 1 . / 255 ; cvtColor ( img , img , COLOR_BGR2Luv ) ; If you use #cvtColor with 8-bit images, the conversion will have some information lost. For many applications, this will not be noticeable but it is recommended to use 32-bit images in applications that need the full range of colors or that convert an image before an operation and then convert back. If conversion adds the alpha channel, its value will set to the maximum of corresponding channel range: 255 for CV_8U, 65535 for CV_16U, 1 for CV_32F. src . floating-point. dst . code . dstCn . channels is derived automatically from src and code. @see @ref imgproc_color_conversions dst : UMat dstCn : int Python prototype (for reference): cvtColor ( src , code [ , dst [ , dstCn ] ] ) -&gt; dst","ref":"OpenCV.html#cvtcolor/3","title":"OpenCV.cvtcolor/3","type":"function"},{"doc":"","ref":"OpenCV.html#cvtcolortwoplane/3","title":"OpenCV.cvtcolortwoplane/3","type":"function"},{"doc":"Converts an image from one color space to another where the source image is stored in two planes. This function only supports YUV420 to RGB conversion as of now. src1 . src2 . dst . code . #COLOR_YUV2BGR_NV12 #COLOR_YUV2RGB_NV12 #COLOR_YUV2BGRA_NV12 #COLOR_YUV2RGBA_NV12 #COLOR_YUV2BGR_NV21 #COLOR_YUV2RGB_NV21 #COLOR_YUV2BGRA_NV21 #COLOR_YUV2RGBA_NV21 dst : UMat Python prototype (for reference): cvtColorTwoPlane ( src1 , src2 , code [ , dst ] ) -&gt; dst","ref":"OpenCV.html#cvtcolortwoplane/4","title":"OpenCV.cvtcolortwoplane/4","type":"function"},{"doc":"","ref":"OpenCV.html#dct/1","title":"OpenCV.dct/1","type":"function"},{"doc":"Performs a forward or inverse discrete Cosine transform of 1D or 2D array. The function cv::dct performs a forward or inverse discrete Cosine transform (DCT) of a 1D or 2D floating-point array: Forward Cosine transform of a 1D vector of N elements: \\f[Y = C^{(N)} \\cdot X\\f] where \\f[C^{(N)}_{jk}= \\sqrt{\\alpha_j/N} \\cos \\left ( \\frac{\\pi(2k+1)j}{2N} \\right )\\f] and \\f$\\alpha_0=1\\f$, \\f$\\alpha_j=2\\f$ for j &gt; 0 . Inverse Cosine transform of a 1D vector of N elements: \\f[X = \\left (C^{(N)} \\right )^{-1} \\cdot Y = \\left (C^{(N)} \\right )^T \\cdot Y\\f] (since \\f$C^{(N)}\\f$ is an orthogonal matrix, \\f$C^{(N)} \\cdot \\left(C^{(N)}\\right)^T = I\\f$ ) Forward 2D Cosine transform of M x N matrix: \\f[Y = C^{(N)} \\cdot X \\cdot \\left (C^{(N)} \\right )^T\\f] Inverse 2D Cosine transform of M x N matrix: \\f[X = \\left (C^{(N)} \\right )^T \\cdot X \\cdot C^{(N)}\\f] The function chooses the mode of operation by looking at the flags and size of the input array: If (flags &amp; #DCT_INVERSE) == 0 , the function does a forward 1D or 2D transform. Otherwise, it is an inverse 1D or 2D transform. If (flags &amp; #DCT_ROWS) != 0 , the function performs a 1D transform of each row. If the array is a single column or a single row, the function performs a 1D transform. If none of the above is true, the function performs a 2D transform. Note : Currently dct supports even-size arrays (2, 4, 6 ...). For data analysis and approximation, you can pad the array when necessary. Also, the function performance depends very much, and not monotonically, on the array size (see getOptimalDFTSize ). In the current implementation DCT of a vector of size N is calculated via DFT of a vector of size N/2 . Thus, the optimal DCT size N1 &gt;= N can be calculated as: size_t getOptimalDCTSize ( size_t N ) { return 2 * getOptimalDFTSize ( ( N + 1 ) / 2 ) ; } N1 = getOptimalDCTSize ( N ) ; src . dst . flags . @sa dft , getOptimalDFTSize , idct dst : UMat flags : int Python prototype (for reference): dct ( src [ , dst [ , flags ] ] ) -&gt; dst","ref":"OpenCV.html#dct/2","title":"OpenCV.dct/2","type":"function"},{"doc":"","ref":"OpenCV.html#decolor/1","title":"OpenCV.decolor/1","type":"function"},{"doc":"Transforms a color image to a grayscale image. It is a basic tool in digital printing, stylized black-and-white photograph rendering, and in many single channel image processing applications @cite CL12 . src . grayscale . color_boost . This function is to be applied on color images. grayscale : UMat color_boost : UMat Python prototype (for reference): decolor ( src [ , grayscale [ , color_boost ] ] ) -&gt; grayscale , color_boost","ref":"OpenCV.html#decolor/2","title":"OpenCV.decolor/2","type":"function"},{"doc":"","ref":"OpenCV.html#decomposeessentialmat/1","title":"OpenCV.decomposeessentialmat/1","type":"function"},{"doc":"Decompose an essential matrix to possible rotations and translation. e . r1 . r2 . t . This function decomposes the essential matrix E using svd decomposition @cite HartleyZ00. In general, four possible poses exist for the decomposition of E. They are \\f$[R_1, t]\\f$, \\f$[R_1, -t]\\f$, \\f$[R_2, t]\\f$, \\f$[R_2, -t]\\f$. If E gives the epipolar constraint \\f$[p_2; 1]^T A^{-T} E A^{-1} [p_1; 1] = 0\\f$ between the image points \\f$p_1\\f$ in the first image and \\f$p_2\\f$ in second image, then any of the tuples \\f$[R_1, t]\\f$, \\f$[R_1, -t]\\f$, \\f$[R_2, t]\\f$, \\f$[R_2, -t]\\f$ is a change of basis from the first camera's coordinate system to the second camera's coordinate system. However, by decomposing E, one can only get the direction of the translation. For this reason, the translation t is returned with unit length. r1 : UMat r2 : UMat t : UMat Python prototype (for reference): decomposeEssentialMat ( E [ , R1 [ , R2 [ , t ] ] ] ) -&gt; R1 , R2 , t","ref":"OpenCV.html#decomposeessentialmat/2","title":"OpenCV.decomposeessentialmat/2","type":"function"},{"doc":"","ref":"OpenCV.html#decomposehomographymat/2","title":"OpenCV.decomposehomographymat/2","type":"function"},{"doc":"Decompose a homography matrix to rotation(s), translation(s) and plane normal(s). h . k . rotations . translations . normals . This function extracts relative camera motion between two views of a planar object and returns up to four mathematical solution tuples of rotation, translation, and plane normal. The decomposition of the homography matrix H is described in detail in @cite Malis. If the homography H, induced by the plane, gives the constraint \\f[s_i \\vecthree{x'_i}{y'_i}{1} \\sim H \\vecthree{x_i}{y_i}{1}\\f] on the source image points \\f$p_i\\f$ and the destination image points \\f$p'_i\\f$, then the tuple of rotations[k] and translations[k] is a change of basis from the source camera's coordinate system to the destination camera's coordinate system. However, by decomposing H, one can only get the translation normalized by the (typically unknown) depth of the scene, i.e. its direction but with normalized length. If point correspondences are available, at least two solutions may further be invalidated, by applying positive depth constraint, i.e. all points must be in front of the camera. rotations : vector_UMat translations : vector_UMat normals : vector_UMat Python prototype (for reference): decomposeHomographyMat ( H , K [ , rotations [ , translations [ , normals ] ] ] ) -&gt; retval , rotations , translations , normals","ref":"OpenCV.html#decomposehomographymat/3","title":"OpenCV.decomposehomographymat/3","type":"function"},{"doc":"","ref":"OpenCV.html#decomposeprojectionmatrix/1","title":"OpenCV.decomposeprojectionmatrix/1","type":"function"},{"doc":"Decomposes a projection matrix into a rotation matrix and a camera intrinsic matrix. projMatrix . cameraMatrix . rotMatrix . transVect . rotMatrixX . rotMatrixY . rotMatrixZ . eulerAngles . degrees. The function computes a decomposition of a projection matrix into a calibration and a rotation matrix and the position of a camera. It optionally returns three rotation matrices, one for each axis, and three Euler angles that could be used in OpenGL. Note, there is always more than one sequence of rotations about the three principal axes that results in the same orientation of an object, e.g. see @cite Slabaugh . Returned tree rotation matrices and corresponding three Euler angles are only one of the possible solutions. The function is based on RQDecomp3x3 . cameraMatrix : UMat rotMatrix : UMat transVect : UMat rotMatrixX : UMat rotMatrixY : UMat rotMatrixZ : UMat eulerAngles : UMat Python prototype (for reference): decomposeProjectionMatrix ( projMatrix [ , cameraMatrix [ , rotMatrix [ , transVect [ , rotMatrixX [ , rotMatrixY [ , rotMatrixZ [ , eulerAngles ] ] ] ] ] ] ] ) -&gt; cameraMatrix , rotMatrix , transVect , rotMatrixX , rotMatrixY , rotMatrixZ , eulerAngles","ref":"OpenCV.html#decomposeprojectionmatrix/2","title":"OpenCV.decomposeprojectionmatrix/2","type":"function"},{"doc":"","ref":"OpenCV.html#demosaicing/2","title":"OpenCV.demosaicing/2","type":"function"},{"doc":"main function for all demosaicing processes src . dst . code . dstCn . channels is derived automatically from src and code. The function can do the following transformations: Demosaicing using bilinear interpolation #COLOR_BayerBG2BGR , #COLOR_BayerGB2BGR , #COLOR_BayerRG2BGR , #COLOR_BayerGR2BGR #COLOR_BayerBG2GRAY , #COLOR_BayerGB2GRAY , #COLOR_BayerRG2GRAY , #COLOR_BayerGR2GRAY Demosaicing using Variable Number of Gradients. #COLOR_BayerBG2BGR_VNG , #COLOR_BayerGB2BGR_VNG , #COLOR_BayerRG2BGR_VNG , #COLOR_BayerGR2BGR_VNG Edge-Aware Demosaicing. #COLOR_BayerBG2BGR_EA , #COLOR_BayerGB2BGR_EA , #COLOR_BayerRG2BGR_EA , #COLOR_BayerGR2BGR_EA Demosaicing with alpha channel #COLOR_BayerBG2BGRA , #COLOR_BayerGB2BGRA , #COLOR_BayerRG2BGRA , #COLOR_BayerGR2BGRA @sa cvtColor dst : UMat dstCn : int Python prototype (for reference): demosaicing ( src , code [ , dst [ , dstCn ] ] ) -&gt; dst","ref":"OpenCV.html#demosaicing/3","title":"OpenCV.demosaicing/3","type":"function"},{"doc":"","ref":"OpenCV.html#denoise_tvl1/2","title":"OpenCV.denoise_tvl1/2","type":"function"},{"doc":"Primal-dual algorithm is an algorithm for solving special types of variational problems (that is, finding a function to minimize some functional). As the image denoising, in particular, may be seen as the variational problem, primal-dual algorithm then can be used to perform denoising and this is exactly what is implemented. It should be noted, that this implementation was taken from the July 2013 blog entry @cite MA13 , which also contained (slightly more general) ready-to-use source code on Python. Subsequently, that code was rewritten on C++ with the usage of openCV by Vadim Pisarevsky at the end of July 2013 and finally it was slightly adapted by later authors. Although the thorough discussion and justification of the algorithm involved may be found in @cite ChambolleEtAl, it might make sense to skim over it here, following @cite MA13 . To begin with, we consider the 1-byte gray-level images as the functions from the rectangular domain of pixels (it may be seen as set \\f$\\left\\{(x,y)\\in\\mathbb{N}\\times\\mathbb{N}\\mid 1\\leq x\\leq n,\\;1\\leq y\\leq m\\right\\}\\f$ for some \\f$m,\\;n\\in\\mathbb{N}\\f$) into \\f$\\{0,1,\\dots,255\\}\\f$. We shall denote the noised images as \\f$f_i\\f$ and with this view, given some image \\f$x\\f$ of the same size, we may measure how bad it is by the formula \\f[\\left\\|\\left\\|\\nabla x\\right\\|\\right\\| + \\lambda\\sum_i\\left\\|\\left\\|x-f_i\\right\\|\\right\\|\\f] \\f$\\|\\|\\cdot\\|\\|\\f$ here denotes \\f$L_2\\f$-norm and as you see, the first addend states that we want our image to be smooth (ideally, having zero gradient, thus being constant) and the second states that we want our result to be close to the observations we've got. If we treat \\f$x\\f$ as a function, this is exactly the functional what we seek to minimize and here the Primal-Dual algorithm comes into play. observations . be restored. result . storage space, as it will be automatically allocated, if necessary. lambda . (blurred) images are treated more favorably than detailed (but maybe more noised) ones. Roughly speaking, as it becomes smaller, the result will be more blur but more sever outliers will be removed. niters . better, but it is hard to quantitatively refine this statement, so just use the default and increase it if the results are poor. lambda_ : double niters : int Python prototype (for reference): denoise_TVL1 ( observations , result [ , lambda_ [ , niters ] ] ) -&gt; None","ref":"OpenCV.html#denoise_tvl1/3","title":"OpenCV.denoise_tvl1/3","type":"function"},{"doc":"","ref":"OpenCV.html#descriptormatcher_create/1","title":"OpenCV.descriptormatcher_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_bestof2nearestmatcher_create/0","title":"OpenCV.detail_bestof2nearestmatcher_create/0","type":"function"},{"doc":"try_use_gpu : bool match_conf : float num_matches_thresh1 : int num_matches_thresh2 : int Python prototype (for reference): BestOf2NearestMatcher_create ( [ , try_use_gpu [ , match_conf [ , num_matches_thresh1 [ , num_matches_thresh2 ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#detail_bestof2nearestmatcher_create/1","title":"OpenCV.detail_bestof2nearestmatcher_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_blender_createdefault/1","title":"OpenCV.detail_blender_createdefault/1","type":"function"},{"doc":"try_gpu : bool Python prototype (for reference): Blender_createDefault ( type [ , try_gpu ] ) -&gt; retval","ref":"OpenCV.html#detail_blender_createdefault/2","title":"OpenCV.detail_blender_createdefault/2","type":"function"},{"doc":"","ref":"OpenCV.html#detail_calibraterotatingcamera/1","title":"OpenCV.detail_calibraterotatingcamera/1","type":"function"},{"doc":"Estimates focal lengths for each given camera. features . pairwise_matches . focals . k : Mat Python prototype (for reference): calibrateRotatingCamera ( Hs [ , K ] ) -&gt; retval , K","ref":"OpenCV.html#detail_calibraterotatingcamera/2","title":"OpenCV.detail_calibraterotatingcamera/2","type":"function"},{"doc":"","ref":"OpenCV.html#detail_computeimagefeatures/2","title":"OpenCV.detail_computeimagefeatures/2","type":"function"},{"doc":"featuresFinder . images . features . masks . masks : vector_UMat Python prototype (for reference): computeImageFeatures ( featuresFinder , images [ , masks ] ) -&gt; features","ref":"OpenCV.html#detail_computeimagefeatures/3","title":"OpenCV.detail_computeimagefeatures/3","type":"function"},{"doc":"","ref":"OpenCV.html#detail_computeimagefeatures2/2","title":"OpenCV.detail_computeimagefeatures2/2","type":"function"},{"doc":"featuresFinder . image . features . mask . mask : UMat Python prototype (for reference): computeImageFeatures2 ( featuresFinder , image [ , mask ] ) -&gt; features","ref":"OpenCV.html#detail_computeimagefeatures2/3","title":"OpenCV.detail_computeimagefeatures2/3","type":"function"},{"doc":"","ref":"OpenCV.html#detail_createlaplacepyr/3","title":"OpenCV.detail_createlaplacepyr/3","type":"function"},{"doc":"","ref":"OpenCV.html#detail_createlaplacepyrgpu/3","title":"OpenCV.detail_createlaplacepyrgpu/3","type":"function"},{"doc":"","ref":"OpenCV.html#detail_createweightmap/3","title":"OpenCV.detail_createweightmap/3","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_affinebasedestimator_affinebasedestimator/0","title":"OpenCV.detail_detail_affinebasedestimator_affinebasedestimator/0","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_affinebestof2nearestmatcher_affinebestof2nearestmatcher/0","title":"OpenCV.detail_detail_affinebestof2nearestmatcher_affinebestof2nearestmatcher/0","type":"function"},{"doc":"Constructs a &quot;best of 2 nearest&quot; matcher that expects affine transformation between images full_affine . transformation with 4 degrees of freedom using only rotation, translation and uniform scaling try_use_gpu . match_conf . num_matches_thresh1 . estimation used in the inliers classification step @sa cv::estimateAffine2D cv::estimateAffinePartial2D full_affine : bool try_use_gpu : bool match_conf : float num_matches_thresh1 : int Python prototype (for reference): AffineBestOf2NearestMatcher ( [ , full_affine [ , try_use_gpu [ , match_conf [ , num_matches_thresh1 ] ] ] ] ) -&gt; &lt; detail_AffineBestOf2NearestMatcher object &gt;","ref":"OpenCV.html#detail_detail_affinebestof2nearestmatcher_affinebestof2nearestmatcher/1","title":"OpenCV.detail_detail_affinebestof2nearestmatcher_affinebestof2nearestmatcher/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_bestof2nearestmatcher_bestof2nearestmatcher/0","title":"OpenCV.detail_detail_bestof2nearestmatcher_bestof2nearestmatcher/0","type":"function"},{"doc":"Constructs a &quot;best of 2 nearest&quot; matcher. try_use_gpu . match_conf . num_matches_thresh1 . estimation used in the inliers classification step num_matches_thresh2 . re-estimation on inliers try_use_gpu : bool match_conf : float num_matches_thresh1 : int num_matches_thresh2 : int Python prototype (for reference): BestOf2NearestMatcher ( [ , try_use_gpu [ , match_conf [ , num_matches_thresh1 [ , num_matches_thresh2 ] ] ] ] ) -&gt; &lt; detail_BestOf2NearestMatcher object &gt;","ref":"OpenCV.html#detail_detail_bestof2nearestmatcher_bestof2nearestmatcher/1","title":"OpenCV.detail_detail_bestof2nearestmatcher_bestof2nearestmatcher/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_bestof2nearestrangematcher_bestof2nearestrangematcher/0","title":"OpenCV.detail_detail_bestof2nearestrangematcher_bestof2nearestrangematcher/0","type":"function"},{"doc":"range_width : int try_use_gpu : bool match_conf : float num_matches_thresh1 : int num_matches_thresh2 : int Python prototype (for reference): BestOf2NearestRangeMatcher ( [ , range_width [ , try_use_gpu [ , match_conf [ , num_matches_thresh1 [ , num_matches_thresh2 ] ] ] ] ] ) -&gt; &lt; detail_BestOf2NearestRangeMatcher object &gt;","ref":"OpenCV.html#detail_detail_bestof2nearestrangematcher_bestof2nearestrangematcher/1","title":"OpenCV.detail_detail_bestof2nearestrangematcher_bestof2nearestrangematcher/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_blockschannelscompensator_blockschannelscompensator/0","title":"OpenCV.detail_detail_blockschannelscompensator_blockschannelscompensator/0","type":"function"},{"doc":"bl_width : int bl_height : int nr_feeds : int Python prototype (for reference): BlocksChannelsCompensator ( [ , bl_width [ , bl_height [ , nr_feeds ] ] ] ) -&gt; &lt; detail_BlocksChannelsCompensator object &gt;","ref":"OpenCV.html#detail_detail_blockschannelscompensator_blockschannelscompensator/1","title":"OpenCV.detail_detail_blockschannelscompensator_blockschannelscompensator/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_blocksgaincompensator_blocksgaincompensator/0","title":"OpenCV.detail_detail_blocksgaincompensator_blocksgaincompensator/0","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_blocksgaincompensator_blocksgaincompensator/1","title":"OpenCV.detail_detail_blocksgaincompensator_blocksgaincompensator/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_blocksgaincompensator_blocksgaincompensator/3","title":"OpenCV.detail_detail_blocksgaincompensator_blocksgaincompensator/3","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_bundleadjusteraffine_bundleadjusteraffine/0","title":"OpenCV.detail_detail_bundleadjusteraffine_bundleadjusteraffine/0","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_bundleadjusteraffinepartial_bundleadjusteraffinepartial/0","title":"OpenCV.detail_detail_bundleadjusteraffinepartial_bundleadjusteraffinepartial/0","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_bundleadjusterray_bundleadjusterray/0","title":"OpenCV.detail_detail_bundleadjusterray_bundleadjusterray/0","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_bundleadjusterreproj_bundleadjusterreproj/0","title":"OpenCV.detail_detail_bundleadjusterreproj_bundleadjusterreproj/0","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_channelscompensator_channelscompensator/0","title":"OpenCV.detail_detail_channelscompensator_channelscompensator/0","type":"function"},{"doc":"nr_feeds : int Python prototype (for reference): ChannelsCompensator ( [ , nr_feeds ] ) -&gt; &lt; detail_ChannelsCompensator object &gt;","ref":"OpenCV.html#detail_detail_channelscompensator_channelscompensator/1","title":"OpenCV.detail_detail_channelscompensator_channelscompensator/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_dpseamfinder_dpseamfinder/1","title":"OpenCV.detail_detail_dpseamfinder_dpseamfinder/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_featherblender_featherblender/0","title":"OpenCV.detail_detail_featherblender_featherblender/0","type":"function"},{"doc":"sharpness : float Python prototype (for reference): FeatherBlender ( [ , sharpness ] ) -&gt; &lt; detail_FeatherBlender object &gt;","ref":"OpenCV.html#detail_detail_featherblender_featherblender/1","title":"OpenCV.detail_detail_featherblender_featherblender/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_gaincompensator_gaincompensator/0","title":"OpenCV.detail_detail_gaincompensator_gaincompensator/0","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_gaincompensator_gaincompensator/1","title":"OpenCV.detail_detail_gaincompensator_gaincompensator/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_graphcutseamfinder_graphcutseamfinder/1","title":"OpenCV.detail_detail_graphcutseamfinder_graphcutseamfinder/1","type":"function"},{"doc":"terminal_cost : float bad_region_penalty : float Python prototype (for reference): GraphCutSeamFinder ( cost_type [ , terminal_cost [ , bad_region_penalty ] ] ) -&gt; &lt; detail_GraphCutSeamFinder object &gt;","ref":"OpenCV.html#detail_detail_graphcutseamfinder_graphcutseamfinder/2","title":"OpenCV.detail_detail_graphcutseamfinder_graphcutseamfinder/2","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_homographybasedestimator_homographybasedestimator/0","title":"OpenCV.detail_detail_homographybasedestimator_homographybasedestimator/0","type":"function"},{"doc":"is_focals_estimated : bool Python prototype (for reference): HomographyBasedEstimator ( [ , is_focals_estimated ] ) -&gt; &lt; detail_HomographyBasedEstimator object &gt;","ref":"OpenCV.html#detail_detail_homographybasedestimator_homographybasedestimator/1","title":"OpenCV.detail_detail_homographybasedestimator_homographybasedestimator/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_multibandblender_multibandblender/0","title":"OpenCV.detail_detail_multibandblender_multibandblender/0","type":"function"},{"doc":"try_gpu : int num_bands : int weight_type : int Python prototype (for reference): MultiBandBlender ( [ , try_gpu [ , num_bands [ , weight_type ] ] ] ) -&gt; &lt; detail_MultiBandBlender object &gt;","ref":"OpenCV.html#detail_detail_multibandblender_multibandblender/1","title":"OpenCV.detail_detail_multibandblender_multibandblender/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_detail_nobundleadjuster_nobundleadjuster/0","title":"OpenCV.detail_detail_nobundleadjuster_nobundleadjuster/0","type":"function"},{"doc":"","ref":"OpenCV.html#detail_exposurecompensator_createdefault/1","title":"OpenCV.detail_exposurecompensator_createdefault/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_focalsfromhomography/5","title":"OpenCV.detail_focalsfromhomography/5","type":"function"},{"doc":"","ref":"OpenCV.html#detail_leavebiggestcomponent/3","title":"OpenCV.detail_leavebiggestcomponent/3","type":"function"},{"doc":"","ref":"OpenCV.html#detail_matchesgraphasstring/3","title":"OpenCV.detail_matchesgraphasstring/3","type":"function"},{"doc":"","ref":"OpenCV.html#detail_normalizeusingweightmap/2","title":"OpenCV.detail_normalizeusingweightmap/2","type":"function"},{"doc":"","ref":"OpenCV.html#detail_overlaproi/5","title":"OpenCV.detail_overlaproi/5","type":"function"},{"doc":"","ref":"OpenCV.html#detail_restoreimagefromlaplacepyr/1","title":"OpenCV.detail_restoreimagefromlaplacepyr/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_restoreimagefromlaplacepyrgpu/1","title":"OpenCV.detail_restoreimagefromlaplacepyrgpu/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_resultroi/2","title":"OpenCV.detail_resultroi/2","type":"function"},{"doc":"","ref":"OpenCV.html#detail_resultroiintersection/2","title":"OpenCV.detail_resultroiintersection/2","type":"function"},{"doc":"","ref":"OpenCV.html#detail_resulttl/1","title":"OpenCV.detail_resulttl/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_seamfinder_createdefault/1","title":"OpenCV.detail_seamfinder_createdefault/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_selectrandomsubset/3","title":"OpenCV.detail_selectrandomsubset/3","type":"function"},{"doc":"","ref":"OpenCV.html#detail_stitchingloglevel/0","title":"OpenCV.detail_stitchingloglevel/0","type":"function"},{"doc":"","ref":"OpenCV.html#detail_timelapser_createdefault/1","title":"OpenCV.detail_timelapser_createdefault/1","type":"function"},{"doc":"","ref":"OpenCV.html#detail_wavecorrect/2","title":"OpenCV.detail_wavecorrect/2","type":"function"},{"doc":"","ref":"OpenCV.html#detailenhance/1","title":"OpenCV.detailenhance/1","type":"function"},{"doc":"This filter enhances the details of a particular image. src . dst . sigma_s . sigma_r . dst : UMat sigma_s : float sigma_r : float Python prototype (for reference): detailEnhance ( src [ , dst [ , sigma_s [ , sigma_r ] ] ] ) -&gt; dst","ref":"OpenCV.html#detailenhance/2","title":"OpenCV.detailenhance/2","type":"function"},{"doc":"","ref":"OpenCV.html#determinant/1","title":"OpenCV.determinant/1","type":"function"},{"doc":"","ref":"OpenCV.html#dft/1","title":"OpenCV.dft/1","type":"function"},{"doc":"Performs a forward or inverse Discrete Fourier transform of a 1D or 2D floating-point array. The function cv::dft performs one of the following: Forward the Fourier transform of a 1D vector of N elements: \\f[Y = F^{(N)} \\cdot X,\\f] where \\f$F^{(N)}_{jk}=\\exp(-2\\pi i j k/N)\\f$ and \\f$i=\\sqrt{-1}\\f$ Inverse the Fourier transform of a 1D vector of N elements: \\f[\\begin{array}{l} X'= \\left (F^{(N)} \\right )^{-1} \\cdot Y = \\left (F^{(N)} \\right )^* \\cdot y \\\\ X = (1/N) \\cdot X, \\end{array}\\f] where \\f$F^*=\\left(\\textrm{Re}(F^{(N)})-\\textrm{Im}(F^{(N)})\\right)^T\\f$ Forward the 2D Fourier transform of a M x N matrix: \\f[Y = F^{(M)} \\cdot X \\cdot F^{(N)}\\f] Inverse the 2D Fourier transform of a M x N matrix: \\f[\\begin{array}{l} X'= \\left (F^{(M)} \\right )^* \\cdot Y \\cdot \\left (F^{(N)} \\right )^* \\\\ X = \\frac{1}{M \\cdot N} \\cdot X' \\end{array}\\f] In case of real (single-channel) data, the output spectrum of the forward Fourier transform or input spectrum of the inverse Fourier transform can be represented in a packed format called CCS (complex-conjugate-symmetrical). It was borrowed from IPL (Intel* Image Processing Library). Here is how 2D CCS spectrum looks: \\f[\\begin{bmatrix} Re Y_{0,0} &amp; Re Y_{0,1} &amp; Im Y_{0,1} &amp; Re Y_{0,2} &amp; Im Y_{0,2} &amp; \\cdots &amp; Re Y_{0,N/2-1} &amp; Im Y_{0,N/2-1} &amp; Re Y_{0,N/2} \\\\ Re Y_{1,0} &amp; Re Y_{1,1} &amp; Im Y_{1,1} &amp; Re Y_{1,2} &amp; Im Y_{1,2} &amp; \\cdots &amp; Re Y_{1,N/2-1} &amp; Im Y_{1,N/2-1} &amp; Re Y_{1,N/2} \\\\ Im Y_{1,0} &amp; Re Y_{2,1} &amp; Im Y_{2,1} &amp; Re Y_{2,2} &amp; Im Y_{2,2} &amp; \\cdots &amp; Re Y_{2,N/2-1} &amp; Im Y_{2,N/2-1} &amp; Im Y_{1,N/2} \\\\ \\hdotsfor{9} \\\\ Re Y_{M/2-1,0} &amp; Re Y_{M-3,1} &amp; Im Y_{M-3,1} &amp; \\hdotsfor{3} &amp; Re Y_{M-3,N/2-1} &amp; Im Y_{M-3,N/2-1}&amp; Re Y_{M/2-1,N/2} \\\\ Im Y_{M/2-1,0} &amp; Re Y_{M-2,1} &amp; Im Y_{M-2,1} &amp; \\hdotsfor{3} &amp; Re Y_{M-2,N/2-1} &amp; Im Y_{M-2,N/2-1}&amp; Im Y_{M/2-1,N/2} \\\\ Re Y_{M/2,0} &amp; Re Y_{M-1,1} &amp; Im Y_{M-1,1} &amp; \\hdotsfor{3} &amp; Re Y_{M-1,N/2-1} &amp; Im Y_{M-1,N/2-1}&amp; Re Y_{M/2,N/2} \\end{bmatrix}\\f] In case of 1D transform of a real vector, the output looks like the first row of the matrix above. So, the function chooses an operation mode depending on the flags and size of the input array: If #DFT_ROWS is set or the input array has a single row or single column, the function performs a 1D forward or inverse transform of each row of a matrix when #DFT_ROWS is set. Otherwise, it performs a 2D transform. If the input array is real and #DFT_INVERSE is not set, the function performs a forward 1D or 2D transform: When #DFT_COMPLEX_OUTPUT is set, the output is a complex matrix of the same size as input. When #DFT_COMPLEX_OUTPUT is not set, the output is a real matrix of the same size as input. In case of 2D transform, it uses the packed format as shown above. In case of a single 1D transform, it looks like the first row of the matrix above. In case of multiple 1D transforms (when using the #DFT_ROWS flag), each row of the output matrix looks like the first row of the matrix above. If the input array is complex and either #DFT_INVERSE or #DFT_REAL_OUTPUT are not set, the output is a complex array of the same size as input. The function performs a forward or inverse 1D or 2D transform of the whole input array or each row of the input array independently, depending on the flags DFT_INVERSE and DFT_ROWS. When #DFT_INVERSE is set and the input array is real, or it is complex but #DFT_REAL_OUTPUT is set, the output is a real array of the same size as input. The function performs a 1D or 2D inverse transformation of the whole input array or each individual row, depending on the flags #DFT_INVERSE and #DFT_ROWS. If #DFT_SCALE is set, the scaling is done after the transformation. Unlike dct , the function supports arrays of arbitrary size. But only those arrays are processed efficiently, whose sizes can be factorized in a product of small prime numbers (2, 3, and 5 in the current implementation). Such an efficient DFT size can be calculated using the getOptimalDFTSize method. The sample below illustrates how to calculate a DFT-based convolution of two 2D real arrays: void convolveDFT ( InputArray A , InputArray B , OutputArray C ) { // reallocate the output array if needed C . create ( abs ( A . rows - B . rows ) + 1 , abs ( A . cols - B . cols ) + 1 , A . type ( ) ) ; Size dftSize ; // calculate the size of DFT transform dftSize . width = getOptimalDFTSize ( A . cols + B . cols - 1 ) ; dftSize . height = getOptimalDFTSize ( A . rows + B . rows - 1 ) ; // allocate temporary buffers and initialize them with 0 &#39; s Mat tempA ( dftSize , A . type ( ) , Scalar :: all ( 0 ) ) ; Mat tempB ( dftSize , B . type ( ) , Scalar :: all ( 0 ) ) ; // copy A and B to the top - left corners of tempA and tempB , respectively Mat roiA ( tempA , Rect ( 0 , 0 , A . cols , A . rows ) ) ; A . copyTo ( roiA ) ; Mat roiB ( tempB , Rect ( 0 , 0 , B . cols , B . rows ) ) ; B . copyTo ( roiB ) ; // now transform the padded A &amp; B in - place ; // use &quot;nonzeroRows&quot; hint for faster processing dft ( tempA , tempA , 0 , A . rows ) ; dft ( tempB , tempB , 0 , B . rows ) ; // multiply the spectrums ; // the function handles packed spectrum representations well mulSpectrums ( tempA , tempB , tempA ) ; // transform the product back from the frequency domain . // Even though all the result rows will be non - zero , // you need only the first C . rows of them , and thus you // pass nonzeroRows == C . rows dft ( tempA , tempA , DFT_INVERSE + DFT_SCALE , C . rows ) ; // now copy the result back to C . tempA ( Rect ( 0 , 0 , C . cols , C . rows ) ) . copyTo ( C ) ; // all the temporary buffers will be deallocated automatically } To optimize this sample, consider the following approaches: Since nonzeroRows != 0 is passed to the forward transform calls and since A and B are copied to the top-left corners of tempA and tempB, respectively, it is not necessary to clear the whole tempA and tempB. It is only necessary to clear the tempA.cols - A.cols ( tempB.cols - B.cols) rightmost columns of the matrices. This DFT-based convolution does not have to be applied to the whole big arrays, especially if B is significantly smaller than A or vice versa. Instead, you can calculate convolution by parts. To do this, you need to split the output array C into multiple tiles. For each tile, estimate which parts of A and B are required to calculate convolution in this tile. If the tiles in C are too small, the speed will decrease a lot because of repeated work. In the ultimate case, when each tile in C is a single pixel, the algorithm becomes equivalent to the naive convolution algorithm. If the tiles are too big, the temporary arrays tempA and tempB become too big and there is also a slowdown because of bad cache locality. So, there is an optimal tile size somewhere in the middle. If different tiles in C can be calculated in parallel and, thus, the convolution is done by parts, the loop can be threaded. All of the above improvements have been implemented in #matchTemplate and #filter2D . Therefore, by using them, you can get the performance even better than with the above theoretically optimal implementation. Though, those two functions actually calculate cross-correlation, not convolution, so you need to &quot;flip&quot; the second convolution operand B vertically and horizontally using flip . Note : An example using the discrete fourier transform can be found at opencv_source_code/samples/cpp/dft.cpp (Python) An example using the dft functionality to perform Wiener deconvolution can be found at opencv_source/samples/python/deconvolution.py (Python) An example rearranging the quadrants of a Fourier image can be found at opencv_source/samples/python/dft.py src . dst . flags . nonzeroRows . nonzeroRows rows of the input array (#DFT_INVERSE is not set) or only the first nonzeroRows of the output array (#DFT_INVERSE is set) contain non-zeros, thus, the function can handle the rest of the rows more efficiently and save some time; this technique is very useful for calculating array cross-correlation or convolution using DFT. @sa dct , getOptimalDFTSize , mulSpectrums, filter2D , matchTemplate , flip , cartToPolar , magnitude , phase dst : UMat flags : int nonzeroRows : int Python prototype (for reference): dft ( src [ , dst [ , flags [ , nonzeroRows ] ] ] ) -&gt; dst","ref":"OpenCV.html#dft/2","title":"OpenCV.dft/2","type":"function"},{"doc":"","ref":"OpenCV.html#dilate/2","title":"OpenCV.dilate/2","type":"function"},{"doc":"Dilates an image by using a specific structuring element. The function dilates the source image using the specified structuring element that determines the shape of a pixel neighborhood over which the maximum is taken: \\f[\\texttt{dst} (x,y) = \\max _{(x',y'): \\, \\texttt{element} (x',y') \\ne0 } \\texttt{src} (x+x',y+y')\\f] The function supports the in-place mode. Dilation can be applied several ( iterations ) times. In case of multi-channel images, each channel is processed independently. src . CV_8U, CV_16U, CV_16S, CV_32F or CV_64F. dst . kernel . structuring element is used. Kernel can be created using #getStructuringElement anchor . anchor is at the element center. iterations . borderType . borderValue . @sa erode, morphologyEx, getStructuringElement dst : UMat anchor : Point iterations : int borderType : int borderValue : Scalar Python prototype (for reference): dilate ( src , kernel [ , dst [ , anchor [ , iterations [ , borderType [ , borderValue ] ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#dilate/3","title":"OpenCV.dilate/3","type":"function"},{"doc":"","ref":"OpenCV.html#disopticalflow_create/0","title":"OpenCV.disopticalflow_create/0","type":"function"},{"doc":"Creates an instance of DISOpticalFlow preset . preset : int Python prototype (for reference): DISOpticalFlow_create ( [ , preset ] ) -&gt; retval","ref":"OpenCV.html#disopticalflow_create/1","title":"OpenCV.disopticalflow_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#displayoverlay/2","title":"OpenCV.displayoverlay/2","type":"function"},{"doc":"Displays a text on a window image as an overlay for a specified duration. The function displayOverlay displays useful information/tips on top of the window for a certain amount of time delayms . The function does not modify the image, displayed in the window, that is, after the specified delay the original content of the window is restored. winname . text . delayms . function is called before the previous overlay text timed out, the timer is restarted and the text is updated. If this value is zero, the text never disappears. delayms : int Python prototype (for reference): displayOverlay ( winname , text [ , delayms ] ) -&gt; None","ref":"OpenCV.html#displayoverlay/3","title":"OpenCV.displayoverlay/3","type":"function"},{"doc":"","ref":"OpenCV.html#displaystatusbar/2","title":"OpenCV.displaystatusbar/2","type":"function"},{"doc":"Displays a text on the window statusbar during the specified period of time. The function displayStatusBar displays useful information/tips on top of the window for a certain amount of time delayms . This information is displayed on the window statusbar (the window must be created with the CV_GUI_EXPANDED flags). winname . text . delayms . the previous text timed out, the timer is restarted and the text is updated. If this value is zero, the text never disappears. delayms : int Python prototype (for reference): displayStatusBar ( winname , text [ , delayms ] ) -&gt; None","ref":"OpenCV.html#displaystatusbar/3","title":"OpenCV.displaystatusbar/3","type":"function"},{"doc":"","ref":"OpenCV.html#distancetransform/3","title":"OpenCV.distancetransform/3","type":"function"},{"doc":"Has overloading in C++ src . dst . single-channel image of the same size as src . distanceType . maskSize . #DIST_L1 or #DIST_C distance type, the parameter is forced to 3 because a \\f$3\\times 3\\f$ mask gives the same result as \\f$5\\times 5\\f$ or any larger aperture. dstType . the first variant of the function and distanceType == #DIST_L1. dst : UMat dstType : int Python prototype (for reference): distanceTransform ( src , distanceType , maskSize [ , dst [ , dstType ] ] ) -&gt; dst","ref":"OpenCV.html#distancetransform/4","title":"OpenCV.distancetransform/4","type":"function"},{"doc":"","ref":"OpenCV.html#distancetransformwithlabels/3","title":"OpenCV.distancetransformwithlabels/3","type":"function"},{"doc":"Calculates the distance to the closest zero pixel for each pixel of the source image. The function cv::distanceTransform calculates the approximate or precise distance from every binary image pixel to the nearest zero pixel. For zero image pixels, the distance will obviously be zero. When maskSize == #DIST_MASK_PRECISE and distanceType == #DIST_L2 , the function runs the algorithm described in @cite Felzenszwalb04 . This algorithm is parallelized with the TBB library. In other cases, the algorithm @cite Borgefors86 is used. This means that for a pixel the function finds the shortest path to the nearest zero pixel consisting of basic shifts: horizontal, vertical, diagonal, or knight's move (the latest is available for a \\f$5\\times 5\\f$ mask). The overall distance is calculated as a sum of these basic distances. Since the distance function should be symmetric, all of the horizontal and vertical shifts must have the same cost (denoted as a ), all the diagonal shifts must have the same cost (denoted as b ), and all knight's moves must have the same cost (denoted as c ). For the #DIST_C and #DIST_L1 types, the distance is calculated precisely, whereas for #DIST_L2 (Euclidean distance) the distance can be calculated only with a relative error (a \\f$5\\times 5\\f$ mask gives more accurate results). For a , b , and c , OpenCV uses the values suggested in the original paper: DIST_L1: a = 1, b = 2 DIST_L2: 3 x 3 : a=0.955, b=1.3693 5 x 5 : a=1, b=1.4, c=2.1969 DIST_C: a = 1, b = 1 Typically, for a fast, coarse distance estimation #DIST_L2, a \\f$3\\times 3\\f$ mask is used. For a more accurate distance estimation #DIST_L2, a \\f$5\\times 5\\f$ mask or the precise algorithm is used. Note that both the precise and the approximate algorithms are linear on the number of pixels. This variant of the function does not only compute the minimum distance for each pixel \\f$(x, y)\\f$ but also identifies the nearest connected component consisting of zero pixels (labelType==#DIST_LABEL_CCOMP) or the nearest zero pixel (labelType==#DIST_LABEL_PIXEL). Index of the component/pixel is stored in labels(x, y) . When labelType==#DIST_LABEL_CCOMP, the function automatically finds connected components of zero pixels in the input image and marks them with distinct labels. When labelType==#DIST_LABEL_PIXEL, the function scans through the input image and marks all the zero pixels with distinct labels. In this mode, the complexity is still linear. That is, the function provides a very fast way to compute the Voronoi diagram for a binary image. Currently, the second variant can use only the approximate distance transform algorithm, i.e. maskSize=#DIST_MASK_PRECISE is not supported yet. src . dst . single-channel image of the same size as src. labels . CV_32SC1 and the same size as src. distanceType . maskSize . #DIST_MASK_PRECISE is not supported by this variant. In case of the #DIST_L1 or #DIST_C distance type, the parameter is forced to 3 because a \\f$3\\times 3\\f$ mask gives the same result as \\f$5\\times 5\\f$ or any larger aperture. labelType . dst : UMat labels : UMat labelType : int Python prototype (for reference): distanceTransformWithLabels ( src , distanceType , maskSize [ , dst [ , labels [ , labelType ] ] ] ) -&gt; dst , labels","ref":"OpenCV.html#distancetransformwithlabels/4","title":"OpenCV.distancetransformwithlabels/4","type":"function"},{"doc":"","ref":"OpenCV.html#divide/2","title":"OpenCV.divide/2","type":"function"},{"doc":"Has overloading in C++ dst : UMat dtype : int Python prototype (for reference): divide ( scale , src2 [ , dst [ , dtype ] ] ) -&gt; dst","ref":"OpenCV.html#divide/3","title":"OpenCV.divide/3","type":"function"},{"doc":"","ref":"OpenCV.html#divspectrums/3","title":"OpenCV.divspectrums/3","type":"function"},{"doc":"Performs the per-element division of the first Fourier spectrum by the second Fourier spectrum. The function cv::divSpectrums performs the per-element division of the first array by the second array. The arrays are CCS-packed or complex matrices that are results of a real or complex Fourier transform. a . b . c . flags . each row of src1 and src2 is an independent 1D Fourier spectrum. If you do not want to use this flag, then simply add a 0 as value. conjB . or not (false). c : UMat conjB : bool Python prototype (for reference): divSpectrums ( a , b , flags [ , c [ , conjB ] ] ) -&gt; c","ref":"OpenCV.html#divspectrums/4","title":"OpenCV.divspectrums/4","type":"function"},{"doc":"","ref":"OpenCV.html#dmatch_dmatch/0","title":"OpenCV.dmatch_dmatch/0","type":"function"},{"doc":"","ref":"OpenCV.html#dmatch_dmatch/3","title":"OpenCV.dmatch_dmatch/3","type":"function"},{"doc":"","ref":"OpenCV.html#dmatch_dmatch/4","title":"OpenCV.dmatch_dmatch/4","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_blobfromimage/1","title":"OpenCV.dnn_blobfromimage/1","type":"function"},{"doc":"Creates 4-dimensional blob from image. Optionally resizes and crops @p image from center, subtract @p mean values , scales values by @p scalefactor , swap Blue and Red channels . image . size . mean . to be in ( mean - R , mean - G , mean - B ) order if @p image has BGR ordering and @p swapRB is true . scalefactor . swapRB . in 3 - channel image is necessary . crop . ddepth . @details if @p crop is true, input image is resized so one side after resize is equal to corresponding dimension in @p size and another one is equal or larger. Then, crop from the center is performed. If @p crop is false, direct resize without cropping and preserving aspect ratio is performed. @returns 4-dimensional Mat with NCHW dimensions order. scalefactor : double size : Size mean : Scalar swapRB : bool crop : bool ddepth : int Python prototype (for reference): blobFromImage ( image [ , scalefactor [ , size [ , mean [ , swapRB [ , crop [ , ddepth ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#dnn_blobfromimage/2","title":"OpenCV.dnn_blobfromimage/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_blobfromimages/1","title":"OpenCV.dnn_blobfromimages/1","type":"function"},{"doc":"Creates 4-dimensional blob from series of images. Optionally resizes and crops @p images from center , subtract @p mean values , scales values by @p scalefactor , swap Blue and Red channels . images . size . mean . to be in ( mean - R , mean - G , mean - B ) order if @p image has BGR ordering and @p swapRB is true . scalefactor . swapRB . in 3 - channel image is necessary . crop . ddepth . @details if @p crop is true, input image is resized so one side after resize is equal to corresponding dimension in @p size and another one is equal or larger. Then, crop from the center is performed. If @p crop is false, direct resize without cropping and preserving aspect ratio is performed. @returns 4-dimensional Mat with NCHW dimensions order. scalefactor : double size : Size mean : Scalar swapRB : bool crop : bool ddepth : int Python prototype (for reference): blobFromImages ( images [ , scalefactor [ , size [ , mean [ , swapRB [ , crop [ , ddepth ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#dnn_blobfromimages/2","title":"OpenCV.dnn_blobfromimages/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_dnn_classificationmodel_classificationmodel/1","title":"OpenCV.dnn_dnn_classificationmodel_classificationmodel/1","type":"function"},{"doc":"Create classification model from network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : String Python prototype (for reference): ClassificationModel ( model [ , config ] ) -&gt; &lt; dnn_ClassificationModel object &gt;","ref":"OpenCV.html#dnn_dnn_classificationmodel_classificationmodel/2","title":"OpenCV.dnn_dnn_classificationmodel_classificationmodel/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_dnn_detectionmodel_detectionmodel/1","title":"OpenCV.dnn_dnn_detectionmodel_detectionmodel/1","type":"function"},{"doc":"Create detection model from network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : String Python prototype (for reference): DetectionModel ( model [ , config ] ) -&gt; &lt; dnn_DetectionModel object &gt;","ref":"OpenCV.html#dnn_dnn_detectionmodel_detectionmodel/2","title":"OpenCV.dnn_dnn_detectionmodel_detectionmodel/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_dnn_dictvalue_dictvalue/1","title":"OpenCV.dnn_dnn_dictvalue_dictvalue/1","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_dnn_keypointsmodel_keypointsmodel/1","title":"OpenCV.dnn_dnn_keypointsmodel_keypointsmodel/1","type":"function"},{"doc":"Create keypoints model from network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : String Python prototype (for reference): KeypointsModel ( model [ , config ] ) -&gt; &lt; dnn_KeypointsModel object &gt;","ref":"OpenCV.html#dnn_dnn_keypointsmodel_keypointsmodel/2","title":"OpenCV.dnn_dnn_keypointsmodel_keypointsmodel/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_dnn_model_model/1","title":"OpenCV.dnn_dnn_model_model/1","type":"function"},{"doc":"Create model from deep learning network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : String Python prototype (for reference): Model ( model [ , config ] ) -&gt; &lt; dnn_Model object &gt;","ref":"OpenCV.html#dnn_dnn_model_model/2","title":"OpenCV.dnn_dnn_model_model/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_dnn_net_net/0","title":"OpenCV.dnn_dnn_net_net/0","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_dnn_segmentationmodel_segmentationmodel/1","title":"OpenCV.dnn_dnn_segmentationmodel_segmentationmodel/1","type":"function"},{"doc":"Create segmentation model from network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : String Python prototype (for reference): SegmentationModel ( model [ , config ] ) -&gt; &lt; dnn_SegmentationModel object &gt;","ref":"OpenCV.html#dnn_dnn_segmentationmodel_segmentationmodel/2","title":"OpenCV.dnn_dnn_segmentationmodel_segmentationmodel/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_dnn_textdetectionmodel_db_textdetectionmodel_db/1","title":"OpenCV.dnn_dnn_textdetectionmodel_db_textdetectionmodel_db/1","type":"function"},{"doc":"Create text detection model from network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : string Python prototype (for reference): TextDetectionModel_DB ( model [ , config ] ) -&gt; &lt; dnn_TextDetectionModel_DB object &gt;","ref":"OpenCV.html#dnn_dnn_textdetectionmodel_db_textdetectionmodel_db/2","title":"OpenCV.dnn_dnn_textdetectionmodel_db_textdetectionmodel_db/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_dnn_textdetectionmodel_east_textdetectionmodel_east/1","title":"OpenCV.dnn_dnn_textdetectionmodel_east_textdetectionmodel_east/1","type":"function"},{"doc":"Create text detection model from network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : string Python prototype (for reference): TextDetectionModel_EAST ( model [ , config ] ) -&gt; &lt; dnn_TextDetectionModel_EAST object &gt;","ref":"OpenCV.html#dnn_dnn_textdetectionmodel_east_textdetectionmodel_east/2","title":"OpenCV.dnn_dnn_textdetectionmodel_east_textdetectionmodel_east/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_dnn_textrecognitionmodel_textrecognitionmodel/1","title":"OpenCV.dnn_dnn_textrecognitionmodel_textrecognitionmodel/1","type":"function"},{"doc":"Create text recognition model from network represented in one of the supported formats Call setDecodeType() and setVocabulary() after constructor to initialize the decoding method model . config . config : string Python prototype (for reference): TextRecognitionModel ( model [ , config ] ) -&gt; &lt; dnn_TextRecognitionModel object &gt;","ref":"OpenCV.html#dnn_dnn_textrecognitionmodel_textrecognitionmodel/2","title":"OpenCV.dnn_dnn_textrecognitionmodel_textrecognitionmodel/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_getavailabletargets/1","title":"OpenCV.dnn_getavailabletargets/1","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_imagesfromblob/1","title":"OpenCV.dnn_imagesfromblob/1","type":"function"},{"doc":"Parse a 4D blob and output the images it contains as 2D arrays through a simpler data structure ( std :: vector &lt; cv :: Mat &gt; ) . blob_ . which you would like to extract the images . images_ . ( CV_32F ) . They are non normalized neither mean added . The number of returned images equals the first dimension of the blob ( batch size ) . Every image has a number of channels equals to the second dimension of the blob ( depth ) . images_ : vector_UMat Python prototype (for reference): imagesFromBlob ( blob_ [ , images_ ] ) -&gt; images_","ref":"OpenCV.html#dnn_imagesfromblob/2","title":"OpenCV.dnn_imagesfromblob/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_net_readfrommodeloptimizer/2","title":"OpenCV.dnn_net_readfrommodeloptimizer/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_nmsboxes/4","title":"OpenCV.dnn_nmsboxes/4","type":"function"},{"doc":"Performs non maximum suppression given boxes and corresponding scores. bboxes . scores . score_threshold . nms_threshold . indices . eta . top_k . eta : float top_k : int Python prototype (for reference): NMSBoxes ( bboxes , scores , score_threshold , nms_threshold [ , eta [ , top_k ] ] ) -&gt; indices","ref":"OpenCV.html#dnn_nmsboxes/5","title":"OpenCV.dnn_nmsboxes/5","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_nmsboxesrotated/4","title":"OpenCV.dnn_nmsboxesrotated/4","type":"function"},{"doc":"eta : float top_k : int Python prototype (for reference): NMSBoxesRotated ( bboxes , scores , score_threshold , nms_threshold [ , eta [ , top_k ] ] ) -&gt; indices","ref":"OpenCV.html#dnn_nmsboxesrotated/5","title":"OpenCV.dnn_nmsboxesrotated/5","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_readnet_framework/2","title":"OpenCV.dnn_readnet_framework/2","type":"function"},{"doc":"Read deep learning network represented in one of the supported formats. @details This is an overloaded member function, provided for convenience. It differs from the above function only in what argument ( s ) it accepts . framework . bufferModel . bufferConfig . @returns Net object. bufferConfig : vector_uchar Python prototype (for reference): readNet ( framework , bufferModel [ , bufferConfig ] ) -&gt; retval","ref":"OpenCV.html#dnn_readnet_framework/3","title":"OpenCV.dnn_readnet_framework/3","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_readnet_model/1","title":"OpenCV.dnn_readnet_model/1","type":"function"},{"doc":"Read deep learning network represented in one of the supported formats. model . extensions are expected for models from different frameworks : * ` * . caffemodel ` ( Caffe , http :// caffe . berkeleyvision . org / ) * ` * . pb ` ( TensorFlow , https :// www . tensorflow . org / ) * ` * . t7 ` | ` * . net ` ( Torch , http :// torch . ch / ) * ` * . weights ` ( Darknet , https :// pjreddie . com / darknet / ) * ` * . bin ` ( DLDT , https :// software . intel . com / openvino - toolkit ) * ` * . onnx ` ( ONNX , https :// onnx . ai / ) config . file with the following extensions : * ` * . prototxt ` ( Caffe , http :// caffe . berkeleyvision . org / ) * ` * . pbtxt ` ( TensorFlow , https :// www . tensorflow . org / ) * ` * . cfg ` ( Darknet , https :// pjreddie . com / darknet / ) * ` * . xml ` ( DLDT , https :// software . intel . com / openvino - toolkit ) framework . @returns Net object. This function automatically detects an origin framework of trained model and calls an appropriate function such @ref readNetFromCaffe, @ref readNetFromTensorflow, @ref readNetFromTorch or @ref readNetFromDarknet. An order of @p model and @p config arguments does not matter. config : String framework : String Python prototype (for reference): readNet ( model [ , config [ , framework ] ] ) -&gt; retval","ref":"OpenCV.html#dnn_readnet_model/2","title":"OpenCV.dnn_readnet_model/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_readnetfromcaffe/1","title":"OpenCV.dnn_readnetfromcaffe/1","type":"function"},{"doc":"Reads a network model stored in Caffe model in memory. bufferProto . bufferModel . @returns Net object. bufferModel : vector_uchar Python prototype (for reference): readNetFromCaffe ( bufferProto [ , bufferModel ] ) -&gt; retval","ref":"OpenCV.html#dnn_readnetfromcaffe/2","title":"OpenCV.dnn_readnetfromcaffe/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_readnetfromdarknet/1","title":"OpenCV.dnn_readnetfromdarknet/1","type":"function"},{"doc":"Reads a network model stored in &lt;a href=&quot; https://pjreddie.com/darknet/&quot;&gt;Darknet&lt;/a&gt; model files. bufferCfg . bufferModel . @returns Net object. bufferModel : vector_uchar Python prototype (for reference): readNetFromDarknet ( bufferCfg [ , bufferModel ] ) -&gt; retval","ref":"OpenCV.html#dnn_readnetfromdarknet/2","title":"OpenCV.dnn_readnetfromdarknet/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_readnetfrommodeloptimizer/2","title":"OpenCV.dnn_readnetfrommodeloptimizer/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_readnetfromonnx/1","title":"OpenCV.dnn_readnetfromonnx/1","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_readnetfromtensorflow/1","title":"OpenCV.dnn_readnetfromtensorflow/1","type":"function"},{"doc":"Reads a network model stored in &lt;a href=&quot; https://www.tensorflow.org/&quot;&gt;TensorFlow&lt;/a&gt; framework's format. bufferModel . bufferConfig . @returns Net object. bufferConfig : vector_uchar Python prototype (for reference): readNetFromTensorflow ( bufferModel [ , bufferConfig ] ) -&gt; retval","ref":"OpenCV.html#dnn_readnetfromtensorflow/2","title":"OpenCV.dnn_readnetfromtensorflow/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_readnetfromtorch/1","title":"OpenCV.dnn_readnetfromtorch/1","type":"function"},{"doc":"Reads a network model stored in &lt;a href=&quot; http://torch.ch&quot;&gt;Torch7&lt;/a&gt; framework's format. model . isBinary . evaluate . @returns Net object. Note : Ascii mode of Torch serializer is more preferable, because binary mode extensively use long type of C language, which has various bit-length on different systems. The loading file must contain serialized &lt;a href=&quot; https://github.com/torch/nn/blob/master/doc/module.md&quot;&gt;nn.Module&lt;/a&gt; object with importing network. Try to eliminate a custom objects from serialazing data to avoid importing errors. List of supported layers (i.e. object instances derived from Torch nn.Module class): nn.Sequential nn.Parallel nn.Concat nn.Linear nn.SpatialConvolution nn.SpatialMaxPooling, nn.SpatialAveragePooling nn.ReLU, nn.TanH, nn.Sigmoid nn.Reshape nn.SoftMax, nn.LogSoftMax Also some equivalents of these classes from cunn, cudnn, and fbcunn may be successfully imported. isBinary : bool evaluate : bool Python prototype (for reference): readNetFromTorch ( model [ , isBinary [ , evaluate ] ] ) -&gt; retval","ref":"OpenCV.html#dnn_readnetfromtorch/2","title":"OpenCV.dnn_readnetfromtorch/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_readtensorfromonnx/1","title":"OpenCV.dnn_readtensorfromonnx/1","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_readtorchblob/1","title":"OpenCV.dnn_readtorchblob/1","type":"function"},{"doc":"Loads blob which was serialized as torch.Tensor object of Torch7 framework. @warning This function has the same limitations as readNetFromTorch(). isBinary : bool Python prototype (for reference): readTorchBlob ( filename [ , isBinary ] ) -&gt; retval","ref":"OpenCV.html#dnn_readtorchblob/2","title":"OpenCV.dnn_readtorchblob/2","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_shrinkcaffemodel/2","title":"OpenCV.dnn_shrinkcaffemodel/2","type":"function"},{"doc":"Convert all weights of Caffe network to half precision floating point. src . precision floating point weights ( usually has ` . caffemodel ` extension ) . dst . layersTypes . By default , converts only Convolutional and Fully - Connected layers &#39; weights . Note : Shrinked model has no origin float32 weights so it can't be used in origin Caffe framework anymore . However the structure of data is taken from NVidia &#39; s Caffe fork : https :// github . com / NVIDIA / caffe . So the resulting model may be used there . layersTypes : vector_String Python prototype (for reference): shrinkCaffeModel ( src , dst [ , layersTypes ] ) -&gt; None","ref":"OpenCV.html#dnn_shrinkcaffemodel/3","title":"OpenCV.dnn_shrinkcaffemodel/3","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_softnmsboxes/4","title":"OpenCV.dnn_softnmsboxes/4","type":"function"},{"doc":"Performs soft non maximum suppression given boxes and corresponding scores. Reference: https://arxiv.org/abs/1704.04503 bboxes . scores . updated_scores . score_threshold . nms_threshold . indices . top_k . sigma . method . @see SoftNMSMethod top_k : size_t sigma : float method : SoftNMSMethod Python prototype (for reference): softNMSBoxes ( bboxes , scores , score_threshold , nms_threshold [ , top_k [ , sigma [ , method ] ] ] ) -&gt; updated_scores , indices","ref":"OpenCV.html#dnn_softnmsboxes/5","title":"OpenCV.dnn_softnmsboxes/5","type":"function"},{"doc":"","ref":"OpenCV.html#dnn_writetextgraph/2","title":"OpenCV.dnn_writetextgraph/2","type":"function"},{"doc":"","ref":"OpenCV.html#drawchessboardcorners/4","title":"OpenCV.drawchessboardcorners/4","type":"function"},{"doc":"","ref":"OpenCV.html#drawcontours/4","title":"OpenCV.drawcontours/4","type":"function"},{"doc":"Draws contours outlines or filled contours. The function draws contour outlines in the image if \\f$\\texttt{thickness} \\ge 0\\f$ or fills the area bounded by the contours if \\f$\\texttt{thickness}&lt;0\\f$ . The example below shows how to retrieve connected components from the binary image and label them: : @include snippets/imgproc_drawContours.cpp image . contours . contourIdx . color . thickness . thickness=#FILLED ), the contour interiors are drawn. lineType . hierarchy . some of the contours (see maxLevel ). maxLevel . If it is 1, the function draws the contour(s) and all the nested contours. If it is 2, the function draws the contours, all the nested contours, all the nested-to-nested contours, and so on. This parameter is only taken into account when there is hierarchy available. offset . \\f$\\texttt{offset}=(dx,dy)\\f$ . Note : When thickness=#FILLED, the function is designed to handle connected components with holes correctly even when no hierarchy data is provided. This is done by analyzing all the outlines together using even-odd rule. This may give incorrect results if you have a joint collection of separately retrieved contours. In order to solve this problem, you need to call #drawContours separately for each sub-group of contours, or iterate over the collection using contourIdx parameter. thickness : int lineType : int hierarchy : UMat maxLevel : int offset : Point Python prototype (for reference): drawContours ( image , contours , contourIdx , color [ , thickness [ , lineType [ , hierarchy [ , maxLevel [ , offset ] ] ] ] ] ) -&gt; image","ref":"OpenCV.html#drawcontours/5","title":"OpenCV.drawcontours/5","type":"function"},{"doc":"","ref":"OpenCV.html#drawframeaxes/6","title":"OpenCV.drawframeaxes/6","type":"function"},{"doc":"Draw axes of the world/object coordinate system from pose estimation. @sa solvePnP image . cameraMatrix . \\f$\\cameramatrix{A}\\f$ distCoeffs . \\f$\\distcoeffs\\f$. If the vector is empty, the zero distortion coefficients are assumed. rvec . the model coordinate system to the camera coordinate system. tvec . length . thickness . This function draws the axes of the world/object coordinate system w.r.t. to the camera frame. OX is drawn in red, OY in green and OZ in blue. thickness : int Python prototype (for reference): drawFrameAxes ( image , cameraMatrix , distCoeffs , rvec , tvec , length [ , thickness ] ) -&gt; image","ref":"OpenCV.html#drawframeaxes/7","title":"OpenCV.drawframeaxes/7","type":"function"},{"doc":"","ref":"OpenCV.html#drawkeypoints/3","title":"OpenCV.drawkeypoints/3","type":"function"},{"doc":"Draws keypoints. image . keypoints . outImage . output image. See possible flags bit values below. color . flags . DrawMatchesFlags. See details above in drawMatches . Note : For Python API, flags are modified as cv.DRAW_MATCHES_FLAGS_DEFAULT, cv.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS, cv.DRAW_MATCHES_FLAGS_DRAW_OVER_OUTIMG, cv.DRAW_MATCHES_FLAGS_NOT_DRAW_SINGLE_POINTS color : Scalar flags : DrawMatchesFlags Python prototype (for reference): drawKeypoints ( image , keypoints , outImage [ , color [ , flags ] ] ) -&gt; outImage","ref":"OpenCV.html#drawkeypoints/4","title":"OpenCV.drawkeypoints/4","type":"function"},{"doc":"","ref":"OpenCV.html#drawmarker/3","title":"OpenCV.drawmarker/3","type":"function"},{"doc":"Draws a marker on a predefined position in an image. The function cv::drawMarker draws a marker on a given position in the image. For the moment several marker types are supported, see #MarkerTypes for more information. img : Image. position . color . markerType . thickness . line_type . markerSize . markerType : int markerSize : int thickness : int line_type : int Python prototype (for reference): drawMarker ( img , position , color [ , markerType [ , markerSize [ , thickness [ , line_type ] ] ] ] ) -&gt; img","ref":"OpenCV.html#drawmarker/4","title":"OpenCV.drawmarker/4","type":"function"},{"doc":"","ref":"OpenCV.html#drawmatches/6","title":"OpenCV.drawmatches/6","type":"function"},{"doc":"","ref":"OpenCV.html#drawmatches/7","title":"OpenCV.drawmatches/7","type":"function"},{"doc":"Has overloading in C++ matchColor : Scalar singlePointColor : Scalar matchesMask : vector_char flags : DrawMatchesFlags Python prototype (for reference): drawMatches ( img1 , keypoints1 , img2 , keypoints2 , matches1to2 , outImg , matchesThickness [ , matchColor [ , singlePointColor [ , matchesMask [ , flags ] ] ] ] ) -&gt; outImg","ref":"OpenCV.html#drawmatches/8","title":"OpenCV.drawmatches/8","type":"function"},{"doc":"","ref":"OpenCV.html#drawmatchesknn/6","title":"OpenCV.drawmatchesknn/6","type":"function"},{"doc":"matchColor : Scalar singlePointColor : Scalar matchesMask : vector_vector_char flags : DrawMatchesFlags Python prototype (for reference): drawMatchesKnn ( img1 , keypoints1 , img2 , keypoints2 , matches1to2 , outImg [ , matchColor [ , singlePointColor [ , matchesMask [ , flags ] ] ] ] ) -&gt; outImg","ref":"OpenCV.html#drawmatchesknn/7","title":"OpenCV.drawmatchesknn/7","type":"function"},{"doc":"","ref":"OpenCV.html#edgepreservingfilter/1","title":"OpenCV.edgepreservingfilter/1","type":"function"},{"doc":"Filtering is the fundamental operation in image and video processing. Edge-preserving smoothing filters are used in many different applications @cite EM11 . src . dst . flags . sigma_s . sigma_r . dst : UMat flags : int sigma_s : float sigma_r : float Python prototype (for reference): edgePreservingFilter ( src [ , dst [ , flags [ , sigma_s [ , sigma_r ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#edgepreservingfilter/2","title":"OpenCV.edgepreservingfilter/2","type":"function"},{"doc":"","ref":"OpenCV.html#eigen/1","title":"OpenCV.eigen/1","type":"function"},{"doc":"Calculates eigenvalues and eigenvectors of a symmetric matrix. The function cv::eigen calculates just eigenvalues, or eigenvalues and eigenvectors of the symmetric matrix src: src * eigenvectors . row ( i ) . t ( ) = eigenvalues . at &lt; srcType &gt; ( i ) * eigenvectors . row ( i ) . t ( ) Note : Use cv::eigenNonSymmetric for calculation of real eigenvalues and eigenvectors of non-symmetric matrix. src . (src ^T^ == src). eigenvalues . in the descending order. eigenvectors . eigenvectors are stored as subsequent matrix rows, in the same order as the corresponding eigenvalues. @sa eigenNonSymmetric, completeSymm , PCA eigenvalues : UMat eigenvectors : UMat Python prototype (for reference): eigen ( src [ , eigenvalues [ , eigenvectors ] ] ) -&gt; retval , eigenvalues , eigenvectors","ref":"OpenCV.html#eigen/2","title":"OpenCV.eigen/2","type":"function"},{"doc":"","ref":"OpenCV.html#eigennonsymmetric/1","title":"OpenCV.eigennonsymmetric/1","type":"function"},{"doc":"Calculates eigenvalues and eigenvectors of a non-symmetric matrix (real eigenvalues only). Note : Assumes real eigenvalues. The function calculates eigenvalues and eigenvectors (optional) of the square matrix src: src * eigenvectors . row ( i ) . t ( ) = eigenvalues . at &lt; srcType &gt; ( i ) * eigenvectors . row ( i ) . t ( ) src . eigenvalues . eigenvectors . @sa eigen eigenvalues : UMat eigenvectors : UMat Python prototype (for reference): eigenNonSymmetric ( src [ , eigenvalues [ , eigenvectors ] ] ) -&gt; eigenvalues , eigenvectors","ref":"OpenCV.html#eigennonsymmetric/2","title":"OpenCV.eigennonsymmetric/2","type":"function"},{"doc":"","ref":"OpenCV.html#ellipse/3","title":"OpenCV.ellipse/3","type":"function"},{"doc":"","ref":"OpenCV.html#ellipse/4","title":"OpenCV.ellipse/4","type":"function"},{"doc":"","ref":"OpenCV.html#ellipse/7","title":"OpenCV.ellipse/7","type":"function"},{"doc":"Draws a simple or thick elliptic arc or fills an ellipse sector. The function cv::ellipse with more parameters draws an ellipse outline, a filled ellipse, an elliptic arc, or a filled ellipse sector. The drawing code uses general parametric form. A piecewise-linear curve is used to approximate the elliptic arc boundary. If you need more control of the ellipse rendering, you can retrieve the curve using #ellipse2Poly and then render it with #polylines or fill it with #fillPoly. If you use the first variant of the function and want to draw the whole ellipse, not an arc, pass startAngle=0 and endAngle=360 . If startAngle is greater than endAngle , they are swapped. The figure below explains the meaning of the parameters to draw the blue arc. img : Image. center . axes . angle . startAngle . endAngle . color . thickness . a filled ellipse sector is to be drawn. lineType . shift . thickness : int lineType : int shift : int Python prototype (for reference): ellipse ( img , center , axes , angle , startAngle , endAngle , color [ , thickness [ , lineType [ , shift ] ] ] ) -&gt; img","ref":"OpenCV.html#ellipse/8","title":"OpenCV.ellipse/8","type":"function"},{"doc":"","ref":"OpenCV.html#ellipse2poly/6","title":"OpenCV.ellipse2poly/6","type":"function"},{"doc":"","ref":"OpenCV.html#emd/3","title":"OpenCV.emd/3","type":"function"},{"doc":"Computes the &quot;minimal work&quot; distance between two weighted point configurations. The function computes the earth mover distance and/or a lower boundary of the distance between the two weighted point configurations. One of the applications described in @cite RubnerSept98, @cite Rubner2000 is multi-dimensional histogram comparison for image retrieval. EMD is a transportation problem that is solved using some modification of a simplex algorithm, thus the complexity is exponential in the worst case, though, on average it is much faster. In the case of a real metric the lower boundary can be calculated even faster (using linear-time algorithm) and it can be used to determine roughly whether the two signatures are far enough so that they cannot relate to the same object. signature1 . Each row stores the point weight followed by the point coordinates. The matrix is allowed to have a single column (weights only) if the user-defined cost matrix is used. The weights must be non-negative and have at least one non-zero value. signature2 . may be different. The total weights may be different. In this case an extra &quot;dummy&quot; point is added to either signature1 or signature2. The weights must be non-negative and have at least one non-zero value. distType . cost . is used, lower boundary lowerBound cannot be calculated because it needs a metric function. lowerBound . signatures that is a distance between mass centers. The lower boundary may not be calculated if the user-defined cost matrix is used, the total weights of point configurations are not equal, or if the signatures consist of weights only (the signature matrices have a single column). You must** initialize \\ lowerBound . If the calculated distance between mass centers is greater or equal to *lowerBound (it means that the signatures are far enough), the function does not calculate EMD. In any case *lowerBound is set to the calculated distance between mass centers on return. Thus, if you want to calculate both distance between mass centers and EMD, *lowerBound should be set to 0. flow . a flow from \\f$i\\f$ -th point of signature1 to \\f$j\\f$ -th point of signature2 . cost : UMat lowerBound : Ptr&lt;float&gt; flow : UMat Python prototype (for reference): EMD ( signature1 , signature2 , distType [ , cost [ , lowerBound [ , flow ] ] ] ) -&gt; retval , lowerBound , flow","ref":"OpenCV.html#emd/4","title":"OpenCV.emd/4","type":"function"},{"doc":"","ref":"OpenCV.html#equalizehist/1","title":"OpenCV.equalizehist/1","type":"function"},{"doc":"Equalizes the histogram of a grayscale image. The function equalizes the histogram of the input image using the following algorithm: Calculate the histogram \\f$H\\f$ for src . Normalize the histogram so that the sum of histogram bins is 255. Compute the integral of the histogram: \\f[H'_i = \\sum _{0 \\le j &lt; i} H(j)\\f] Transform the image using \\f$H'\\f$ as a look-up table: \\f$\\texttt{dst}(x,y) = H'(\\texttt{src}(x,y))\\f$ The algorithm normalizes the brightness and increases the contrast of the image. src . dst . dst : UMat Python prototype (for reference): equalizeHist ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.html#equalizehist/2","title":"OpenCV.equalizehist/2","type":"function"},{"doc":"","ref":"OpenCV.html#erode/2","title":"OpenCV.erode/2","type":"function"},{"doc":"Erodes an image by using a specific structuring element. The function erodes the source image using the specified structuring element that determines the shape of a pixel neighborhood over which the minimum is taken: \\f[\\texttt{dst} (x,y) = \\min _{(x',y'): \\, \\texttt{element} (x',y') \\ne0 } \\texttt{src} (x+x',y+y')\\f] The function supports the in-place mode. Erosion can be applied several ( iterations ) times. In case of multi-channel images, each channel is processed independently. src . CV_8U, CV_16U, CV_16S, CV_32F or CV_64F. dst . kernel . structuring element is used. Kernel can be created using #getStructuringElement. anchor . anchor is at the element center. iterations . borderType . borderValue . @sa dilate, morphologyEx, getStructuringElement dst : UMat anchor : Point iterations : int borderType : int borderValue : Scalar Python prototype (for reference): erode ( src , kernel [ , dst [ , anchor [ , iterations [ , borderType [ , borderValue ] ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#erode/3","title":"OpenCV.erode/3","type":"function"},{"doc":"","ref":"OpenCV.html#estimateaffine2d/3","title":"OpenCV.estimateaffine2d/3","type":"function"},{"doc":"inliers : UMat Python prototype (for reference): estimateAffine2D ( pts1 , pts2 , params [ , inliers ] ) -&gt; retval , inliers","ref":"OpenCV.html#estimateaffine2d/4","title":"OpenCV.estimateaffine2d/4","type":"function"},{"doc":"","ref":"OpenCV.html#estimateaffine3d/2","title":"OpenCV.estimateaffine3d/2","type":"function"},{"doc":"Computes an optimal affine transformation between two 3D point sets. It computes \\f$R,s,t\\f$ minimizing \\f$\\sum{i} dst_i - c \\cdot R \\cdot src_i \\f$ where \\f$R\\f$ is a 3x3 rotation matrix, \\f$t\\f$ is a 3x1 translation vector and \\f$s\\f$ is a scalar size value. This is an implementation of the algorithm by Umeyama \\cite umeyama1991least . The estimated affine transform has a homogeneous scale which is a subclass of affine transformations with 7 degrees of freedom. The paired point sets need to comprise at least 3 points each. src . dst . scale . Else the pointed-to variable will be set to the optimal scale. force_rotation . This might be unwanted, e.g. when optimizing a transform between a right- and a left-handed coordinate system. @return 3D affine transformation matrix \\f$3 \\times 4\\f$ of the form \\f[T = \\begin{bmatrix} R &amp; t\\\\ \\end{bmatrix} \\f] force_rotation : bool Python prototype (for reference): estimateAffine3D ( src , dst [ , force_rotation ] ) -&gt; retval , scale","ref":"OpenCV.html#estimateaffine3d/3","title":"OpenCV.estimateaffine3d/3","type":"function"},{"doc":"","ref":"OpenCV.html#estimateaffinepartial2d/2","title":"OpenCV.estimateaffinepartial2d/2","type":"function"},{"doc":"Computes an optimal limited affine transformation with 4 degrees of freedom between two 2D point sets. from . to . inliers . method . @ref RANSAC - RANSAC-based robust method @ref LMEDS - Least-Median robust method RANSAC is the default method. ransacReprojThreshold . a point as an inlier. Applies only to RANSAC. maxIters . confidence . between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation significantly. Values lower than 0.8-0.9 can result in an incorrectly estimated transformation. refineIters . Passing 0 will disable refining, so the output matrix will be output of robust method. @return Output 2D affine transformation (4 degrees of freedom) matrix \\f$2 \\times 3\\f$ or empty matrix if transformation could not be estimated. The function estimates an optimal 2D affine transformation with 4 degrees of freedom limited to combinations of translation, rotation, and uniform scaling. Uses the selected algorithm for robust estimation. The computed transformation is then refined further (using only inliers) with the Levenberg-Marquardt method to reduce the re-projection error even more. Estimated transformation matrix is: \\f[ \\begin{bmatrix} \\cos(\\theta) \\cdot s &amp; -\\sin(\\theta) \\cdot s &amp; t_x \\\\ \\sin(\\theta) \\cdot s &amp; \\cos(\\theta) \\cdot s &amp; t_y \\end{bmatrix} \\f] Where \\f$ \\theta \\f$ is the rotation angle, \\f$ s \\f$ the scaling factor and \\f$ t_x, t_y \\f$ are translations in \\f$ x, y \\f$ axes respectively. Note : The RANSAC method can handle practically any ratio of outliers but need a threshold to distinguish inliers from outliers. The method LMeDS does not need any threshold but it works correctly only when there are more than 50% of inliers. @sa estimateAffine2D, getAffineTransform inliers : UMat method : int ransacReprojThreshold : double maxIters : size_t confidence : double refineIters : size_t Python prototype (for reference): estimateAffinePartial2D ( from_ , to [ , inliers [ , method [ , ransacReprojThreshold [ , maxIters [ , confidence [ , refineIters ] ] ] ] ] ] ) -&gt; retval , inliers","ref":"OpenCV.html#estimateaffinepartial2d/3","title":"OpenCV.estimateaffinepartial2d/3","type":"function"},{"doc":"","ref":"OpenCV.html#estimatechessboardsharpness/3","title":"OpenCV.estimatechessboardsharpness/3","type":"function"},{"doc":"Estimates the sharpness of a detected chessboard. Image sharpness, as well as brightness, are a critical parameter for accuracte camera calibration. For accessing these parameters for filtering out problematic calibraiton images, this method calculates edge profiles by traveling from black to white chessboard cell centers. Based on this, the number of pixels is calculated required to transit from black to white. This width of the transition area is a good indication of how sharp the chessboard is imaged and should be below ~3.0 pixels. image . patternSize . corners . rise_distance . vertical . sharpness . The optional sharpness array is of type CV_32FC1 and has for each calculated profile one row with the following five entries: 0 = x coordinate of the underlying edge in the image 1 = y coordinate of the underlying edge in the image 2 = width of the transition area (sharpness) 3 = signal strength in the black cell (min brightness) 4 = signal strength in the white cell (max brightness) @return Scalar(average sharpness, average min brightness, average max brightness,0) rise_distance : float vertical : bool sharpness : UMat Python prototype (for reference): estimateChessboardSharpness ( image , patternSize , corners [ , rise_distance [ , vertical [ , sharpness ] ] ] ) -&gt; retval , sharpness","ref":"OpenCV.html#estimatechessboardsharpness/4","title":"OpenCV.estimatechessboardsharpness/4","type":"function"},{"doc":"","ref":"OpenCV.html#estimatetranslation3d/2","title":"OpenCV.estimatetranslation3d/2","type":"function"},{"doc":"Computes an optimal translation between two 3D point sets. It computes \\f[ \\begin{bmatrix} x\\\\ y\\\\ z\\\\ \\end{bmatrix} \\begin{bmatrix} X\\\\ Y\\\\ Z\\\\ \\end{bmatrix} + \\begin{bmatrix} b_1\\\\ b_2\\\\ b_3\\\\ \\end{bmatrix} \\f] src . dst . out . \\f[ \\begin{bmatrix} b_1 \\\\ b_2 \\\\ b_3 \\\\ \\end{bmatrix} \\f] inliers . ransacThreshold . an inlier. confidence . between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation significantly. Values lower than 0.8-0.9 can result in an incorrectly estimated transformation. The function estimates an optimal 3D translation between two 3D point sets using the RANSAC algorithm. out : UMat inliers : UMat ransacThreshold : double confidence : double Python prototype (for reference): estimateTranslation3D ( src , dst [ , out [ , inliers [ , ransacThreshold [ , confidence ] ] ] ] ) -&gt; retval , out , inliers","ref":"OpenCV.html#estimatetranslation3d/3","title":"OpenCV.estimatetranslation3d/3","type":"function"},{"doc":"","ref":"OpenCV.html#exp/1","title":"OpenCV.exp/1","type":"function"},{"doc":"Calculates the exponent of every array element. The function cv::exp calculates the exponent of every element of the input array: \\f[\\texttt{dst} [I] = e^{ src(I) }\\f] The maximum relative error is about 7e-6 for single-precision input and less than 1e-10 for double-precision input. Currently, the function converts denormalized values to zeros on output. Special values (NaN, Inf) are not handled. src . dst . @sa log , cartToPolar , polarToCart , phase , pow , sqrt , magnitude dst : UMat Python prototype (for reference): exp ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.html#exp/2","title":"OpenCV.exp/2","type":"function"},{"doc":"","ref":"OpenCV.html#extractchannel/2","title":"OpenCV.extractchannel/2","type":"function"},{"doc":"Extracts a single channel from src (coi is 0-based index) src . dst . coi . @sa mixChannels, split dst : UMat Python prototype (for reference): extractChannel ( src , coi [ , dst ] ) -&gt; dst","ref":"OpenCV.html#extractchannel/3","title":"OpenCV.extractchannel/3","type":"function"},{"doc":"","ref":"OpenCV.html#facedetectoryn_create/3","title":"OpenCV.facedetectoryn_create/3","type":"function"},{"doc":"Creates an instance of this class with given parameters model . config . input_size . score_threshold . nms_threshold . top_k . backend_id . target_id . score_threshold : float nms_threshold : float top_k : int backend_id : int target_id : int Python prototype (for reference): FaceDetectorYN_create ( model , config , input_size [ , score_threshold [ , nms_threshold [ , top_k [ , backend_id [ , target_id ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#facedetectoryn_create/4","title":"OpenCV.facedetectoryn_create/4","type":"function"},{"doc":"","ref":"OpenCV.html#facerecognizersf_create/2","title":"OpenCV.facerecognizersf_create/2","type":"function"},{"doc":"Creates an instance of this class with given parameters model . config . backend_id . target_id . backend_id : int target_id : int Python prototype (for reference): FaceRecognizerSF_create ( model , config [ , backend_id [ , target_id ] ] ) -&gt; retval","ref":"OpenCV.html#facerecognizersf_create/3","title":"OpenCV.facerecognizersf_create/3","type":"function"},{"doc":"","ref":"OpenCV.html#farnebackopticalflow_create/0","title":"OpenCV.farnebackopticalflow_create/0","type":"function"},{"doc":"numLevels : int pyrScale : double fastPyramids : bool winSize : int numIters : int polyN : int polySigma : double flags : int Python prototype (for reference): FarnebackOpticalFlow_create ( [ , numLevels [ , pyrScale [ , fastPyramids [ , winSize [ , numIters [ , polyN [ , polySigma [ , flags ] ] ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#farnebackopticalflow_create/1","title":"OpenCV.farnebackopticalflow_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#fastatan2/2","title":"OpenCV.fastatan2/2","type":"function"},{"doc":"","ref":"OpenCV.html#fastfeaturedetector_create/0","title":"OpenCV.fastfeaturedetector_create/0","type":"function"},{"doc":"threshold : int nonmaxSuppression : bool type : FastFeatureDetector_DetectorType Python prototype (for reference): FastFeatureDetector_create ( [ , threshold [ , nonmaxSuppression [ , type ] ] ] ) -&gt; retval","ref":"OpenCV.html#fastfeaturedetector_create/1","title":"OpenCV.fastfeaturedetector_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#fastnlmeansdenoising/1","title":"OpenCV.fastnlmeansdenoising/1","type":"function"},{"doc":"","ref":"OpenCV.html#fastnlmeansdenoising/2","title":"OpenCV.fastnlmeansdenoising/2","type":"function"},{"doc":"Perform image denoising using Non-local Means Denoising algorithm http://www.ipol.im/pub/algo/bcm_non_local_means_denoising/ with several computational optimizations. Noise expected to be a gaussian white noise src . 2-channel, 3-channel or 4-channel image. dst . templateWindowSize . Should be odd. Recommended value 7 pixels searchWindowSize . given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater denoising time. Recommended value 21 pixels h . parameter applied to all channels or one per channel in dst. Big h value perfectly removes noise but also removes image details, smaller h value preserves details but also preserves some noise normType . This function expected to be applied to grayscale images. For colored images look at fastNlMeansDenoisingColored. Advanced usage of this functions can be manual denoising of colored image in different colorspaces. Such approach is used in fastNlMeansDenoisingColored by converting image to CIELAB colorspace and then separately denoise L and AB components with different h parameter. dst : UMat templateWindowSize : int searchWindowSize : int normType : int Python prototype (for reference): fastNlMeansDenoising ( src , h [ , dst [ , templateWindowSize [ , searchWindowSize [ , normType ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#fastnlmeansdenoising/3","title":"OpenCV.fastnlmeansdenoising/3","type":"function"},{"doc":"","ref":"OpenCV.html#fastnlmeansdenoisingcolored/1","title":"OpenCV.fastnlmeansdenoisingcolored/1","type":"function"},{"doc":"Modification of fastNlMeansDenoising function for colored images src . dst . templateWindowSize . Should be odd. Recommended value 7 pixels searchWindowSize . given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater denoising time. Recommended value 21 pixels h . removes noise but also removes image details, smaller h value preserves details but also preserves some noise hColor . will be enough to remove colored noise and do not distort colors The function converts image to CIELAB colorspace and then separately denoise L and AB components with given h parameters using fastNlMeansDenoising function. dst : UMat h : float hColor : float templateWindowSize : int searchWindowSize : int Python prototype (for reference): fastNlMeansDenoisingColored ( src [ , dst [ , h [ , hColor [ , templateWindowSize [ , searchWindowSize ] ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#fastnlmeansdenoisingcolored/2","title":"OpenCV.fastnlmeansdenoisingcolored/2","type":"function"},{"doc":"","ref":"OpenCV.html#fastnlmeansdenoisingcoloredmulti/3","title":"OpenCV.fastnlmeansdenoisingcoloredmulti/3","type":"function"},{"doc":"Modification of fastNlMeansDenoisingMulti function for colored images sequences srcImgs . size. imgToDenoiseIndex . temporalWindowSize . be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs will be used to denoise srcImgs[imgToDenoiseIndex] image. dst . templateWindowSize . Should be odd. Recommended value 7 pixels searchWindowSize . given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater denoising time. Recommended value 21 pixels h . removes noise but also removes image details, smaller h value preserves details but also preserves some noise. hColor . The function converts images to CIELAB colorspace and then separately denoise L and AB components with given h parameters using fastNlMeansDenoisingMulti function. dst : UMat h : float hColor : float templateWindowSize : int searchWindowSize : int Python prototype (for reference): fastNlMeansDenoisingColoredMulti ( srcImgs , imgToDenoiseIndex , temporalWindowSize [ , dst [ , h [ , hColor [ , templateWindowSize [ , searchWindowSize ] ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#fastnlmeansdenoisingcoloredmulti/4","title":"OpenCV.fastnlmeansdenoisingcoloredmulti/4","type":"function"},{"doc":"","ref":"OpenCV.html#fastnlmeansdenoisingmulti/3","title":"OpenCV.fastnlmeansdenoisingmulti/3","type":"function"},{"doc":"","ref":"OpenCV.html#fastnlmeansdenoisingmulti/4","title":"OpenCV.fastnlmeansdenoisingmulti/4","type":"function"},{"doc":"Modification of fastNlMeansDenoising function for images sequence where consecutive images have been captured in small period of time. For example video. This version of the function is for grayscale images or for manual manipulation with colorspaces. For more details see http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.131.6394 srcImgs . 2-channel, 3-channel or 4-channel images sequence. All images should have the same type and size. imgToDenoiseIndex . temporalWindowSize . be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs will be used to denoise srcImgs[imgToDenoiseIndex] image. dst . templateWindowSize . Should be odd. Recommended value 7 pixels searchWindowSize . given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater denoising time. Recommended value 21 pixels h . parameter applied to all channels or one per channel in dst. Big h value perfectly removes noise but also removes image details, smaller h value preserves details but also preserves some noise normType . dst : UMat templateWindowSize : int searchWindowSize : int normType : int Python prototype (for reference): fastNlMeansDenoisingMulti ( srcImgs , imgToDenoiseIndex , temporalWindowSize , h [ , dst [ , templateWindowSize [ , searchWindowSize [ , normType ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#fastnlmeansdenoisingmulti/5","title":"OpenCV.fastnlmeansdenoisingmulti/5","type":"function"},{"doc":"","ref":"OpenCV.html#filenode_filenode/0","title":"OpenCV.filenode_filenode/0","type":"function"},{"doc":"","ref":"OpenCV.html#filestorage_filestorage/0","title":"OpenCV.filestorage_filestorage/0","type":"function"},{"doc":"","ref":"OpenCV.html#filestorage_filestorage/2","title":"OpenCV.filestorage_filestorage/2","type":"function"},{"doc":"Has overloading in C++ @copydoc open() encoding : String Python prototype (for reference): FileStorage ( filename , flags [ , encoding ] ) -&gt; &lt; FileStorage object &gt;","ref":"OpenCV.html#filestorage_filestorage/3","title":"OpenCV.filestorage_filestorage/3","type":"function"},{"doc":"","ref":"OpenCV.html#fillconvexpoly/3","title":"OpenCV.fillconvexpoly/3","type":"function"},{"doc":"Fills a convex polygon. The function cv::fillConvexPoly draws a filled convex polygon. This function is much faster than the function #fillPoly . It can fill not only convex polygons but any monotonic polygon without self-intersections, that is, a polygon whose contour intersects every horizontal line (scan line) twice at the most (though, its top-most and/or the bottom edge could be horizontal). img : Image. points . color . lineType . shift . lineType : int shift : int Python prototype (for reference): fillConvexPoly ( img , points , color [ , lineType [ , shift ] ] ) -&gt; img","ref":"OpenCV.html#fillconvexpoly/4","title":"OpenCV.fillconvexpoly/4","type":"function"},{"doc":"","ref":"OpenCV.html#fillpoly/3","title":"OpenCV.fillpoly/3","type":"function"},{"doc":"Fills the area bounded by one or more polygons. The function cv::fillPoly fills an area bounded by several polygonal contours. The function can fill complex areas, for example, areas with holes, contours with self-intersections (some of their parts), and so forth. img : Image. pts . color . lineType . shift . offset . lineType : int shift : int offset : Point Python prototype (for reference): fillPoly ( img , pts , color [ , lineType [ , shift [ , offset ] ] ] ) -&gt; img","ref":"OpenCV.html#fillpoly/4","title":"OpenCV.fillpoly/4","type":"function"},{"doc":"","ref":"OpenCV.html#filter2d/3","title":"OpenCV.filter2d/3","type":"function"},{"doc":"Convolves an image with the kernel. The function applies an arbitrary linear filter to an image. In-place operation is supported. When the aperture is partially outside the image, the function interpolates outlier pixel values according to the specified border mode. The function does actually compute correlation, not the convolution: \\f[\\texttt{dst} (x,y) = \\sum _{ \\substack{0\\leq x' &lt; \\texttt{kernel.cols}\\\\{0\\leq y' &lt; \\texttt{kernel.rows}}}} \\texttt{kernel} (x',y')* \\texttt{src} (x+x'- \\texttt{anchor.x} ,y+y'- \\texttt{anchor.y} )\\f] That is, the kernel is not mirrored around the anchor point. If you need a real convolution, flip the kernel using #flip and set the new anchor to (kernel.cols - anchor.x - 1, kernel.rows - anchor.y - 1) . The function uses the DFT-based algorithm in case of sufficiently large kernels (~ 11 x 11 or larger) and the direct algorithm for small kernels. src . dst . ddepth . kernel . matrix; if you want to apply different kernels to different channels, split the image into separate color planes using split and process them individually. anchor . the kernel; the anchor should lie within the kernel; default value (-1,-1) means that the anchor is at the kernel center. delta . borderType . @sa sepFilter2D, dft, matchTemplate dst : UMat anchor : Point delta : double borderType : int Python prototype (for reference): filter2D ( src , ddepth , kernel [ , dst [ , anchor [ , delta [ , borderType ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#filter2d/4","title":"OpenCV.filter2d/4","type":"function"},{"doc":"","ref":"OpenCV.html#filterhomographydecompbyvisiblerefpoints/4","title":"OpenCV.filterhomographydecompbyvisiblerefpoints/4","type":"function"},{"doc":"Filters homography decompositions based on additional information. rotations . normals . beforePoints . afterPoints . possibleSolutions . pointsMask . This function is intended to filter the output of the #decomposeHomographyMat based on additional information as described in @cite Malis . The summary of the method: the #decomposeHomographyMat function returns 2 unique solutions and their &quot;opposites&quot; for a total of 4 solutions. If we have access to the sets of points visible in the camera frame before and after the homography transformation is applied, we can determine which are the true potential solutions and which are the opposites by verifying which homographies are consistent with all visible reference points being in front of the camera. The inputs are left unchanged; the filtered solution set is returned as indices into the existing one. possibleSolutions : UMat pointsMask : UMat Python prototype (for reference): filterHomographyDecompByVisibleRefpoints ( rotations , normals , beforePoints , afterPoints [ , possibleSolutions [ , pointsMask ] ] ) -&gt; possibleSolutions","ref":"OpenCV.html#filterhomographydecompbyvisiblerefpoints/5","title":"OpenCV.filterhomographydecompbyvisiblerefpoints/5","type":"function"},{"doc":"","ref":"OpenCV.html#filterspeckles/4","title":"OpenCV.filterspeckles/4","type":"function"},{"doc":"Filters off small noise blobs (speckles) in the disparity map img . newVal . maxSpeckleSize . affected by the algorithm maxDiff . blob. Note that since StereoBM, StereoSGBM and may be other algorithms return a fixed-point disparity map, where disparity values are multiplied by 16, this scale factor should be taken into account when specifying this parameter value. buf . buf : UMat Python prototype (for reference): filterSpeckles ( img , newVal , maxSpeckleSize , maxDiff [ , buf ] ) -&gt; img , buf","ref":"OpenCV.html#filterspeckles/5","title":"OpenCV.filterspeckles/5","type":"function"},{"doc":"","ref":"OpenCV.html#find4quadcornersubpix/3","title":"OpenCV.find4quadcornersubpix/3","type":"function"},{"doc":"","ref":"OpenCV.html#findchessboardcorners/2","title":"OpenCV.findchessboardcorners/2","type":"function"},{"doc":"Finds the positions of internal corners of the chessboard. image . patternSize . ( patternSize = cv::Size(points_per_row,points_per_colum) = cv::Size(columns,rows) ). corners . flags . @ref CALIB_CB_ADAPTIVE_THRESH Use adaptive thresholding to convert the image to black and white, rather than a fixed threshold level (computed from the average image brightness). @ref CALIB_CB_NORMALIZE_IMAGE Normalize the image gamma with equalizeHist before applying fixed or adaptive thresholding. @ref CALIB_CB_FILTER_QUADS Use additional criteria (like contour area, perimeter, square-like shape) to filter out false quads extracted at the contour retrieval stage. @ref CALIB_CB_FAST_CHECK Run a fast check on the image that looks for chessboard corners, and shortcut the call if none is found. This can drastically speed up the call in the degenerate condition when no chessboard is observed. The function attempts to determine whether the input image is a view of the chessboard pattern and locate the internal chessboard corners. The function returns a non-zero value if all of the corners are found and they are placed in a certain order (row by row, left to right in every row). Otherwise, if the function fails to find all the corners or reorder them, it returns 0. For example, a regular chessboard has 8 x 8 squares and 7 x 7 internal corners, that is, points where the black squares touch each other. The detected coordinates are approximate, and to determine their positions more accurately, the function calls cornerSubPix. You also may use the function cornerSubPix with different parameters if returned coordinates are not accurate enough. Sample usage of detecting and drawing chessboard corners: : Size patternsize ( 8 , 6 ) ; // interior number of corners Mat gray = ... . ; // source image vector &lt; Point2f &gt; corners ; // this will be filled by the detected corners // CALIB_CB_FAST_CHECK saves a lot of time on images // that do not contain any chessboard corners bool patternfound = findChessboardCorners ( gray , patternsize , corners , CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE CALIB_CB_FAST_CHECK); if(patternfound) cornerSubPix(gray, corners, Size(11, 11), Size(-1, -1), TermCriteria(CV_TERMCRIT_EPS + CV_TERMCRIT_ITER, 30, 0.1)); drawChessboardCorners(img, patternsize, Mat(corners), patternfound); * * Note * * : The function requires white space ( like a square - thick border , the wider the better ) around the board to make the detection more robust in various environments . Otherwise , if there is no border and the background is dark , the outer black squares cannot be segmented properly and so the square grouping and ordering algorithm fails . Use gen_pattern . py ( @ref tutorial_camera_calibration_pattern ) to create checkerboard . corners : UMat flags : int Python prototype (for reference): findChessboardCorners ( image , patternSize [ , corners [ , flags ] ] ) -&gt; retval , corners","ref":"OpenCV.html#findchessboardcorners/3","title":"OpenCV.findchessboardcorners/3","type":"function"},{"doc":"","ref":"OpenCV.html#findchessboardcornerssb/2","title":"OpenCV.findchessboardcornerssb/2","type":"function"},{"doc":"Has overloading in C++ corners : UMat flags : int Python prototype (for reference): findChessboardCornersSB ( image , patternSize [ , corners [ , flags ] ] ) -&gt; retval , corners","ref":"OpenCV.html#findchessboardcornerssb/3","title":"OpenCV.findchessboardcornerssb/3","type":"function"},{"doc":"","ref":"OpenCV.html#findchessboardcornerssbwithmeta/3","title":"OpenCV.findchessboardcornerssbwithmeta/3","type":"function"},{"doc":"Finds the positions of internal corners of the chessboard using a sector based approach. image . patternSize . ( patternSize = cv::Size(points_per_row,points_per_colum) = cv::Size(columns,rows) ). corners . flags . @ref CALIB_CB_NORMALIZE_IMAGE Normalize the image gamma with equalizeHist before detection. @ref CALIB_CB_EXHAUSTIVE Run an exhaustive search to improve detection rate. @ref CALIB_CB_ACCURACY Up sample input image to improve sub-pixel accuracy due to aliasing effects. @ref CALIB_CB_LARGER The detected pattern is allowed to be larger than patternSize (see description). @ref CALIB_CB_MARKER The detected pattern must have a marker (see description). This should be used if an accurate camera calibration is required. meta . Each entry stands for one corner of the pattern and can have one of the following values: 0 = no meta data attached 1 = left-top corner of a black cell 2 = left-top corner of a white cell 3 = left-top corner of a black cell with a white marker dot 4 = left-top corner of a white cell with a black marker dot (pattern origin in case of markers otherwise first corner) The function is analog to #findChessboardCorners but uses a localized radon transformation approximated by box filters being more robust to all sort of noise, faster on larger images and is able to directly return the sub-pixel position of the internal chessboard corners. The Method is based on the paper @cite duda2018 &quot;Accurate Detection and Localization of Checkerboard Corners for Calibration&quot; demonstrating that the returned sub-pixel positions are more accurate than the one returned by cornerSubPix allowing a precise camera calibration for demanding applications. In the case, the flags @ref CALIB_CB_LARGER or @ref CALIB_CB_MARKER are given, the result can be recovered from the optional meta array. Both flags are helpful to use calibration patterns exceeding the field of view of the camera. These oversized patterns allow more accurate calibrations as corners can be utilized, which are as close as possible to the image borders. For a consistent coordinate system across all images, the optional marker (see image below) can be used to move the origin of the board to the location where the black circle is located. Note : The function requires a white boarder with roughly the same width as one of the checkerboard fields around the whole board to improve the detection in various environments. In addition, because of the localized radon transformation it is beneficial to use round corners for the field corners which are located on the outside of the board. The following figure illustrates a sample checkerboard optimized for the detection. However, any other checkerboard can be used as well. Use gen_pattern.py (@ref tutorial_camera_calibration_pattern) to create checkerboard. corners : UMat meta : UMat Python prototype (for reference): findChessboardCornersSBWithMeta ( image , patternSize , flags [ , corners [ , meta ] ] ) -&gt; retval , corners , meta","ref":"OpenCV.html#findchessboardcornerssbwithmeta/4","title":"OpenCV.findchessboardcornerssbwithmeta/4","type":"function"},{"doc":"","ref":"OpenCV.html#findcirclesgrid/2","title":"OpenCV.findcirclesgrid/2","type":"function"},{"doc":"","ref":"OpenCV.html#findcirclesgrid/3","title":"OpenCV.findcirclesgrid/3","type":"function"},{"doc":"","ref":"OpenCV.html#findcirclesgrid/5","title":"OpenCV.findcirclesgrid/5","type":"function"},{"doc":"Finds centers in the grid of circles. image . patternSize . ( patternSize = Size(points_per_row, points_per_colum) ). centers . flags . @ref CALIB_CB_SYMMETRIC_GRID uses symmetric pattern of circles. @ref CALIB_CB_ASYMMETRIC_GRID uses asymmetric pattern of circles. @ref CALIB_CB_CLUSTERING uses a special algorithm for grid detection. It is more robust to perspective distortions but much more sensitive to background clutter. blobDetector . If blobDetector is NULL then image represents Point2f array of candidates. parameters . The function attempts to determine whether the input image contains a grid of circles. If it is, the function locates centers of the circles. The function returns a non-zero value if all of the centers have been found and they have been placed in a certain order (row by row, left to right in every row). Otherwise, if the function fails to find all the corners or reorder them, it returns 0. Sample usage of detecting and drawing the centers of circles: : Size patternsize ( 7 , 7 ) ; // number of centers Mat gray = ... ; // source image vector &lt; Point2f &gt; centers ; // this will be filled by the detected centers bool patternfound = findCirclesGrid ( gray , patternsize , centers ) ; drawChessboardCorners ( img , patternsize , Mat ( centers ) , patternfound ) ; Note : The function requires white space (like a square-thick border, the wider the better) around the board to make the detection more robust in various environments. centers : UMat Python prototype (for reference): findCirclesGrid ( image , patternSize , flags , blobDetector , parameters [ , centers ] ) -&gt; retval , centers","ref":"OpenCV.html#findcirclesgrid/6","title":"OpenCV.findcirclesgrid/6","type":"function"},{"doc":"","ref":"OpenCV.html#findcontours/3","title":"OpenCV.findcontours/3","type":"function"},{"doc":"Finds contours in a binary image. The function retrieves contours from the binary image using the algorithm @cite Suzuki85 . The contours are a useful tool for shape analysis and object detection and recognition. See squares.cpp in the OpenCV sample directory. Note : Since opencv 3.2 source image is not modified by this function. image . pixels remain 0's, so the image is treated as binary . You can use #compare, #inRange, #threshold , #adaptiveThreshold, #Canny, and others to create a binary image out of a grayscale or color one. If mode equals to #RETR_CCOMP or #RETR_FLOODFILL, the input can also be a 32-bit integer image of labels (CV_32SC1). contours . std::vector&lt;std::vector&lt;cv::Point&gt; &gt;). hierarchy . as many elements as the number of contours. For each i-th contour contours[i], the elements hierarchy[i][0] , hierarchy[i][1] , hierarchy[i][2] , and hierarchy[i][3] are set to 0-based indices in contours of the next and previous contours at the same hierarchical level, the first child contour and the parent contour, respectively. If for the contour i there are no next, previous, parent, or nested contours, the corresponding elements of hierarchy[i] will be negative. Note : In Python, hierarchy is nested inside a top level array. Use hierarchy[0][i] to access hierarchical elements of i-th contour. mode . method . offset . contours are extracted from the image ROI and then they should be analyzed in the whole image context. contours : vector_UMat hierarchy : UMat offset : Point Python prototype (for reference): findContours ( image , mode , method [ , contours [ , hierarchy [ , offset ] ] ] ) -&gt; contours , hierarchy","ref":"OpenCV.html#findcontours/4","title":"OpenCV.findcontours/4","type":"function"},{"doc":"","ref":"OpenCV.html#findessentialmat/7","title":"OpenCV.findessentialmat/7","type":"function"},{"doc":"mask : UMat Python prototype (for reference): findEssentialMat ( points1 , points2 , cameraMatrix1 , cameraMatrix2 , dist_coeff1 , dist_coeff2 , params [ , mask ] ) -&gt; retval , mask","ref":"OpenCV.html#findessentialmat/8","title":"OpenCV.findessentialmat/8","type":"function"},{"doc":"","ref":"OpenCV.html#findfundamentalmat/3","title":"OpenCV.findfundamentalmat/3","type":"function"},{"doc":"","ref":"OpenCV.html#findfundamentalmat/4","title":"OpenCV.findfundamentalmat/4","type":"function"},{"doc":"","ref":"OpenCV.html#findfundamentalmat/6","title":"OpenCV.findfundamentalmat/6","type":"function"},{"doc":"Calculates a fundamental matrix from the corresponding points in two images. points1 . floating-point (single or double precision). points2 . method . @ref FM_7POINT for a 7-point algorithm. \\f$N = 7\\f$ @ref FM_8POINT for an 8-point algorithm. \\f$N \\ge 8\\f$ @ref FM_RANSAC for the RANSAC algorithm. \\f$N \\ge 8\\f$ @ref FM_LMEDS for the LMedS algorithm. \\f$N \\ge 8\\f$ ransacReprojThreshold . line in pixels, beyond which the point is considered an outlier and is not used for computing the final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the point localization, image resolution, and the image noise. confidence . of confidence (probability) that the estimated matrix is correct. mask . maxIters . The epipolar geometry is described by the following equation: \\f[[p_2; 1]^T F [p_1; 1] = 0\\f] where \\f$F\\f$ is a fundamental matrix, \\f$p_1\\f$ and \\f$p_2\\f$ are corresponding points in the first and the second images, respectively. The function calculates the fundamental matrix using one of four methods listed above and returns the found fundamental matrix. Normally just one matrix is found. But in case of the 7-point algorithm, the function may return up to 3 solutions ( \\f$9 \\times 3\\f$ matrix that stores all 3 matrices sequentially). The calculated fundamental matrix may be passed further to computeCorrespondEpilines that finds the epipolar lines corresponding to the specified points. It can also be passed to #stereoRectifyUncalibrated to compute the rectification transformation. : // Example . Estimation of fundamental matrix using the RANSAC algorithm int point_count = 100 ; vector &lt; Point2f &gt; points1 ( point_count ) ; vector &lt; Point2f &gt; points2 ( point_count ) ; // initialize the points here ... for ( int i = 0 ; i &lt; point_count ; i ++ ) { points1 [ i ] = ... ; points2 [ i ] = ... ; } Mat fundamental_matrix = findFundamentalMat ( points1 , points2 , FM_RANSAC , 3 , 0.99 ) ; mask : UMat Python prototype (for reference): findFundamentalMat ( points1 , points2 , method , ransacReprojThreshold , confidence , maxIters [ , mask ] ) -&gt; retval , mask","ref":"OpenCV.html#findfundamentalmat/7","title":"OpenCV.findfundamentalmat/7","type":"function"},{"doc":"","ref":"OpenCV.html#findhomography/3","title":"OpenCV.findhomography/3","type":"function"},{"doc":"Has overloading in C++ mask : UMat Python prototype (for reference): findHomography ( srcPoints , dstPoints , params [ , mask ] ) -&gt; retval , mask","ref":"OpenCV.html#findhomography/4","title":"OpenCV.findhomography/4","type":"function"},{"doc":"","ref":"OpenCV.html#findnonzero/1","title":"OpenCV.findnonzero/1","type":"function"},{"doc":"Returns the list of locations of non-zero pixels Given a binary matrix (likely returned from an operation such as threshold(), compare(), &gt;, ==, etc, return all of the non-zero indices as a cv::Mat or std::vector&lt;cv::Point&gt; (x,y) For example: cv::Mat binaryImage; // input, binary image cv::Mat locations; // output, locations of non-zero pixels cv::findNonZero(binaryImage, locations); // access pixel coordinates Point pnt = locations.at&lt;Point&gt;(i); or cv::Mat binaryImage; // input, binary image vector&lt;Point&gt; locations; // output, locations of non-zero pixels cv::findNonZero(binaryImage, locations); // access pixel coordinates Point pnt = locations[i]; src . idx . idx : UMat Python prototype (for reference): findNonZero ( src [ , idx ] ) -&gt; idx","ref":"OpenCV.html#findnonzero/2","title":"OpenCV.findnonzero/2","type":"function"},{"doc":"","ref":"OpenCV.html#findtransformecc/3","title":"OpenCV.findtransformecc/3","type":"function"},{"doc":"","ref":"OpenCV.html#findtransformecc/4","title":"OpenCV.findtransformecc/4","type":"function"},{"doc":"","ref":"OpenCV.html#findtransformecc/7","title":"OpenCV.findtransformecc/7","type":"function"},{"doc":"","ref":"OpenCV.html#fisheye_calibrate/5","title":"OpenCV.fisheye_calibrate/5","type":"function"},{"doc":"Performs camera calibaration objectPoints . coordinate space. imagePoints . imagePoints.size() and objectPoints.size() and imagePoints[i].size() must be equal to objectPoints[i].size() for each i. image_size . k . \\f$\\cameramatrix{A}\\f$ . If @ref fisheye::CALIB_USE_INTRINSIC_GUESS is specified, some or all of fx, fy, cx, cy must be initialized before calling the function. d . rvecs . That is, each k-th rotation vector together with the corresponding k-th translation vector (see the next output parameter description) brings the calibration pattern from the model coordinate space (in which object points are specified) to the world coordinate space, that is, a real position of the calibration pattern in the k-th pattern view (k=0.. M -1). tvecs . flags . @ref fisheye::CALIB_USE_INTRINSIC_GUESS cameraMatrix contains valid initial values of fx, fy, cx, cy that are optimized further. Otherwise, (cx, cy) is initially set to the image center ( imageSize is used), and focal distances are computed in a least-squares fashion. @ref fisheye::CALIB_RECOMPUTE_EXTRINSIC Extrinsic will be recomputed after each iteration of intrinsic optimization. @ref fisheye::CALIB_CHECK_COND The functions will check validity of condition number. @ref fisheye::CALIB_FIX_SKEW Skew coefficient (alpha) is set to zero and stay zero. @ref fisheye::CALIB_FIX_K1,..., @ref fisheye::CALIB_FIX_K4 Selected distortion coefficients are set to zeros and stay zero. @ref fisheye::CALIB_FIX_PRINCIPAL_POINT The principal point is not changed during the global optimization. It stays at the center or at a different location specified when @ref fisheye::CALIB_USE_INTRINSIC_GUESS is set too. @ref fisheye::CALIB_FIX_FOCAL_LENGTH The focal length is not changed during the global optimization. It is the \\f$max(width,height)/\\pi\\f$ or the provided \\f$f_x\\f$, \\f$f_y\\f$ when @ref fisheye::CALIB_USE_INTRINSIC_GUESS is set too. criteria . rvecs : vector_UMat tvecs : vector_UMat flags : int criteria : TermCriteria Python prototype (for reference): calibrate ( objectPoints , imagePoints , image_size , K , D [ , rvecs [ , tvecs [ , flags [ , criteria ] ] ] ] ) -&gt; retval , K , D , rvecs , tvecs","ref":"OpenCV.html#fisheye_calibrate/6","title":"OpenCV.fisheye_calibrate/6","type":"function"},{"doc":"","ref":"OpenCV.html#fisheye_distortpoints/3","title":"OpenCV.fisheye_distortpoints/3","type":"function"},{"doc":"Distorts 2D points using fisheye model. undistorted . the number of points in the view. k . d . alpha . distorted . Note that the function assumes the camera intrinsic matrix of the undistorted points to be identity. This means if you want to transform back points undistorted with #fisheye::undistortPoints you have to multiply them with \\f$P^{-1}\\f$. distorted : UMat alpha : double Python prototype (for reference): distortPoints ( undistorted , K , D [ , distorted [ , alpha ] ] ) -&gt; distorted","ref":"OpenCV.html#fisheye_distortpoints/4","title":"OpenCV.fisheye_distortpoints/4","type":"function"},{"doc":"","ref":"OpenCV.html#fisheye_estimatenewcameramatrixforundistortrectify/4","title":"OpenCV.fisheye_estimatenewcameramatrixforundistortrectify/4","type":"function"},{"doc":"Estimates new camera intrinsic matrix for undistortion or rectification. k . image_size . d . r . 1-channel or 1x1 3-channel p . balance . length. Balance is in range of [0, 1]. new_size . fov_scale . p : UMat balance : double new_size : Size fov_scale : double Python prototype (for reference): estimateNewCameraMatrixForUndistortRectify ( K , D , image_size , R [ , P [ , balance [ , new_size [ , fov_scale ] ] ] ] ) -&gt; P","ref":"OpenCV.html#fisheye_estimatenewcameramatrixforundistortrectify/5","title":"OpenCV.fisheye_estimatenewcameramatrixforundistortrectify/5","type":"function"},{"doc":"","ref":"OpenCV.html#fisheye_initundistortrectifymap/6","title":"OpenCV.fisheye_initundistortrectifymap/6","type":"function"},{"doc":"Computes undistortion and rectification maps for image transform by #remap. If D is empty zero distortion is used, if R or P is empty identity matrixes are used. k . d . r . 1-channel or 1x1 3-channel p . size . m1type . for details. map1 . map2 . map1 : UMat map2 : UMat Python prototype (for reference): initUndistortRectifyMap ( K , D , R , P , size , m1type [ , map1 [ , map2 ] ] ) -&gt; map1 , map2","ref":"OpenCV.html#fisheye_initundistortrectifymap/7","title":"OpenCV.fisheye_initundistortrectifymap/7","type":"function"},{"doc":"","ref":"OpenCV.html#fisheye_projectpoints/5","title":"OpenCV.fisheye_projectpoints/5","type":"function"},{"doc":"Has overloading in C++ imagePoints : UMat alpha : double jacobian : UMat Python prototype (for reference): projectPoints ( objectPoints , rvec , tvec , K , D [ , imagePoints [ , alpha [ , jacobian ] ] ] ) -&gt; imagePoints , jacobian","ref":"OpenCV.html#fisheye_projectpoints/6","title":"OpenCV.fisheye_projectpoints/6","type":"function"},{"doc":"","ref":"OpenCV.html#fisheye_stereocalibrate/8","title":"OpenCV.fisheye_stereocalibrate/8","type":"function"},{"doc":"Performs stereo calibration objectPoints . imagePoints1 . observed by the first camera. imagePoints2 . observed by the second camera. k1 . \\f$\\vecthreethree{f_x^{(j)}}{0}{c_x^{(j)}}{0}{f_y^{(j)}}{c_y^{(j)}}{0}{0}{1}\\f$ , \\f$j = 0,\\, 1\\f$ . If any of @ref fisheye::CALIB_USE_INTRINSIC_GUESS , @ref fisheye::CALIB_FIX_INTRINSIC are specified, some or all of the matrix components must be initialized. d1 . k2 . d2 . similar to D1 . imageSize . r . t . flags . @ref fisheye::CALIB_FIX_INTRINSIC Fix K1, K2? and D1, D2? so that only R, T matrices are estimated. @ref fisheye::CALIB_USE_INTRINSIC_GUESS K1, K2 contains valid initial values of fx, fy, cx, cy that are optimized further. Otherwise, (cx, cy) is initially set to the image center (imageSize is used), and focal distances are computed in a least-squares fashion. @ref fisheye::CALIB_RECOMPUTE_EXTRINSIC Extrinsic will be recomputed after each iteration of intrinsic optimization. @ref fisheye::CALIB_CHECK_COND The functions will check validity of condition number. @ref fisheye::CALIB_FIX_SKEW Skew coefficient (alpha) is set to zero and stay zero. @ref fisheye::CALIB_FIX_K1,..., @ref fisheye::CALIB_FIX_K4 Selected distortion coefficients are set to zeros and stay zero. criteria . r : UMat t : UMat flags : int criteria : TermCriteria Python prototype (for reference): stereoCalibrate ( objectPoints , imagePoints1 , imagePoints2 , K1 , D1 , K2 , D2 , imageSize [ , R [ , T [ , flags [ , criteria ] ] ] ] ) -&gt; retval , K1 , D1 , K2 , D2 , R , T","ref":"OpenCV.html#fisheye_stereocalibrate/9","title":"OpenCV.fisheye_stereocalibrate/9","type":"function"},{"doc":"","ref":"OpenCV.html#fisheye_stereorectify/8","title":"OpenCV.fisheye_stereorectify/8","type":"function"},{"doc":"Stereo rectification for fisheye camera model k1 . d1 . k2 . d2 . imageSize . r . cameras. tvec . r1 . r2 . p1 . camera. p2 . camera. q . flags . the function makes the principal points of each camera have the same pixel coordinates in the rectified views. And if the flag is not set, the function may still shift the images in the horizontal or vertical direction (depending on the orientation of epipolar lines) to maximize the useful image area. newImageSize . #initUndistortRectifyMap (see the stereo_calib.cpp sample in OpenCV samples directory). When (0,0) is passed (default), it is set to the original imageSize . Setting it to larger value can help you preserve details in the original image, especially when there is a big radial distortion. balance . length. Balance is in range of [0, 1]. fov_scale . r1 : UMat r2 : UMat p1 : UMat p2 : UMat q : UMat newImageSize : Size balance : double fov_scale : double Python prototype (for reference): stereoRectify ( K1 , D1 , K2 , D2 , imageSize , R , tvec , flags [ , R1 [ , R2 [ , P1 [ , P2 [ , Q [ , newImageSize [ , balance [ , fov_scale ] ] ] ] ] ] ] ] ) -&gt; R1 , R2 , P1 , P2 , Q","ref":"OpenCV.html#fisheye_stereorectify/9","title":"OpenCV.fisheye_stereorectify/9","type":"function"},{"doc":"","ref":"OpenCV.html#fisheye_undistortimage/3","title":"OpenCV.fisheye_undistortimage/3","type":"function"},{"doc":"Transforms an image to compensate for fisheye lens distortion. distorted . undistorted . k . d . knew . may additionally scale and shift the result by using a different matrix. new_size . The function transforms an image to compensate radial and tangential lens distortion. The function is simply a combination of #fisheye::initUndistortRectifyMap (with unity R ) and #remap (with bilinear interpolation). See the former function for details of the transformation being performed. See below the results of undistortImage. a) result of undistort of perspective camera model (all possible coefficients (k_1, k_2, k_3, k_4, k_5, k_6) of distortion were optimized under calibration) b) result of #fisheye::undistortImage of fisheye camera model (all possible coefficients (k_1, k_2, k_3, k_4) of fisheye distortion were optimized under calibration) c) original image was captured with fisheye lens Pictures a) and b) almost the same. But if we consider points of image located far from the center of image, we can notice that on image a) these points are distorted. undistorted : UMat knew : UMat new_size : Size Python prototype (for reference): undistortImage ( distorted , K , D [ , undistorted [ , Knew [ , new_size ] ] ] ) -&gt; undistorted","ref":"OpenCV.html#fisheye_undistortimage/4","title":"OpenCV.fisheye_undistortimage/4","type":"function"},{"doc":"","ref":"OpenCV.html#fisheye_undistortpoints/3","title":"OpenCV.fisheye_undistortpoints/3","type":"function"},{"doc":"Undistorts 2D points using fisheye model distorted . number of points in the view. k . d . r . 1-channel or 1x1 3-channel p . undistorted . undistorted : UMat r : UMat p : UMat Python prototype (for reference): undistortPoints ( distorted , K , D [ , undistorted [ , R [ , P ] ] ] ) -&gt; undistorted","ref":"OpenCV.html#fisheye_undistortpoints/4","title":"OpenCV.fisheye_undistortpoints/4","type":"function"},{"doc":"","ref":"OpenCV.html#fitellipse/1","title":"OpenCV.fitellipse/1","type":"function"},{"doc":"","ref":"OpenCV.html#fitellipseams/1","title":"OpenCV.fitellipseams/1","type":"function"},{"doc":"","ref":"OpenCV.html#fitellipsedirect/1","title":"OpenCV.fitellipsedirect/1","type":"function"},{"doc":"","ref":"OpenCV.html#fitline/5","title":"OpenCV.fitline/5","type":"function"},{"doc":"Fits a line to a 2D or 3D point set. The function fitLine fits a line to a 2D or 3D point set by minimizing \\f$\\sum_i \\rho(r_i)\\f$ where \\f$r_i\\f$ is a distance between the \\f$i^{th}\\f$ point, the line and \\f$\\rho(r)\\f$ is a distance function, one of the following: DIST_L2 \\f[\\rho (r) = r^2/2 \\quad \\text{(the simplest and the fastest least-squares method)}\\f] DIST_L1 \\f[\\rho (r) = r\\f] DIST_L12 \\f[\\rho (r) = 2 \\cdot ( \\sqrt{1 + \\frac{r^2}{2}} - 1)\\f] DIST_FAIR \\f[\\rho \\left (r \\right ) = C^2 \\cdot \\left ( \\frac{r}{C} - \\log{\\left(1 + \\frac{r}{C}\\right)} \\right ) \\quad \\text{where} \\quad C=1.3998\\f] DIST_WELSCH \\f[\\rho \\left (r \\right ) = \\frac{C^2}{2} \\cdot \\left ( 1 - \\exp{\\left(-\\left(\\frac{r}{C}\\right)^2\\right)} \\right ) \\quad \\text{where} \\quad C=2.9846\\f] DIST_HUBER \\f[\\rho (r) = \\fork{r^2/2}{if (r &lt; C)}{C \\cdot (r-C/2)}{otherwise} \\quad \\text{where} \\quad C=1.345\\f] The algorithm is based on the M-estimator ( http://en.wikipedia.org/wiki/M-estimator ) technique that iteratively fits the line using the weighted least-squares algorithm. After each iteration the weights \\f$w_i\\f$ are adjusted to be inversely proportional to \\f$\\rho(r_i)\\f$ . points . line . (like Vec4f) - (vx, vy, x0, y0), where (vx, vy) is a normalized vector collinear to the line and (x0, y0) is a point on the line. In case of 3D fitting, it should be a vector of 6 elements (like Vec6f) - (vx, vy, vz, x0, y0, z0), where (vx, vy, vz) is a normalized vector collinear to the line and (x0, y0, z0) is a point on the line. distType . param . is chosen. reps . aeps . line : UMat Python prototype (for reference): fitLine ( points , distType , param , reps , aeps [ , line ] ) -&gt; line","ref":"OpenCV.html#fitline/6","title":"OpenCV.fitline/6","type":"function"},{"doc":"","ref":"OpenCV.html#flann_flann_index_index/2","title":"OpenCV.flann_flann_index_index/2","type":"function"},{"doc":"distType : cvflann_flann_distance_t Python prototype (for reference): Index ( features , params [ , distType ] ) -&gt; &lt; flann_Index object &gt;","ref":"OpenCV.html#flann_flann_index_index/3","title":"OpenCV.flann_flann_index_index/3","type":"function"},{"doc":"","ref":"OpenCV.html#flannbasedmatcher_create/0","title":"OpenCV.flannbasedmatcher_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#flannbasedmatcher_flannbasedmatcher/0","title":"OpenCV.flannbasedmatcher_flannbasedmatcher/0","type":"function"},{"doc":"indexParams : Ptr&lt;flann::IndexParams&gt; searchParams : Ptr&lt;flann::SearchParams&gt; Python prototype (for reference): FlannBasedMatcher ( [ , indexParams [ , searchParams ] ] ) -&gt; &lt; FlannBasedMatcher object &gt;","ref":"OpenCV.html#flannbasedmatcher_flannbasedmatcher/1","title":"OpenCV.flannbasedmatcher_flannbasedmatcher/1","type":"function"},{"doc":"","ref":"OpenCV.html#flip/2","title":"OpenCV.flip/2","type":"function"},{"doc":"Flips a 2D array around vertical, horizontal, or both axes. The function cv::flip flips the array in one of three different ways (row and column indices are 0-based): \\f[\\texttt{dst} _{ij} = \\left\\{ \\begin{array}{l l} \\texttt{src} _{\\texttt{src.rows}-i-1,j} &amp; if\\; \\texttt{flipCode} = 0 \\\\ \\texttt{src} _{i, \\texttt{src.cols} -j-1} &amp; if\\; \\texttt{flipCode} &gt; 0 \\\\ \\texttt{src} _{ \\texttt{src.rows} -i-1, \\texttt{src.cols} -j-1} &amp; if\\; \\texttt{flipCode} &lt; 0 \\\\ \\end{array} \\right.\\f] The example scenarios of using the function are the following: Vertical flipping of the image ( flipCode == 0 ) to switch between top-left and bottom-left image origin. This is a typical operation in video processing on Microsoft Windows* OS. Horizontal flipping of the image with the subsequent horizontal shift and absolute difference calculation to check for a vertical-axis symmetry (flipCode &gt; 0). Simultaneous horizontal and vertical flipping of the image with the subsequent shift and absolute difference calculation to check for a central symmetry (flipCode \\&lt; 0). Reversing the order of point arrays ( flipCode \\ &gt; 0 or flipCode == 0). src . dst . flipCode . flipping around the x-axis and positive value (for example, 1) means flipping around y-axis. Negative value (for example, -1) means flipping around both axes. @sa transpose , repeat , completeSymm dst : UMat Python prototype (for reference): flip ( src , flipCode [ , dst ] ) -&gt; dst","ref":"OpenCV.html#flip/3","title":"OpenCV.flip/3","type":"function"},{"doc":"","ref":"OpenCV.html#floodfill/4","title":"OpenCV.floodfill/4","type":"function"},{"doc":"Fills a connected component with the given color. The function cv::floodFill fills a connected component starting from the seed point with the specified color. The connectivity is determined by the color/brightness closeness of the neighbor pixels. The pixel at \\f$(x,y)\\f$ is considered to belong to the repainted domain if: in case of a grayscale image and floating range \\f[\\texttt{src} (x',y')- \\texttt{loDiff} \\leq \\texttt{src} (x,y) \\leq \\texttt{src} (x',y')+ \\texttt{upDiff}\\f] in case of a grayscale image and fixed range \\f[\\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)- \\texttt{loDiff} \\leq \\texttt{src} (x,y) \\leq \\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)+ \\texttt{upDiff}\\f] in case of a color image and floating range \\f[\\texttt{src} (x',y')_r- \\texttt{loDiff} _r \\leq \\texttt{src} (x,y)_r \\leq \\texttt{src} (x',y')_r+ \\texttt{upDiff} _r,\\f] \\f[\\texttt{src} (x',y')_g- \\texttt{loDiff} _g \\leq \\texttt{src} (x,y)_g \\leq \\texttt{src} (x',y')_g+ \\texttt{upDiff} _g\\f] and \\f[\\texttt{src} (x',y')_b- \\texttt{loDiff} _b \\leq \\texttt{src} (x,y)_b \\leq \\texttt{src} (x',y')_b+ \\texttt{upDiff} _b\\f] in case of a color image and fixed range \\f[\\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)_r- \\texttt{loDiff} _r \\leq \\texttt{src} (x,y)_r \\leq \\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)_r+ \\texttt{upDiff} _r,\\f] \\f[\\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)_g- \\texttt{loDiff} _g \\leq \\texttt{src} (x,y)_g \\leq \\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)_g+ \\texttt{upDiff} _g\\f] and \\f[\\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)_b- \\texttt{loDiff} _b \\leq \\texttt{src} (x,y)_b \\leq \\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)_b+ \\texttt{upDiff} _b\\f] where \\f$src(x',y')\\f$ is the value of one of pixel neighbors that is already known to belong to the component. That is, to be added to the connected component, a color/brightness of the pixel should be close enough to: Color/brightness of one of its neighbors that already belong to the connected component in case of a floating range. Color/brightness of the seed point in case of a fixed range. Use these functions to either mark a connected component with the specified color in-place, or build a mask and then extract the contour, or copy the region to another image, and so on. image . function unless the #FLOODFILL_MASK_ONLY flag is set in the second variant of the function. See the details below. mask . taller than image. Since this is both an input and output parameter, you must take responsibility of initializing it. Flood-filling cannot go across non-zero pixels in the input mask. For example, an edge detector output can be used as a mask to stop filling at edges. On output, pixels in the mask corresponding to filled pixels in the image are set to 1 or to the a value specified in flags as described below. Additionally, the function fills the border of the mask with ones to simplify internal processing. It is therefore possible to use the same mask in multiple calls to the function to make sure the filled areas do not overlap. seedPoint . newVal . loDiff . one of its neighbors belonging to the component, or a seed pixel being added to the component. upDiff . one of its neighbors belonging to the component, or a seed pixel being added to the component. rect . repainted domain. flags . 4 means that only the four nearest neighbor pixels (those that share an edge) are considered. A connectivity value of 8 means that the eight nearest neighbor pixels (those that share a corner) will be considered. The next 8 bits (8-16) contain a value between 1 and 255 with which to fill the mask (the default value is 1). For example, 4 | ( 255 \\&lt;\\&lt; 8 ) will consider 4 nearest neighbours and fill the mask with a value of 255. The following additional options occupy higher bits and therefore may be further combined with the connectivity and mask fill values using bit-wise or (|), see #FloodFillFlags. Note : Since the mask is larger than the filled image, a pixel \\f$(x, y)\\f$ in image corresponds to the pixel \\f$(x+1, y+1)\\f$ in the mask . @sa findContours loDiff : Scalar upDiff : Scalar flags : int Python prototype (for reference): floodFill ( image , mask , seedPoint , newVal [ , loDiff [ , upDiff [ , flags ] ] ] ) -&gt; retval , image , mask , rect","ref":"OpenCV.html#floodfill/5","title":"OpenCV.floodfill/5","type":"function"},{"doc":"","ref":"OpenCV.html#gaussianblur/3","title":"OpenCV.gaussianblur/3","type":"function"},{"doc":"Blurs an image using a Gaussian filter. The function convolves the source image with the specified Gaussian kernel. In-place filtering is supported. src . independently, but the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F. dst . ksize . positive and odd. Or, they can be zero's and then they are computed from sigma. sigmaX . sigmaY . equal to sigmaX, if both sigmas are zeros, they are computed from ksize.width and ksize.height, respectively (see #getGaussianKernel for details); to fully control the result regardless of possible future modifications of all this semantics, it is recommended to specify all of ksize, sigmaX, and sigmaY. borderType . @sa sepFilter2D, filter2D, blur, boxFilter, bilateralFilter, medianBlur dst : UMat sigmaY : double borderType : int Python prototype (for reference): GaussianBlur ( src , ksize , sigmaX [ , dst [ , sigmaY [ , borderType ] ] ] ) -&gt; dst","ref":"OpenCV.html#gaussianblur/4","title":"OpenCV.gaussianblur/4","type":"function"},{"doc":"","ref":"OpenCV.html#gemm/5","title":"OpenCV.gemm/5","type":"function"},{"doc":"Performs generalized matrix multiplication. The function cv::gemm performs generalized matrix multiplication similar to the gemm functions in BLAS level 3. For example, gemm(src1, src2, alpha, src3, beta, dst, GEMM_1_T + GEMM_3_T) corresponds to \\f[\\texttt{dst} = \\texttt{alpha} \\cdot \\texttt{src1} ^T \\cdot \\texttt{src2} + \\texttt{beta} \\cdot \\texttt{src3} ^T\\f] In case of complex (two-channel) data, performed a complex matrix multiplication. The function can be replaced with a matrix expression. For example, the above call can be replaced with: dst = alpha*src1.t()*src2 + beta*src3.t(); src1 . CV_64FC1) or complex(CV_32FC2, CV_64FC2). src2 . alpha . src3 . should have the same type as src1 and src2. beta . dst . input matrices. flags . @sa mulTransposed , transform dst : UMat flags : int Python prototype (for reference): gemm ( src1 , src2 , alpha , src3 , beta [ , dst [ , flags ] ] ) -&gt; dst","ref":"OpenCV.html#gemm/6","title":"OpenCV.gemm/6","type":"function"},{"doc":"","ref":"OpenCV.html#getaffinetransform/2","title":"OpenCV.getaffinetransform/2","type":"function"},{"doc":"","ref":"OpenCV.html#getbuildinformation/0","title":"OpenCV.getbuildinformation/0","type":"function"},{"doc":"","ref":"OpenCV.html#getcpufeaturesline/0","title":"OpenCV.getcpufeaturesline/0","type":"function"},{"doc":"","ref":"OpenCV.html#getcputickcount/0","title":"OpenCV.getcputickcount/0","type":"function"},{"doc":"","ref":"OpenCV.html#getdefaultnewcameramatrix/1","title":"OpenCV.getdefaultnewcameramatrix/1","type":"function"},{"doc":"Returns the default new camera matrix. The function returns the camera matrix that is either an exact copy of the input cameraMatrix (when centerPrinicipalPoint=false ), or the modified one (when centerPrincipalPoint=true). In the latter case, the new camera matrix will be: \\f[\\begin{bmatrix} f_x &amp;&amp; 0 &amp;&amp; ( \\texttt{imgSize.width} -1)*0.5 \\\\ 0 &amp;&amp; f_y &amp;&amp; ( \\texttt{imgSize.height} -1)*0.5 \\\\ 0 &amp;&amp; 0 &amp;&amp; 1 \\end{bmatrix} ,\\f] where \\f$f_x\\f$ and \\f$f_y\\f$ are \\f$(0,0)\\f$ and \\f$(1,1)\\f$ elements of cameraMatrix, respectively. By default, the undistortion functions in OpenCV (see #initUndistortRectifyMap, #undistort) do not move the principal point. However, when you work with stereo, it is important to move the principal points in both views to the same y-coordinate (which is required by most of stereo correspondence algorithms), and may be to the same x-coordinate too. So, you can form the new camera matrix for each view where the principal points are located at the center. cameraMatrix . imgsize . centerPrincipalPoint . parameter indicates whether this location should be at the image center or not. imgsize : Size centerPrincipalPoint : bool Python prototype (for reference): getDefaultNewCameraMatrix ( cameraMatrix [ , imgsize [ , centerPrincipalPoint ] ] ) -&gt; retval","ref":"OpenCV.html#getdefaultnewcameramatrix/2","title":"OpenCV.getdefaultnewcameramatrix/2","type":"function"},{"doc":"","ref":"OpenCV.html#getderivkernels/3","title":"OpenCV.getderivkernels/3","type":"function"},{"doc":"Returns filter coefficients for computing spatial image derivatives. The function computes and returns the filter coefficients for spatial image derivatives. When ksize=FILTER_SCHARR , the Scharr \\f$3 \\times 3\\f$ kernels are generated (see #Scharr). Otherwise, Sobel kernels are generated (see #Sobel). The filters are normally passed to #sepFilter2D or to kx . ky . dx . dy . ksize . normalize . Theoretically, the coefficients should have the denominator \\f$=2^{ksize*2-dx-dy-2}\\f$. If you are going to filter floating-point images, you are likely to use the normalized kernels. But if you compute derivatives of an 8-bit image, store the results in a 16-bit image, and wish to preserve all the fractional bits, you may want to set normalize=false . ktype . kx : UMat ky : UMat normalize : bool ktype : int Python prototype (for reference): getDerivKernels ( dx , dy , ksize [ , kx [ , ky [ , normalize [ , ktype ] ] ] ] ) -&gt; kx , ky","ref":"OpenCV.html#getderivkernels/4","title":"OpenCV.getderivkernels/4","type":"function"},{"doc":"","ref":"OpenCV.html#getfontscalefromheight/2","title":"OpenCV.getfontscalefromheight/2","type":"function"},{"doc":"Calculates the font-specific size to use to achieve a given height in pixels. fontFace . pixelHeight . thickness . @return The fontSize to use for cv::putText @see cv::putText thickness : int Python prototype (for reference): getFontScaleFromHeight ( fontFace , pixelHeight [ , thickness ] ) -&gt; retval","ref":"OpenCV.html#getfontscalefromheight/3","title":"OpenCV.getfontscalefromheight/3","type":"function"},{"doc":"","ref":"OpenCV.html#getgaborkernel/5","title":"OpenCV.getgaborkernel/5","type":"function"},{"doc":"Returns Gabor filter coefficients. For more details about gabor filter equations and parameters, see: Gabor Filter . ksize . sigma . theta . lambd . gamma . psi . ktype . psi : double ktype : int Python prototype (for reference): getGaborKernel ( ksize , sigma , theta , lambd , gamma [ , psi [ , ktype ] ] ) -&gt; retval","ref":"OpenCV.html#getgaborkernel/6","title":"OpenCV.getgaborkernel/6","type":"function"},{"doc":"","ref":"OpenCV.html#getgaussiankernel/2","title":"OpenCV.getgaussiankernel/2","type":"function"},{"doc":"Returns Gaussian filter coefficients. The function computes and returns the \\f$\\texttt{ksize} \\times 1\\f$ matrix of Gaussian filter coefficients: \\f[G_i= \\alpha *e^{-(i-( \\texttt{ksize} -1)/2)^2/(2* \\texttt{sigma}^2)},\\f] where \\f$i=0..\\texttt{ksize}-1\\f$ and \\f$\\alpha\\f$ is the scale factor chosen so that \\f$\\sum_i G_i=1\\f$. Two of such generated kernels can be passed to sepFilter2D. Those functions automatically recognize smoothing kernels (a symmetrical kernel with sum of weights equal to 1) and handle them accordingly. You may also use the higher-level GaussianBlur. ksize . sigma . sigma = 0.3*((ksize-1)*0.5 - 1) + 0.8 . ktype . @sa sepFilter2D, getDerivKernels, getStructuringElement, GaussianBlur ktype : int Python prototype (for reference): getGaussianKernel ( ksize , sigma [ , ktype ] ) -&gt; retval","ref":"OpenCV.html#getgaussiankernel/3","title":"OpenCV.getgaussiankernel/3","type":"function"},{"doc":"","ref":"OpenCV.html#gethardwarefeaturename/1","title":"OpenCV.gethardwarefeaturename/1","type":"function"},{"doc":"","ref":"OpenCV.html#getloglevel/0","title":"OpenCV.getloglevel/0","type":"function"},{"doc":"","ref":"OpenCV.html#getnumberofcpus/0","title":"OpenCV.getnumberofcpus/0","type":"function"},{"doc":"","ref":"OpenCV.html#getnumthreads/0","title":"OpenCV.getnumthreads/0","type":"function"},{"doc":"","ref":"OpenCV.html#getoptimaldftsize/1","title":"OpenCV.getoptimaldftsize/1","type":"function"},{"doc":"","ref":"OpenCV.html#getoptimalnewcameramatrix/4","title":"OpenCV.getoptimalnewcameramatrix/4","type":"function"},{"doc":"Returns the new camera intrinsic matrix based on the free scaling parameter. cameraMatrix . distCoeffs . \\f$\\distcoeffs\\f$. If the vector is NULL/empty, the zero distortion coefficients are assumed. imageSize . alpha . valid) and 1 (when all the source image pixels are retained in the undistorted image). See #stereoRectify for details. newImgSize . validPixROI . undistorted image. See roi1, roi2 description in #stereoRectify . centerPrincipalPoint . principal point should be at the image center or not. By default, the principal point is chosen to best fit a subset of the source image (determined by alpha) to the corrected image. @return new_camera_matrix Output new camera intrinsic matrix. The function computes and returns the optimal new camera intrinsic matrix based on the free scaling parameter. By varying this parameter, you may retrieve only sensible pixels alpha=0 , keep all the original image pixels if there is valuable information in the corners alpha=1 , or get something in between. When alpha&gt;0 , the undistorted result is likely to have some black pixels corresponding to &quot;virtual&quot; pixels outside of the captured distorted image. The original camera intrinsic matrix, distortion coefficients, the computed new camera intrinsic matrix, and newImageSize should be passed to #initUndistortRectifyMap to produce the maps for #remap . newImgSize : Size centerPrincipalPoint : bool Python prototype (for reference): getOptimalNewCameraMatrix ( cameraMatrix , distCoeffs , imageSize , alpha [ , newImgSize [ , centerPrincipalPoint ] ] ) -&gt; retval , validPixROI","ref":"OpenCV.html#getoptimalnewcameramatrix/5","title":"OpenCV.getoptimalnewcameramatrix/5","type":"function"},{"doc":"","ref":"OpenCV.html#getperspectivetransform/2","title":"OpenCV.getperspectivetransform/2","type":"function"},{"doc":"Calculates a perspective transform from four pairs of the corresponding points. The function calculates the \\f$3 \\times 3\\f$ matrix of a perspective transform so that: \\f[\\begin{bmatrix} t_i x'_i \\\\ t_i y'_i \\\\ t_i \\end{bmatrix} = \\texttt{map_matrix} \\cdot \\begin{bmatrix} x_i \\\\ y_i \\\\ 1 \\end{bmatrix}\\f] where \\f[dst(i)=(x'_i,y'_i), src(i)=(x_i, y_i), i=0,1,2,3\\f] src . dst . solveMethod . @sa findHomography, warpPerspective, perspectiveTransform solveMethod : int Python prototype (for reference): getPerspectiveTransform ( src , dst [ , solveMethod ] ) -&gt; retval","ref":"OpenCV.html#getperspectivetransform/3","title":"OpenCV.getperspectivetransform/3","type":"function"},{"doc":"","ref":"OpenCV.html#getrectsubpix/3","title":"OpenCV.getrectsubpix/3","type":"function"},{"doc":"Retrieves a pixel rectangle from an image with sub-pixel accuracy. The function getRectSubPix extracts pixels from src: \\f[patch(x, y) = src(x + \\texttt{center.x} - ( \\texttt{dst.cols} -1)*0.5, y + \\texttt{center.y} - ( \\texttt{dst.rows} -1)*0.5)\\f] where the values of the pixels at non-integer coordinates are retrieved using bilinear interpolation. Every channel of multi-channel images is processed independently. Also the image should be a single channel or three channel image. While the center of the rectangle must be inside the image, parts of the rectangle may be outside. image . patchSize . center . source image. The center must be inside the image. patch . patchType . @sa warpAffine, warpPerspective patch : UMat patchType : int Python prototype (for reference): getRectSubPix ( image , patchSize , center [ , patch [ , patchType ] ] ) -&gt; patch","ref":"OpenCV.html#getrectsubpix/4","title":"OpenCV.getrectsubpix/4","type":"function"},{"doc":"","ref":"OpenCV.html#getrotationmatrix2d/3","title":"OpenCV.getrotationmatrix2d/3","type":"function"},{"doc":"","ref":"OpenCV.html#getstructuringelement/2","title":"OpenCV.getstructuringelement/2","type":"function"},{"doc":"Returns a structuring element of the specified size and shape for morphological operations. The function constructs and returns the structuring element that can be further passed to #erode, #dilate or #morphologyEx. But you can also construct an arbitrary binary mask yourself and use it as the structuring element. shape . ksize . anchor . anchor is at the center. Note that only the shape of a cross-shaped element depends on the anchor position. In other cases the anchor just regulates how much the result of the morphological operation is shifted. anchor : Point Python prototype (for reference): getStructuringElement ( shape , ksize [ , anchor ] ) -&gt; retval","ref":"OpenCV.html#getstructuringelement/3","title":"OpenCV.getstructuringelement/3","type":"function"},{"doc":"","ref":"OpenCV.html#gettextsize/4","title":"OpenCV.gettextsize/4","type":"function"},{"doc":"","ref":"OpenCV.html#getthreadnum/0","title":"OpenCV.getthreadnum/0","type":"function"},{"doc":"","ref":"OpenCV.html#gettickcount/0","title":"OpenCV.gettickcount/0","type":"function"},{"doc":"","ref":"OpenCV.html#gettickfrequency/0","title":"OpenCV.gettickfrequency/0","type":"function"},{"doc":"","ref":"OpenCV.html#gettrackbarpos/2","title":"OpenCV.gettrackbarpos/2","type":"function"},{"doc":"","ref":"OpenCV.html#getvaliddisparityroi/5","title":"OpenCV.getvaliddisparityroi/5","type":"function"},{"doc":"","ref":"OpenCV.html#getversionmajor/0","title":"OpenCV.getversionmajor/0","type":"function"},{"doc":"","ref":"OpenCV.html#getversionminor/0","title":"OpenCV.getversionminor/0","type":"function"},{"doc":"","ref":"OpenCV.html#getversionrevision/0","title":"OpenCV.getversionrevision/0","type":"function"},{"doc":"","ref":"OpenCV.html#getversionstring/0","title":"OpenCV.getversionstring/0","type":"function"},{"doc":"","ref":"OpenCV.html#getwindowimagerect/1","title":"OpenCV.getwindowimagerect/1","type":"function"},{"doc":"","ref":"OpenCV.html#getwindowproperty/2","title":"OpenCV.getwindowproperty/2","type":"function"},{"doc":"","ref":"OpenCV.html#gfttdetector_create/0","title":"OpenCV.gfttdetector_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#gfttdetector_create/1","title":"OpenCV.gfttdetector_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#gfttdetector_create/5","title":"OpenCV.gfttdetector_create/5","type":"function"},{"doc":"useHarrisDetector : bool k : double Python prototype (for reference): GFTTDetector_create ( maxCorners , qualityLevel , minDistance , blockSize , gradiantSize [ , useHarrisDetector [ , k ] ] ) -&gt; retval","ref":"OpenCV.html#gfttdetector_create/6","title":"OpenCV.gfttdetector_create/6","type":"function"},{"doc":"","ref":"OpenCV.html#goodfeaturestotrack/4","title":"OpenCV.goodfeaturestotrack/4","type":"function"},{"doc":"","ref":"OpenCV.html#goodfeaturestotrack/5","title":"OpenCV.goodfeaturestotrack/5","type":"function"},{"doc":"","ref":"OpenCV.html#goodfeaturestotrack/7","title":"OpenCV.goodfeaturestotrack/7","type":"function"},{"doc":"corners : UMat useHarrisDetector : bool k : double Python prototype (for reference): goodFeaturesToTrack ( image , maxCorners , qualityLevel , minDistance , mask , blockSize , gradientSize [ , corners [ , useHarrisDetector [ , k ] ] ] ) -&gt; corners","ref":"OpenCV.html#goodfeaturestotrack/8","title":"OpenCV.goodfeaturestotrack/8","type":"function"},{"doc":"","ref":"OpenCV.html#goodfeaturestotrackwithquality/5","title":"OpenCV.goodfeaturestotrackwithquality/5","type":"function"},{"doc":"Same as above, but returns also quality measure of the detected corners. image . corners . maxCorners . the strongest of them is returned. maxCorners &lt;= 0 implies that no limit on the maximum is set and all detected corners are returned. qualityLevel . parameter value is multiplied by the best corner quality measure, which is the minimal eigenvalue (see #cornerMinEigenVal ) or the Harris function response (see #cornerHarris ). The corners with the quality measure less than the product are rejected. For example, if the best corner has the quality measure = 1500, and the qualityLevel=0.01 , then all the corners with the quality measure less than 15 are rejected. minDistance . mask . CV_8UC1 and the same size as image ), it specifies the region in which the corners are detected. cornersQuality . blockSize . pixel neighborhood. See cornerEigenValsAndVecs . gradientSize . See cornerEigenValsAndVecs . useHarrisDetector . or #cornerMinEigenVal. k . corners : UMat cornersQuality : UMat blockSize : int gradientSize : int useHarrisDetector : bool k : double Python prototype (for reference): goodFeaturesToTrackWithQuality ( image , maxCorners , qualityLevel , minDistance , mask [ , corners [ , cornersQuality [ , blockSize [ , gradientSize [ , useHarrisDetector [ , k ] ] ] ] ] ] ) -&gt; corners , cornersQuality","ref":"OpenCV.html#goodfeaturestotrackwithquality/6","title":"OpenCV.goodfeaturestotrackwithquality/6","type":"function"},{"doc":"","ref":"OpenCV.html#grabcut/6","title":"OpenCV.grabcut/6","type":"function"},{"doc":"Runs the GrabCut algorithm. The function implements the GrabCut image segmentation algorithm . img . mask . mode is set to #GC_INIT_WITH_RECT. Its elements may have one of the #GrabCutClasses. rect . &quot;obvious background&quot;. The parameter is only used when mode==#GC_INIT_WITH_RECT . bgdModel . processing the same image. fgdModel . processing the same image. iterCount . that the result can be refined with further calls with mode==#GC_INIT_WITH_MASK or mode==GC_EVAL . mode . mode : int Python prototype (for reference): grabCut ( img , mask , rect , bgdModel , fgdModel , iterCount [ , mode ] ) -&gt; mask , bgdModel , fgdModel","ref":"OpenCV.html#grabcut/7","title":"OpenCV.grabcut/7","type":"function"},{"doc":"","ref":"OpenCV.html#grouprectangles/2","title":"OpenCV.grouprectangles/2","type":"function"},{"doc":"Has overloading in C++ eps : double Python prototype (for reference): groupRectangles ( rectList , groupThreshold [ , eps ] ) -&gt; rectList , weights","ref":"OpenCV.html#grouprectangles/3","title":"OpenCV.grouprectangles/3","type":"function"},{"doc":"","ref":"OpenCV.html#haveimagereader/1","title":"OpenCV.haveimagereader/1","type":"function"},{"doc":"","ref":"OpenCV.html#haveimagewriter/1","title":"OpenCV.haveimagewriter/1","type":"function"},{"doc":"","ref":"OpenCV.html#haveopenvx/0","title":"OpenCV.haveopenvx/0","type":"function"},{"doc":"","ref":"OpenCV.html#hconcat/1","title":"OpenCV.hconcat/1","type":"function"},{"doc":"Has overloading in C++ std::vector&lt;cv::Mat&gt; matrices = { cv::Mat(4, 1, CV_8UC1, cv::Scalar(1)), cv::Mat(4, 1, CV_8UC1, cv::Scalar(2)), cv::Mat(4, 1, CV_8UC1, cv::Scalar(3)),}; cv::Mat out; cv::hconcat( matrices, out ); //out: //[1, 2, 3; // 1, 2, 3; // 1, 2, 3; // 1, 2, 3] src . dst . same depth. dst : UMat Python prototype (for reference): hconcat ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.html#hconcat/2","title":"OpenCV.hconcat/2","type":"function"},{"doc":"","ref":"OpenCV.html#hogdescriptor_getdaimlerpeopledetector/0","title":"OpenCV.hogdescriptor_getdaimlerpeopledetector/0","type":"function"},{"doc":"","ref":"OpenCV.html#hogdescriptor_getdefaultpeopledetector/0","title":"OpenCV.hogdescriptor_getdefaultpeopledetector/0","type":"function"},{"doc":"","ref":"OpenCV.html#hogdescriptor_hogdescriptor/0","title":"OpenCV.hogdescriptor_hogdescriptor/0","type":"function"},{"doc":"","ref":"OpenCV.html#hogdescriptor_hogdescriptor/1","title":"OpenCV.hogdescriptor_hogdescriptor/1","type":"function"},{"doc":"","ref":"OpenCV.html#hogdescriptor_hogdescriptor/5","title":"OpenCV.hogdescriptor_hogdescriptor/5","type":"function"},{"doc":"Has overloading in C++ winSize . blockSize . blockStride . cellSize . nbins . derivAperture . winSigma . histogramNormType . l2HysThreshold . gammaCorrection . nlevels . signedGradient . derivAperture : int winSigma : double histogramNormType : HOGDescriptor_HistogramNormType l2HysThreshold : double gammaCorrection : bool nlevels : int signedGradient : bool Python prototype (for reference): HOGDescriptor ( _winSize , _blockSize , _blockStride , _cellSize , _nbins [ , _derivAperture [ , _winSigma [ , _histogramNormType [ , _L2HysThreshold [ , _gammaCorrection [ , _nlevels [ , _signedGradient ] ] ] ] ] ] ] ) -&gt; &lt; HOGDescriptor object &gt;","ref":"OpenCV.html#hogdescriptor_hogdescriptor/6","title":"OpenCV.hogdescriptor_hogdescriptor/6","type":"function"},{"doc":"","ref":"OpenCV.html#houghcircles/4","title":"OpenCV.houghcircles/4","type":"function"},{"doc":"Finds circles in a grayscale image using the Hough transform. The function finds circles in a grayscale image using a modification of the Hough transform. Example: : @include snippets/imgproc_HoughLinesCircles.cpp Note : Usually the function detects the centers of circles well. However, it may fail to find correct radii. You can assist to the function by specifying the radius range ( minRadius and maxRadius ) if you know it. Or, in the case of #HOUGH_GRADIENT method you may set maxRadius to a negative number to return centers only without radius search, and find the correct radius using an additional procedure. It also helps to smooth image a bit unless it's already soft. For example, GaussianBlur() with 7x7 kernel and 1.5x1.5 sigma or similar blurring may help. image . circles . floating-point vector \\f$(x, y, radius)\\f$ or \\f$(x, y, radius, votes)\\f$ . method . dp . dp=1 , the accumulator has the same resolution as the input image. If dp=2 , the accumulator has half as big width and height. For #HOUGH_GRADIENT_ALT the recommended value is dp=1.5, unless some small very circles need to be detected. minDist . too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. param1 . it is the higher threshold of the two passed to the Canny edge detector (the lower one is twice smaller). Note that #HOUGH_GRADIENT_ALT uses #Scharr algorithm to compute image derivatives, so the threshold value shough normally be higher, such as 300 or normally exposed and contrasty images. param2 . accumulator threshold for the circle centers at the detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. In the case of #HOUGH_GRADIENT_ALT algorithm, this is the circle &quot;perfectness&quot; measure. The closer it to 1, the better shaped circles algorithm selects. In most cases 0.9 should be fine. If you want get better detection of small circles, you may decrease it to 0.85, 0.8 or even less. But then also try to limit the search range [minRadius, maxRadius] to avoid many false circles. minRadius . maxRadius . centers without finding the radius. #HOUGH_GRADIENT_ALT always computes circle radiuses. @sa fitEllipse, minEnclosingCircle circles : UMat param1 : double param2 : double minRadius : int maxRadius : int Python prototype (for reference): HoughCircles ( image , method , dp , minDist [ , circles [ , param1 [ , param2 [ , minRadius [ , maxRadius ] ] ] ] ] ) -&gt; circles","ref":"OpenCV.html#houghcircles/5","title":"OpenCV.houghcircles/5","type":"function"},{"doc":"","ref":"OpenCV.html#houghlines/4","title":"OpenCV.houghlines/4","type":"function"},{"doc":"Finds lines in a binary image using the standard Hough transform. The function implements the standard or standard multi-scale Hough transform algorithm for line detection. See http://homepages.inf.ed.ac.uk/rbf/HIPR2/hough.htm for a good explanation of Hough transform. image . lines . \\f$(\\rho, \\theta)\\f$ or \\f$(\\rho, \\theta, \\textrm{votes})\\f$ . \\f$\\rho\\f$ is the distance from the coordinate origin \\f$(0,0)\\f$ (top-left corner of the image). \\f$\\theta\\f$ is the line rotation angle in radians ( \\f$0 \\sim \\textrm{vertical line}, \\pi/2 \\sim \\textrm{horizontal line}\\f$ ). \\f$\\textrm{votes}\\f$ is the value of accumulator. rho . theta . threshold . votes ( \\f$&gt;\\texttt{threshold}\\f$ ). srn . The coarse accumulator distance resolution is rho and the accurate accumulator resolution is rho/srn . If both srn=0 and stn=0 , the classical Hough transform is used. Otherwise, both these parameters should be positive. stn . min_theta . Must fall between 0 and max_theta. max_theta . Must fall between min_theta and CV_PI. lines : UMat srn : double stn : double min_theta : double max_theta : double Python prototype (for reference): HoughLines ( image , rho , theta , threshold [ , lines [ , srn [ , stn [ , min_theta [ , max_theta ] ] ] ] ] ) -&gt; lines","ref":"OpenCV.html#houghlines/5","title":"OpenCV.houghlines/5","type":"function"},{"doc":"","ref":"OpenCV.html#houghlinesp/4","title":"OpenCV.houghlinesp/4","type":"function"},{"doc":"Finds line segments in a binary image using the probabilistic Hough transform. The function implements the probabilistic Hough transform algorithm for line detection, described in @cite Matas00 See the line detection example below: @include snippets/imgproc_HoughLinesP.cpp This is a sample picture the function parameters have been tuned for: And this is the output of the above program in case of the probabilistic Hough transform: image . lines . \\f$(x_1, y_1, x_2, y_2)\\f$ , where \\f$(x_1,y_1)\\f$ and \\f$(x_2, y_2)\\f$ are the ending points of each detected line segment. rho . theta . threshold . votes ( \\f$&gt;\\texttt{threshold}\\f$ ). minLineLength . maxLineGap . @sa LineSegmentDetector lines : UMat minLineLength : double maxLineGap : double Python prototype (for reference): HoughLinesP ( image , rho , theta , threshold [ , lines [ , minLineLength [ , maxLineGap ] ] ] ) -&gt; lines","ref":"OpenCV.html#houghlinesp/5","title":"OpenCV.houghlinesp/5","type":"function"},{"doc":"","ref":"OpenCV.html#houghlinespointset/9","title":"OpenCV.houghlinespointset/9","type":"function"},{"doc":"Finds lines in a set of points using the standard Hough transform. The function finds lines in a set of points using a modification of the Hough transform. @include snippets/imgproc_HoughLinesPointSet.cpp point . lines . The larger the value of 'votes', the higher the reliability of the Hough line. lines_max . threshold . votes ( \\f$&gt;\\texttt{threshold}\\f$ ). min_rho . max_rho . rho_step . min_theta . max_theta . theta_step . lines : UMat Python prototype (for reference): HoughLinesPointSet ( point , lines_max , threshold , min_rho , max_rho , rho_step , min_theta , max_theta , theta_step [ , lines ] ) -&gt; lines","ref":"OpenCV.html#houghlinespointset/10","title":"OpenCV.houghlinespointset/10","type":"function"},{"doc":"","ref":"OpenCV.html#houghlineswithaccumulator/4","title":"OpenCV.houghlineswithaccumulator/4","type":"function"},{"doc":"Finds lines in a binary image using the standard Hough transform and get accumulator. Note : This function is for bindings use only. Use original function in C++ code @sa HoughLines lines : UMat srn : double stn : double min_theta : double max_theta : double Python prototype (for reference): HoughLinesWithAccumulator ( image , rho , theta , threshold [ , lines [ , srn [ , stn [ , min_theta [ , max_theta ] ] ] ] ] ) -&gt; lines","ref":"OpenCV.html#houghlineswithaccumulator/5","title":"OpenCV.houghlineswithaccumulator/5","type":"function"},{"doc":"","ref":"OpenCV.html#humoments/1","title":"OpenCV.humoments/1","type":"function"},{"doc":"Has overloading in C++ hu : UMat Python prototype (for reference): HuMoments ( m [ , hu ] ) -&gt; hu","ref":"OpenCV.html#humoments/2","title":"OpenCV.humoments/2","type":"function"},{"doc":"","ref":"OpenCV.html#idct/1","title":"OpenCV.idct/1","type":"function"},{"doc":"Calculates the inverse Discrete Cosine Transform of a 1D or 2D array. idct(src, dst, flags) is equivalent to dct(src, dst, flags | DCT_INVERSE). src . dst . flags . @sa dct, dft, idft, getOptimalDFTSize dst : UMat flags : int Python prototype (for reference): idct ( src [ , dst [ , flags ] ] ) -&gt; dst","ref":"OpenCV.html#idct/2","title":"OpenCV.idct/2","type":"function"},{"doc":"","ref":"OpenCV.html#idft/1","title":"OpenCV.idft/1","type":"function"},{"doc":"Calculates the inverse Discrete Fourier Transform of a 1D or 2D array. idft(src, dst, flags) is equivalent to dft(src, dst, flags | #DFT_INVERSE) . Note : None of dft and idft scales the result by default. So, you should pass #DFT_SCALE to one of dft or idft explicitly to make these transforms mutually inverse. @sa dft, dct, idct, mulSpectrums, getOptimalDFTSize src . dst . flags . nonzeroRows . the convolution sample in dft description. dst : UMat flags : int nonzeroRows : int Python prototype (for reference): idft ( src [ , dst [ , flags [ , nonzeroRows ] ] ] ) -&gt; dst","ref":"OpenCV.html#idft/2","title":"OpenCV.idft/2","type":"function"},{"doc":"","ref":"OpenCV.html#illuminationchange/2","title":"OpenCV.illuminationchange/2","type":"function"},{"doc":"Applying an appropriate non-linear transformation to the gradient field inside the selection and then integrating back with a Poisson solver, modifies locally the apparent illumination of an image. src . mask . dst . alpha . beta . This is useful to highlight under-exposed foreground objects or to reduce specular reflections. dst : UMat alpha : float beta : float Python prototype (for reference): illuminationChange ( src , mask [ , dst [ , alpha [ , beta ] ] ] ) -&gt; dst","ref":"OpenCV.html#illuminationchange/3","title":"OpenCV.illuminationchange/3","type":"function"},{"doc":"","ref":"OpenCV.html#imcount/1","title":"OpenCV.imcount/1","type":"function"},{"doc":"Returns the number of images inside the give file The function imcount will return the number of pages in a multi-page image, or 1 for single-page images filename . flags . flags : int Python prototype (for reference): imcount ( filename [ , flags ] ) -&gt; retval","ref":"OpenCV.html#imcount/2","title":"OpenCV.imcount/2","type":"function"},{"doc":"","ref":"OpenCV.html#imdecode/2","title":"OpenCV.imdecode/2","type":"function"},{"doc":"","ref":"OpenCV.html#imencode/2","title":"OpenCV.imencode/2","type":"function"},{"doc":"Encodes an image into a memory buffer. The function imencode compresses the image and stores it in the memory buffer that is resized to fit the result. See cv::imwrite for the list of supported formats and flags description. ext . img . buf . params . params : vector_int Python prototype (for reference): imencode ( ext , img [ , params ] ) -&gt; retval , buf","ref":"OpenCV.html#imencode/3","title":"OpenCV.imencode/3","type":"function"},{"doc":"","ref":"OpenCV.html#imread/1","title":"OpenCV.imread/1","type":"function"},{"doc":"Loads an image from a file. @anchor imread The function imread loads an image from the specified file and returns it. If the image cannot be read (because of missing file, improper permissions, unsupported or invalid format), the function returns an empty matrix ( Mat::data==NULL ). Currently, the following file formats are supported: Windows bitmaps - *.bmp, *.dib (always supported) JPEG files - *.jpeg, *.jpg, *.jpe (see the Note section) JPEG 2000 files - *.jp2 (see the Note section) Portable Network Graphics - *.png (see the Note section) WebP - *.webp (see the Note section) Portable image format - *.pbm, *.pgm, *.ppm *.pxm, *.pnm (always supported) PFM files - *.pfm (see the Note section) Sun rasters - *.sr, *.ras (always supported) TIFF files - *.tiff, *.tif (see the Note section) OpenEXR Image files - *.exr (see the Note section) Radiance HDR - *.hdr, *.pic (always supported) Raster and Vector geospatial data supported by GDAL (see the Note section) Note : The function determines the type of an image by the content, not by the file extension. In the case of color images, the decoded images will have the channels stored in B G R order. When using IMREAD_GRAYSCALE, the codec's internal grayscale conversion will be used, if available. Results may differ to the output of cvtColor() On Microsoft Windows* OS and MacOSX*, the codecs shipped with an OpenCV image (libjpeg, libpng, libtiff, and libjasper) are used by default. So, OpenCV can always read JPEGs, PNGs, and TIFFs. On MacOSX, there is also an option to use native MacOSX image readers. But beware that currently these native image loaders give images with different pixel values because of the color management embedded into MacOSX. On Linux*, BSD flavors and other Unix-like open-source operating systems, OpenCV looks for codecs supplied with an OS image. Install the relevant packages (do not forget the development files, for example, &quot;libjpeg-dev&quot;, in Debian* and Ubuntu*) to get the codec support or turn on the OPENCV_BUILD_3RDPARTY_LIBS flag in CMake. In the case you set WITH_GDAL flag to true in CMake and @ref IMREAD_LOAD_GDAL to load the image, then the GDAL driver will be used in order to decode the image, supporting the following formats: Raster , Vector . If EXIF information is embedded in the image file, the EXIF orientation will be taken into account and thus the image will be rotated accordingly except if the flags @ref IMREAD_IGNORE_ORIENTATION or @ref IMREAD_UNCHANGED are passed. Use the IMREAD_UNCHANGED flag to keep the floating point values from PFM image. By default number of pixels must be less than 2^30. Limit can be set using system variable OPENCV_IO_MAX_IMAGE_PIXELS filename . flags . flags : int Python prototype (for reference): imread ( filename [ , flags ] ) -&gt; retval","ref":"OpenCV.html#imread/2","title":"OpenCV.imread/2","type":"function"},{"doc":"","ref":"OpenCV.html#imreadmulti/1","title":"OpenCV.imreadmulti/1","type":"function"},{"doc":"","ref":"OpenCV.html#imreadmulti/2","title":"OpenCV.imreadmulti/2","type":"function"},{"doc":"","ref":"OpenCV.html#imreadmulti/3","title":"OpenCV.imreadmulti/3","type":"function"},{"doc":"Loads a of images of a multi-page image from a file. The function imreadmulti loads a specified range from a multi-page image from the specified file into a vector of Mat objects. filename . start . count . flags . mats . @sa cv::imread mats : vector_Mat flags : int Python prototype (for reference): imreadmulti ( filename , start , count [ , mats [ , flags ] ] ) -&gt; retval , mats","ref":"OpenCV.html#imreadmulti/4","title":"OpenCV.imreadmulti/4","type":"function"},{"doc":"","ref":"OpenCV.html#imwrite/2","title":"OpenCV.imwrite/2","type":"function"},{"doc":"Saves an image to a specified file. The function imwrite saves the image to the specified file. The image format is chosen based on the filename extension (see cv::imread for the list of extensions). In general, only 8-bit single-channel or 3-channel (with 'BGR' channel order) images can be saved using this function, with these exceptions: 16-bit unsigned (CV_16U) images can be saved in the case of PNG, JPEG 2000, and TIFF formats 32-bit float (CV_32F) images can be saved in PFM, TIFF, OpenEXR, and Radiance HDR formats; 3-channel (CV_32FC3) TIFF images will be saved using the LogLuv high dynamic range encoding (4 bytes per pixel) PNG images with an alpha channel can be saved using this function. To do this, create 8-bit (or 16-bit) 4-channel image BGRA, where the alpha channel goes last. Fully transparent pixels should have alpha set to 0, fully opaque pixels should have alpha set to 255/65535 (see the code sample below). Multiple images (vector of Mat) can be saved in TIFF format (see the code sample below). If the image format is not supported, the image will be converted to 8-bit unsigned (CV_8U) and saved that way. If the format, depth or channel order is different, use Mat::convertTo and cv::cvtColor to convert it before saving. Or, use the universal FileStorage I/O functions to save the image to XML or YAML format. The sample below shows how to create a BGRA image, how to set custom compression parameters and save it to a PNG file. It also demonstrates how to save multiple images in a TIFF file: @include snippets/imgcodecs_imwrite.cpp filename . img . params . params : vector_int Python prototype (for reference): imwrite ( filename , img [ , params ] ) -&gt; retval","ref":"OpenCV.html#imwrite/3","title":"OpenCV.imwrite/3","type":"function"},{"doc":"","ref":"OpenCV.html#imwritemulti/2","title":"OpenCV.imwritemulti/2","type":"function"},{"doc":"params : vector_int Python prototype (for reference): imwritemulti ( filename , img [ , params ] ) -&gt; retval","ref":"OpenCV.html#imwritemulti/3","title":"OpenCV.imwritemulti/3","type":"function"},{"doc":"","ref":"OpenCV.html#initcameramatrix2d/3","title":"OpenCV.initcameramatrix2d/3","type":"function"},{"doc":"Finds an initial camera intrinsic matrix from 3D-2D point correspondences. objectPoints . coordinate space. In the old interface all the per-view vectors are concatenated. See #calibrateCamera for details. imagePoints . old interface all the per-view vectors are concatenated. imageSize . aspectRatio . Otherwise, \\f$f_x = f_y * \\texttt{aspectRatio}\\f$ . The function estimates and returns an initial camera intrinsic matrix for the camera calibration process. Currently, the function only supports planar calibration patterns, which are patterns where each object point has z-coordinate =0. aspectRatio : double Python prototype (for reference): initCameraMatrix2D ( objectPoints , imagePoints , imageSize [ , aspectRatio ] ) -&gt; retval","ref":"OpenCV.html#initcameramatrix2d/4","title":"OpenCV.initcameramatrix2d/4","type":"function"},{"doc":"","ref":"OpenCV.html#initinverserectificationmap/6","title":"OpenCV.initinverserectificationmap/6","type":"function"},{"doc":"Computes the projection and inverse-rectification transformation map. In essense, this is the inverse of #initUndistortRectifyMap to accomodate stereo-rectification of projectors ('inverse-cameras') in projector-camera pairs. The function computes the joint projection and inverse rectification transformation and represents the result in the form of maps for #remap. The projected image looks like a distorted version of the original which, once projected by a projector, should visually match the original. In case of a monocular camera, newCameraMatrix is usually equal to cameraMatrix, or it can be computed by #getOptimalNewCameraMatrix for a better control over scaling. In case of a projector-camera pair, newCameraMatrix is normally set to P1 or P2 computed by #stereoRectify . The projector is oriented differently in the coordinate space, according to R. In case of projector-camera pairs, this helps align the projector (in the same manner as #initUndistortRectifyMap for the camera) to create a stereo-rectified pair. This allows epipolar lines on both images to become horizontal and have the same y-coordinate (in case of a horizontally aligned projector-camera pair). The function builds the maps for the inverse mapping algorithm that is used by #remap. That is, for each pixel \\f$(u, v)\\f$ in the destination (projected and inverse-rectified) image, the function computes the corresponding coordinates in the source image (that is, in the original digital image). The following process is applied: \\f[ \\begin{array}{l} \\text{newCameraMatrix}\\\\ x \\leftarrow (u - {c'}_x)/{f'}_x \\\\ y \\leftarrow (v - {c'}_y)/{f'}_y \\\\ \\\\\\text{Undistortion} \\\\\\scriptsize{\\textit{though equation shown is for radial undistortion, function implements cv::undistortPoints()}}\\\\ r^2 \\leftarrow x^2 + y^2 \\\\ \\theta \\leftarrow \\frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6}\\\\ x' \\leftarrow \\frac{x}{\\theta} \\\\ y' \\leftarrow \\frac{y}{\\theta} \\\\ \\\\\\text{Rectification}\\\\ {[X\\,Y\\,W]} ^T \\leftarrow R*[x' \\, y' \\, 1]^T \\\\ x'' \\leftarrow X/W \\\\ y'' \\leftarrow Y/W \\\\ \\\\\\text{cameraMatrix}\\\\ map_x(u,v) \\leftarrow x'' f_x + c_x \\\\ map_y(u,v) \\leftarrow y'' f_y + c_y \\end{array} \\f] where \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6[, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ are the distortion coefficients vector distCoeffs. In case of a stereo-rectified projector-camera pair, this function is called for the projector while #initUndistortRectifyMap is called for the camera head. This is done after #stereoRectify, which in turn is called after #stereoCalibrate. If the projector-camera pair is not calibrated, it is still possible to compute the rectification transformations directly from the fundamental matrix using #stereoRectifyUncalibrated. For the projector and camera, the function computes homography H as the rectification transformation in a pixel domain, not a rotation matrix R in 3D space. R can be computed from H as \\f[\\texttt{R} = \\texttt{cameraMatrix} ^{-1} \\cdot \\texttt{H} \\cdot \\texttt{cameraMatrix}\\f] where cameraMatrix can be chosen arbitrarily. cameraMatrix . distCoeffs . \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6[, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed. r . computed by #stereoRectify can be passed here. If the matrix is empty, the identity transformation is assumed. newCameraMatrix . size . m1type . map1 . map2 . map1 : UMat map2 : UMat Python prototype (for reference): initInverseRectificationMap ( cameraMatrix , distCoeffs , R , newCameraMatrix , size , m1type [ , map1 [ , map2 ] ] ) -&gt; map1 , map2","ref":"OpenCV.html#initinverserectificationmap/7","title":"OpenCV.initinverserectificationmap/7","type":"function"},{"doc":"","ref":"OpenCV.html#initundistortrectifymap/6","title":"OpenCV.initundistortrectifymap/6","type":"function"},{"doc":"Computes the undistortion and rectification transformation map. The function computes the joint undistortion and rectification transformation and represents the result in the form of maps for #remap. The undistorted image looks like original, as if it is captured with a camera using the camera matrix =newCameraMatrix and zero distortion. In case of a monocular camera, newCameraMatrix is usually equal to cameraMatrix, or it can be computed by #getOptimalNewCameraMatrix for a better control over scaling. In case of a stereo camera, newCameraMatrix is normally set to P1 or P2 computed by #stereoRectify . Also, this new camera is oriented differently in the coordinate space, according to R. That, for example, helps to align two heads of a stereo camera so that the epipolar lines on both images become horizontal and have the same y- coordinate (in case of a horizontally aligned stereo camera). The function actually builds the maps for the inverse mapping algorithm that is used by #remap. That is, for each pixel \\f$(u, v)\\f$ in the destination (corrected and rectified) image, the function computes the corresponding coordinates in the source image (that is, in the original image from camera). The following process is applied: \\f[ \\begin{array}{l} x \\leftarrow (u - {c'}_x)/{f'}_x \\\\ y \\leftarrow (v - {c'}_y)/{f'}_y \\\\ {[X\\,Y\\,W]} ^T \\leftarrow R^{-1}*[x \\, y \\, 1]^T \\\\ x' \\leftarrow X/W \\\\ y' \\leftarrow Y/W \\\\ r^2 \\leftarrow x'^2 + y'^2 \\\\ x'' \\leftarrow x' \\frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6} + 2p_1 x' y' + p_2(r^2 + 2 x'^2) + s_1 r^2 + s_2 r^4\\\\ y'' \\leftarrow y' \\frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6} + p_1 (r^2 + 2 y'^2) + 2 p_2 x' y' + s_3 r^2 + s_4 r^4 \\\\ s\\vecthree{x'''}{y'''}{1} = \\vecthreethree{R_{33}(\\tau_x, \\tau_y)}{0}{-R_{13}((\\tau_x, \\tau_y)} {0}{R_{33}(\\tau_x, \\tau_y)}{-R_{23}(\\tau_x, \\tau_y)} {0}{0}{1} R(\\tau_x, \\tau_y) \\vecthree{x''}{y''}{1}\\\\ map_x(u,v) \\leftarrow x''' f_x + c_x \\\\ map_y(u,v) \\leftarrow y''' f_y + c_y \\end{array} \\f] where \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6[, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ are the distortion coefficients. In case of a stereo camera, this function is called twice: once for each camera head, after #stereoRectify, which in its turn is called after #stereoCalibrate. But if the stereo camera was not calibrated, it is still possible to compute the rectification transformations directly from the fundamental matrix using #stereoRectifyUncalibrated. For each camera, the function computes homography H as the rectification transformation in a pixel domain, not a rotation matrix R in 3D space. R can be computed from H as \\f[\\texttt{R} = \\texttt{cameraMatrix} ^{-1} \\cdot \\texttt{H} \\cdot \\texttt{cameraMatrix}\\f] where cameraMatrix can be chosen arbitrarily. cameraMatrix . distCoeffs . \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6[, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed. r . computed by #stereoRectify can be passed here. If the matrix is empty, the identity transformation is assumed. In cvInitUndistortMap R assumed to be an identity matrix. newCameraMatrix . size . m1type . map1 . map2 . map1 : UMat map2 : UMat Python prototype (for reference): initUndistortRectifyMap ( cameraMatrix , distCoeffs , R , newCameraMatrix , size , m1type [ , map1 [ , map2 ] ] ) -&gt; map1 , map2","ref":"OpenCV.html#initundistortrectifymap/7","title":"OpenCV.initundistortrectifymap/7","type":"function"},{"doc":"","ref":"OpenCV.html#inpaint/4","title":"OpenCV.inpaint/4","type":"function"},{"doc":"Restores the selected region in an image using the region neighborhood. src . inpaintMask . needs to be inpainted. dst . inpaintRadius . by the algorithm. flags . The function reconstructs the selected image area from the pixel near the area boundary. The function may be used to remove dust and scratches from a scanned photo, or to remove undesirable objects from still images or video. See http://en.wikipedia.org/wiki/Inpainting for more details. Note : An example using the inpainting technique can be found at opencv_source_code/samples/cpp/inpaint.cpp (Python) An example using the inpainting technique can be found at opencv_source_code/samples/python/inpaint.py dst : UMat Python prototype (for reference): inpaint ( src , inpaintMask , inpaintRadius , flags [ , dst ] ) -&gt; dst","ref":"OpenCV.html#inpaint/5","title":"OpenCV.inpaint/5","type":"function"},{"doc":"","ref":"OpenCV.html#inrange/3","title":"OpenCV.inrange/3","type":"function"},{"doc":"Checks if array elements lie between the elements of two other arrays. The function checks the range as follows: For every element of a single-channel input array: \\f[\\texttt{dst} (I)= \\texttt{lowerb} (I)_0 \\leq \\texttt{src} (I)_0 \\leq \\texttt{upperb} (I)_0\\f] For two-channel arrays: \\f[\\texttt{dst} (I)= \\texttt{lowerb} (I)_0 \\leq \\texttt{src} (I)_0 \\leq \\texttt{upperb} (I)_0 \\land \\texttt{lowerb} (I)_1 \\leq \\texttt{src} (I)_1 \\leq \\texttt{upperb} (I)_1\\f] and so forth. That is, dst (I) is set to 255 (all 1 -bits) if src (I) is within the specified 1D, 2D, 3D, ... box and 0 otherwise. When the lower and/or upper boundary parameters are scalars, the indexes (I) at lowerb and upperb in the above formulas should be omitted. src . lowerb . upperb . dst . dst : UMat Python prototype (for reference): inRange ( src , lowerb , upperb [ , dst ] ) -&gt; dst","ref":"OpenCV.html#inrange/4","title":"OpenCV.inrange/4","type":"function"},{"doc":"","ref":"OpenCV.html#insertchannel/3","title":"OpenCV.insertchannel/3","type":"function"},{"doc":"","ref":"OpenCV.html#integral/1","title":"OpenCV.integral/1","type":"function"},{"doc":"Has overloading in C++ sum : UMat sdepth : int Python prototype (for reference): integral ( src [ , sum [ , sdepth ] ] ) -&gt; sum","ref":"OpenCV.html#integral/2","title":"OpenCV.integral/2","type":"function"},{"doc":"","ref":"OpenCV.html#integral2/1","title":"OpenCV.integral2/1","type":"function"},{"doc":"Has overloading in C++ sum : UMat sqsum : UMat sdepth : int sqdepth : int Python prototype (for reference): integral2 ( src [ , sum [ , sqsum [ , sdepth [ , sqdepth ] ] ] ] ) -&gt; sum , sqsum","ref":"OpenCV.html#integral2/2","title":"OpenCV.integral2/2","type":"function"},{"doc":"","ref":"OpenCV.html#integral3/1","title":"OpenCV.integral3/1","type":"function"},{"doc":"Calculates the integral of an image. The function calculates one or more integral images for the source image as follows: \\f[\\texttt{sum} (X,Y) = \\sum _{x&lt;X,y&lt;Y} \\texttt{image} (x,y)\\f] \\f[\\texttt{sqsum} (X,Y) = \\sum _{x&lt;X,y&lt;Y} \\texttt{image} (x,y)^2\\f] \\f[\\texttt{tilted} (X,Y) = \\sum _{y&lt;Y,abs(x-X+1) \\leq Y-y-1} \\texttt{image} (x,y)\\f] Using these integral images, you can calculate sum, mean, and standard deviation over a specific up-right or rotated rectangular region of the image in a constant time, for example: \\f[\\sum _{x_1 \\leq x &lt; x_2, \\, y_1 \\leq y &lt; y_2} \\texttt{image} (x,y) = \\texttt{sum} (x_2,y_2)- \\texttt{sum} (x_1,y_2)- \\texttt{sum} (x_2,y_1)+ \\texttt{sum} (x_1,y_1)\\f] It makes possible to do a fast blurring or fast block correlation with a variable window size, for example. In case of multi-channel images, sums for each channel are accumulated independently. As a practical example, the next figure shows the calculation of the integral of a straight rectangle Rect(3,3,3,2) and of a tilted rectangle Rect(5,1,2,3) . The selected pixels in the original image are shown, as well as the relative pixels in the integral images sum and tilted . src . sum . sqsum . floating-point (64f) array. tilted . the same data type as sum. sdepth . CV_64F. sqdepth . sum : UMat sqsum : UMat tilted : UMat sdepth : int sqdepth : int Python prototype (for reference): integral3 ( src [ , sum [ , sqsum [ , tilted [ , sdepth [ , sqdepth ] ] ] ] ] ) -&gt; sum , sqsum , tilted","ref":"OpenCV.html#integral3/2","title":"OpenCV.integral3/2","type":"function"},{"doc":"","ref":"OpenCV.html#intersectconvexconvex/2","title":"OpenCV.intersectconvexconvex/2","type":"function"},{"doc":"Finds intersection of two convex polygons p1 . p2 . p12 . handleNested . When false, no intersection is found. If the polygons share a side or the vertex of one polygon lies on an edge of the other, they are not considered nested and an intersection will be found regardless of the value of handleNested. @returns Absolute value of area of intersecting polygon Note : intersectConvexConvex doesn't confirm that both polygons are convex and will return invalid results if they aren't. p12 : UMat handleNested : bool Python prototype (for reference): intersectConvexConvex ( p1 , p2 [ , p12 [ , handleNested ] ] ) -&gt; retval , p12","ref":"OpenCV.html#intersectconvexconvex/3","title":"OpenCV.intersectconvexconvex/3","type":"function"},{"doc":"","ref":"OpenCV.html#invert/1","title":"OpenCV.invert/1","type":"function"},{"doc":"Finds the inverse or pseudo-inverse of a matrix. The function cv::invert inverts the matrix src and stores the result in dst . When the matrix src is singular or non-square, the function calculates the pseudo-inverse matrix (the dst matrix) so that norm(src*dst - I) is minimal, where I is an identity matrix. In case of the #DECOMP_LU method, the function returns non-zero value if the inverse has been successfully calculated and 0 if src is singular. In case of the #DECOMP_SVD method, the function returns the inverse condition number of src (the ratio of the smallest singular value to the largest singular value) and 0 if src is singular. The SVD method calculates a pseudo-inverse matrix if src is singular. Similarly to #DECOMP_LU, the method #DECOMP_CHOLESKY works only with non-singular square matrices that should also be symmetrical and positively defined. In this case, the function stores the inverted matrix in dst and returns non-zero. Otherwise, it returns 0. src . dst . flags . @sa solve, SVD dst : UMat flags : int Python prototype (for reference): invert ( src [ , dst [ , flags ] ] ) -&gt; retval , dst","ref":"OpenCV.html#invert/2","title":"OpenCV.invert/2","type":"function"},{"doc":"","ref":"OpenCV.html#invertaffinetransform/1","title":"OpenCV.invertaffinetransform/1","type":"function"},{"doc":"Inverts an affine transformation. The function computes an inverse affine transformation represented by \\f$2 \\times 3\\f$ matrix M: \\f[\\begin{bmatrix} a_{11} &amp; a_{12} &amp; b_1 \\\\ a_{21} &amp; a_{22} &amp; b_2 \\end{bmatrix}\\f] The result is also a \\f$2 \\times 3\\f$ matrix of the same type as M. m . iM . iM : UMat Python prototype (for reference): invertAffineTransform ( M [ , iM ] ) -&gt; iM","ref":"OpenCV.html#invertaffinetransform/2","title":"OpenCV.invertaffinetransform/2","type":"function"},{"doc":"","ref":"OpenCV.html#ipp_getippversion/0","title":"OpenCV.ipp_getippversion/0","type":"function"},{"doc":"","ref":"OpenCV.html#ipp_setuseipp/1","title":"OpenCV.ipp_setuseipp/1","type":"function"},{"doc":"","ref":"OpenCV.html#ipp_setuseipp_notexact/1","title":"OpenCV.ipp_setuseipp_notexact/1","type":"function"},{"doc":"","ref":"OpenCV.html#ipp_useipp/0","title":"OpenCV.ipp_useipp/0","type":"function"},{"doc":"","ref":"OpenCV.html#ipp_useipp_notexact/0","title":"OpenCV.ipp_useipp_notexact/0","type":"function"},{"doc":"","ref":"OpenCV.html#iscontourconvex/1","title":"OpenCV.iscontourconvex/1","type":"function"},{"doc":"","ref":"OpenCV.html#kalmanfilter_kalmanfilter/0","title":"OpenCV.kalmanfilter_kalmanfilter/0","type":"function"},{"doc":"","ref":"OpenCV.html#kalmanfilter_kalmanfilter/2","title":"OpenCV.kalmanfilter_kalmanfilter/2","type":"function"},{"doc":"Has overloading in C++ dynamParams . measureParams . controlParams . type . controlParams : int type : int Python prototype (for reference): KalmanFilter ( dynamParams , measureParams [ , controlParams [ , type ] ] ) -&gt; &lt; KalmanFilter object &gt;","ref":"OpenCV.html#kalmanfilter_kalmanfilter/3","title":"OpenCV.kalmanfilter_kalmanfilter/3","type":"function"},{"doc":"","ref":"OpenCV.html#kaze_create/0","title":"OpenCV.kaze_create/0","type":"function"},{"doc":"The KAZE constructor extended . upright . threshold . nOctaves . nOctaveLayers . diffusivity . DIFF_CHARBONNIER extended : bool upright : bool threshold : float nOctaves : int nOctaveLayers : int diffusivity : KAZE_DiffusivityType Python prototype (for reference): KAZE_create ( [ , extended [ , upright [ , threshold [ , nOctaves [ , nOctaveLayers [ , diffusivity ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#kaze_create/1","title":"OpenCV.kaze_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#keypoint_convert/1","title":"OpenCV.keypoint_convert/1","type":"function"},{"doc":"Has overloading in C++ points2f . keypoints . size . response . octave . class_id . size : float response : float octave : int class_id : int Python prototype (for reference): KeyPoint_convert ( points2f [ , size [ , response [ , octave [ , class_id ] ] ] ] ) -&gt; keypoints","ref":"OpenCV.html#keypoint_convert/2","title":"OpenCV.keypoint_convert/2","type":"function"},{"doc":"","ref":"OpenCV.html#keypoint_keypoint/0","title":"OpenCV.keypoint_keypoint/0","type":"function"},{"doc":"","ref":"OpenCV.html#keypoint_keypoint/3","title":"OpenCV.keypoint_keypoint/3","type":"function"},{"doc":"x . y . size . angle . response . octave . class_id . angle : float response : float octave : int class_id : int Python prototype (for reference): KeyPoint ( x , y , size [ , angle [ , response [ , octave [ , class_id ] ] ] ] ) -&gt; &lt; KeyPoint object &gt;","ref":"OpenCV.html#keypoint_keypoint/4","title":"OpenCV.keypoint_keypoint/4","type":"function"},{"doc":"","ref":"OpenCV.html#keypoint_overlap/2","title":"OpenCV.keypoint_overlap/2","type":"function"},{"doc":"","ref":"OpenCV.html#kmeans/6","title":"OpenCV.kmeans/6","type":"function"},{"doc":"Finds centers of clusters and groups input samples around the clusters. The function kmeans implements a k-means algorithm that finds the centers of cluster_count clusters and groups the input samples around the clusters. As an output, \\f$\\texttt{bestLabels}_i\\f$ contains a 0-based cluster index for the sample stored in the \\f$i^{th}\\f$ row of the samples matrix. Note : (Python) An example on K-means clustering can be found at opencv_source_code/samples/python/kmeans.py data . Examples of this array can be: Mat points(count, 2, CV_32F); Mat points(count, 1, CV_32FC2); Mat points(1, count, CV_32FC2); std::vector\\&lt;cv::Point2f&gt; points(sampleCount); k . bestLabels . criteria . the desired accuracy. The accuracy is specified as criteria.epsilon. As soon as each of the cluster centers moves by less than criteria.epsilon on some iteration, the algorithm stops. attempts . initial labellings. The algorithm returns the labels that yield the best compactness (see the last function parameter). flags . centers . @return The function returns the compactness measure that is computed as \\f[\\sum _i \\| \\texttt{samples} _i - \\texttt{centers} _{ \\texttt{labels} _i} \\| ^2\\f] after every attempt. The best (minimum) value is chosen and the corresponding labels and the compactness value are returned by the function. Basically, you can use only the core of the function, set the number of attempts to 1, initialize labels each time using a custom algorithm, pass them with the ( flags = #KMEANS_USE_INITIAL_LABELS ) flag, and then choose the best (most-compact) clustering. centers : UMat Python prototype (for reference): kmeans ( data , K , bestLabels , criteria , attempts , flags [ , centers ] ) -&gt; retval , bestLabels , centers","ref":"OpenCV.html#kmeans/7","title":"OpenCV.kmeans/7","type":"function"},{"doc":"","ref":"OpenCV.html#laplacian/2","title":"OpenCV.laplacian/2","type":"function"},{"doc":"Calculates the Laplacian of an image. The function calculates the Laplacian of the source image by adding up the second x and y derivatives calculated using the Sobel operator: \\f[\\texttt{dst} = \\Delta \\texttt{src} = \\frac{\\partial^2 \\texttt{src}}{\\partial x^2} + \\frac{\\partial^2 \\texttt{src}}{\\partial y^2}\\f] This is done when ksize &gt; 1 . When ksize == 1 , the Laplacian is computed by filtering the image with the following \\f$3 \\times 3\\f$ aperture: \\f[\\vecthreethree {0}{1}{0}{1}{-4}{1}{0}{1}{0}\\f] src . dst . ddepth . ksize . details. The size must be positive and odd. scale . applied. See #getDerivKernels for details. delta . borderType . @sa Sobel, Scharr dst : UMat ksize : int scale : double delta : double borderType : int Python prototype (for reference): Laplacian ( src , ddepth [ , dst [ , ksize [ , scale [ , delta [ , borderType ] ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#laplacian/3","title":"OpenCV.laplacian/3","type":"function"},{"doc":"","ref":"OpenCV.html#line/4","title":"OpenCV.line/4","type":"function"},{"doc":"Draws a line segment connecting two points. The function line draws the line segment between pt1 and pt2 points in the image. The line is clipped by the image boundaries. For non-antialiased lines with integer coordinates, the 8-connected or 4-connected Bresenham algorithm is used. Thick lines are drawn with rounding endings. Antialiased lines are drawn using Gaussian filtering. img : Image. pt1 . pt2 . color . thickness . lineType . shift . thickness : int lineType : int shift : int Python prototype (for reference): line ( img , pt1 , pt2 , color [ , thickness [ , lineType [ , shift ] ] ] ) -&gt; img","ref":"OpenCV.html#line/5","title":"OpenCV.line/5","type":"function"},{"doc":"","ref":"OpenCV.html#linearpolar/4","title":"OpenCV.linearpolar/4","type":"function"},{"doc":"Remaps an image to polar coordinates space. @deprecated This function produces same result as cv::warpPolar(src, dst, src.size(), center, maxRadius, flags) @internal Transform the source image using the following transformation (See @ref polar_remaps_reference_image &quot;Polar remaps reference image c)&quot;): \\f[\\begin{array}{l} dst( \\rho , \\phi ) = src(x,y) \\\\ dst.size() \\leftarrow src.size() \\end{array}\\f] where \\f[\\begin{array}{l} I = (dx,dy) = (x - center.x,y - center.y) \\\\ \\rho = Kmag \\cdot \\texttt{magnitude} (I) ,\\\\ \\phi = angle \\cdot \\texttt{angle} (I) \\end{array}\\f] and \\f[\\begin{array}{l} Kx = src.cols / maxRadius \\\\ Ky = src.rows / 2\\Pi \\end{array}\\f] src . dst . center . maxRadius . flags . Note : The function can not operate in-place. To calculate magnitude and angle in degrees #cartToPolar is used internally thus angles are measured from 0 to 360 with accuracy about 0.3 degrees. @sa cv::logPolar @endinternal dst : UMat Python prototype (for reference): linearPolar ( src , center , maxRadius , flags [ , dst ] ) -&gt; dst","ref":"OpenCV.html#linearpolar/5","title":"OpenCV.linearpolar/5","type":"function"},{"doc":"","ref":"OpenCV.html#log/1","title":"OpenCV.log/1","type":"function"},{"doc":"Calculates the natural logarithm of every array element. The function cv::log calculates the natural logarithm of every element of the input array: \\f[\\texttt{dst} (I) = \\log (\\texttt{src}(I)) \\f] Output on zero, negative and special (NaN, Inf) values is undefined. src . dst . @sa exp, cartToPolar, polarToCart, phase, pow, sqrt, magnitude dst : UMat Python prototype (for reference): log ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.html#log/2","title":"OpenCV.log/2","type":"function"},{"doc":"","ref":"OpenCV.html#logpolar/4","title":"OpenCV.logpolar/4","type":"function"},{"doc":"Remaps an image to semilog-polar coordinates space. @deprecated This function produces same result as cv::warpPolar(src, dst, src.size(), center, maxRadius, flags+WARP_POLAR_LOG); @internal Transform the source image using the following transformation (See @ref polar_remaps_reference_image &quot;Polar remaps reference image d)&quot;): \\f[\\begin{array}{l} dst( \\rho , \\phi ) = src(x,y) \\\\ dst.size() \\leftarrow src.size() \\end{array}\\f] where \\f[\\begin{array}{l} I = (dx,dy) = (x - center.x,y - center.y) \\\\ \\rho = M \\cdot log_e(\\texttt{magnitude} (I)) ,\\\\ \\phi = Kangle \\cdot \\texttt{angle} (I) \\\\ \\end{array}\\f] and \\f[\\begin{array}{l} M = src.cols / log_e(maxRadius) \\\\ Kangle = src.rows / 2\\Pi \\\\ \\end{array}\\f] The function emulates the human &quot;foveal&quot; vision and can be used for fast scale and rotation-invariant template matching, for object tracking and so forth. src . dst . center . m . flags . Note : The function can not operate in-place. To calculate magnitude and angle in degrees #cartToPolar is used internally thus angles are measured from 0 to 360 with accuracy about 0.3 degrees. @sa cv::linearPolar @endinternal dst : UMat Python prototype (for reference): logPolar ( src , center , M , flags [ , dst ] ) -&gt; dst","ref":"OpenCV.html#logpolar/5","title":"OpenCV.logpolar/5","type":"function"},{"doc":"","ref":"OpenCV.html#lut/2","title":"OpenCV.lut/2","type":"function"},{"doc":"Performs a look-up table transform of an array. The function LUT fills the output array with values from the look-up table. Indices of the entries are taken from the input array. That is, the function processes each element of src as follows: \\f[\\texttt{dst} (I) \\leftarrow \\texttt{lut(src(I) + d)}\\f] where \\f[d = \\fork{0}{if (\\texttt{src}) has depth (\\texttt{CV_8U})}{128}{if (\\texttt{src}) has depth (\\texttt{CV_8S})}\\f] src . lut . either have a single channel (in this case the same table is used for all channels) or the same number of channels as in the input array. dst . @sa convertScaleAbs, Mat::convertTo dst : UMat Python prototype (for reference): LUT ( src , lut [ , dst ] ) -&gt; dst","ref":"OpenCV.html#lut/3","title":"OpenCV.lut/3","type":"function"},{"doc":"","ref":"OpenCV.html#magnitude/2","title":"OpenCV.magnitude/2","type":"function"},{"doc":"Calculates the magnitude of 2D vectors. The function cv::magnitude calculates the magnitude of 2D vectors formed from the corresponding elements of x and y arrays: \\f[\\texttt{dst} (I) = \\sqrt{\\texttt{x}(I)^2 + \\texttt{y}(I)^2}\\f] x . y . have the same size as x. magnitude . @sa cartToPolar, polarToCart, phase, sqrt magnitude : UMat Python prototype (for reference): magnitude ( x , y [ , magnitude ] ) -&gt; magnitude","ref":"OpenCV.html#magnitude/3","title":"OpenCV.magnitude/3","type":"function"},{"doc":"","ref":"OpenCV.html#mahalanobis/3","title":"OpenCV.mahalanobis/3","type":"function"},{"doc":"","ref":"OpenCV.html#matchshapes/4","title":"OpenCV.matchshapes/4","type":"function"},{"doc":"","ref":"OpenCV.html#matchtemplate/3","title":"OpenCV.matchtemplate/3","type":"function"},{"doc":"Compares a template against overlapped image regions. The function slides through image , compares the overlapped patches of size \\f$w \\times h\\f$ against templ using the specified method and stores the comparison results in result . #TemplateMatchModes describes the formulae for the available comparison methods ( \\f$I\\f$ denotes image, \\f$T\\f$ template, \\f$R\\f$ result, \\f$M\\f$ the optional mask ). The summation is done over template and/or the image patch: \\f$x' = 0...w-1, y' = 0...h-1\\f$ After the function finishes the comparison, the best matches can be found as global minimums (when #TM_SQDIFF was used) or maximums (when #TM_CCORR or #TM_CCOEFF was used) using the #minMaxLoc function. In case of a color image, template summation in the numerator and each sum in the denominator is done over all of the channels and separate mean values are used for each channel. That is, the function can take a color template and a color image. The result will still be a single-channel image, which is easier to analyze. image . templ . data type. result . is \\f$W \\times H\\f$ and templ is \\f$w \\times h\\f$ , then result is \\f$(W-w+1) \\times (H-h+1)\\f$ . method . mask . of channels as template or only one channel, which is then used for all template and image channels. If the data type is #CV_8U, the mask is interpreted as a binary mask, meaning only elements where mask is nonzero are used and are kept unchanged independent of the actual mask value (weight equals 1). For data tpye #CV_32F, the mask values are used as weights. The exact formulas are documented in #TemplateMatchModes. result : UMat mask : UMat Python prototype (for reference): matchTemplate ( image , templ , method [ , result [ , mask ] ] ) -&gt; result","ref":"OpenCV.html#matchtemplate/4","title":"OpenCV.matchtemplate/4","type":"function"},{"doc":"","ref":"OpenCV.html#matmulderiv/2","title":"OpenCV.matmulderiv/2","type":"function"},{"doc":"Computes partial derivatives of the matrix product for each multiplied matrix. a . b . dABdA . \\f$\\texttt{A.rows*B.cols} \\times {A.rows*A.cols}\\f$ . dABdB . \\f$\\texttt{A.rows*B.cols} \\times {B.rows*B.cols}\\f$ . The function computes partial derivatives of the elements of the matrix product \\f$A*B\\f$ with regard to the elements of each of the two input matrices. The function is used to compute the Jacobian matrices in #stereoCalibrate but can also be used in any other similar optimization function. dABdA : UMat dABdB : UMat Python prototype (for reference): matMulDeriv ( A , B [ , dABdA [ , dABdB ] ] ) -&gt; dABdA , dABdB","ref":"OpenCV.html#matmulderiv/3","title":"OpenCV.matmulderiv/3","type":"function"},{"doc":"","ref":"OpenCV.html#max/2","title":"OpenCV.max/2","type":"function"},{"doc":"Calculates per-element maximum of two arrays or an array and a scalar. The function cv::max calculates the per-element maximum of two arrays: \\f[\\texttt{dst} (I)= \\max ( \\texttt{src1} (I), \\texttt{src2} (I))\\f] or array and a scalar: \\f[\\texttt{dst} (I)= \\max ( \\texttt{src1} (I), \\texttt{value} )\\f] src1 . src2 . dst . @sa min, compare, inRange, minMaxLoc, @ref MatrixExpressions dst : UMat Python prototype (for reference): max ( src1 , src2 [ , dst ] ) -&gt; dst","ref":"OpenCV.html#max/3","title":"OpenCV.max/3","type":"function"},{"doc":"","ref":"OpenCV.html#mean/1","title":"OpenCV.mean/1","type":"function"},{"doc":"Calculates an average (mean) of array elements. The function cv::mean calculates the mean value M of array elements, independently for each channel, and return it: \\f[\\begin{array}{l} N = \\sum _{I: \\; \\texttt{mask} (I) \\ne 0} 1 \\\\ M_c = \\left ( \\sum _{I: \\; \\texttt{mask} (I) \\ne 0}{ \\texttt{mtx} (I)_c} \\right )/N \\end{array}\\f] When all the mask elements are 0's, the function returns Scalar::all(0) src . Scalar_ . mask . @sa countNonZero, meanStdDev, norm, minMaxLoc mask : UMat Python prototype (for reference): mean ( src [ , mask ] ) -&gt; retval","ref":"OpenCV.html#mean/2","title":"OpenCV.mean/2","type":"function"},{"doc":"","ref":"OpenCV.html#meanshift/3","title":"OpenCV.meanshift/3","type":"function"},{"doc":"","ref":"OpenCV.html#meanstddev/1","title":"OpenCV.meanstddev/1","type":"function"},{"doc":"Calculates a mean and standard deviation of array elements. The function cv::meanStdDev calculates the mean and the standard deviation M of array elements independently for each channel and returns it via the output parameters: \\f[\\begin{array}{l} N = \\sum _{I, \\texttt{mask} (I) \\ne 0} 1 \\\\ \\texttt{mean} _c = \\frac{\\sum_{ I: \\; \\texttt{mask}(I) \\ne 0} \\texttt{src} (I)_c}{N} \\\\ \\texttt{stddev} _c = \\sqrt{\\frac{\\sum_{ I: \\; \\texttt{mask}(I) \\ne 0} \\left ( \\texttt{src} (I)_c - \\texttt{mean} _c \\right )^2}{N}} \\end{array}\\f] When all the mask elements are 0's, the function returns mean=stddev=Scalar::all(0). Note : The calculated standard deviation is only the diagonal of the complete normalized covariance matrix. If the full matrix is needed, you can reshape the multi-channel array M x N to the single-channel array M*N x mtx.channels() (only possible when the matrix is continuous) and then pass the matrix to calcCovarMatrix . src . Scalar_ 's. mean . stddev . mask . @sa countNonZero, mean, norm, minMaxLoc, calcCovarMatrix mean : UMat stddev : UMat mask : UMat Python prototype (for reference): meanStdDev ( src [ , mean [ , stddev [ , mask ] ] ] ) -&gt; mean , stddev","ref":"OpenCV.html#meanstddev/2","title":"OpenCV.meanstddev/2","type":"function"},{"doc":"","ref":"OpenCV.html#medianblur/2","title":"OpenCV.medianblur/2","type":"function"},{"doc":"Blurs an image using the median filter. The function smoothes an image using the median filter with the \\f$\\texttt{ksize} \\times \\texttt{ksize}\\f$ aperture. Each channel of a multi-channel image is processed independently. In-place operation is supported. Note : The median filter uses #BORDER_REPLICATE internally to cope with border pixels, see #BorderTypes src . CV_8U, CV_16U, or CV_32F, for larger aperture sizes, it can only be CV_8U. dst . ksize . @sa bilateralFilter, blur, boxFilter, GaussianBlur dst : UMat Python prototype (for reference): medianBlur ( src , ksize [ , dst ] ) -&gt; dst","ref":"OpenCV.html#medianblur/3","title":"OpenCV.medianblur/3","type":"function"},{"doc":"","ref":"OpenCV.html#merge/1","title":"OpenCV.merge/1","type":"function"},{"doc":"Has overloading in C++ mv . size and the same depth. dst . be the total number of channels in the matrix array. dst : UMat Python prototype (for reference): merge ( mv [ , dst ] ) -&gt; dst","ref":"OpenCV.html#merge/2","title":"OpenCV.merge/2","type":"function"},{"doc":"","ref":"OpenCV.html#min/2","title":"OpenCV.min/2","type":"function"},{"doc":"Calculates per-element minimum of two arrays or an array and a scalar. The function cv::min calculates the per-element minimum of two arrays: \\f[\\texttt{dst} (I)= \\min ( \\texttt{src1} (I), \\texttt{src2} (I))\\f] or array and a scalar: \\f[\\texttt{dst} (I)= \\min ( \\texttt{src1} (I), \\texttt{value} )\\f] src1 . src2 . dst . @sa max, compare, inRange, minMaxLoc dst : UMat Python prototype (for reference): min ( src1 , src2 [ , dst ] ) -&gt; dst","ref":"OpenCV.html#min/3","title":"OpenCV.min/3","type":"function"},{"doc":"","ref":"OpenCV.html#minarearect/1","title":"OpenCV.minarearect/1","type":"function"},{"doc":"","ref":"OpenCV.html#minenclosingcircle/1","title":"OpenCV.minenclosingcircle/1","type":"function"},{"doc":"","ref":"OpenCV.html#minenclosingtriangle/1","title":"OpenCV.minenclosingtriangle/1","type":"function"},{"doc":"Finds a triangle of minimum area enclosing a 2D point set and returns its area. The function finds a triangle of minimum area enclosing the given set of 2D points and returns its area. The output for a given 2D point set is shown in the image below. 2D points are depicted in red and the enclosing triangle in yellow*. The implementation of the algorithm is based on O'Rourke's @cite ORourke86 and Klee and Laskowski's @cite KleeLaskowski85 papers. O'Rourke provides a \\f$\\theta(n)\\f$ algorithm for finding the minimal enclosing triangle of a 2D convex polygon with n vertices. Since the #minEnclosingTriangle function takes a 2D point set as input an additional preprocessing step of computing the convex hull of the 2D point set is required. The complexity of the #convexHull function is \\f$O(n log(n))\\f$ which is higher than \\f$\\theta(n)\\f$. Thus the overall complexity of the function is \\f$O(n log(n))\\f$. points . triangle . of the OutputArray must be CV_32F. triangle : UMat Python prototype (for reference): minEnclosingTriangle ( points [ , triangle ] ) -&gt; retval , triangle","ref":"OpenCV.html#minenclosingtriangle/2","title":"OpenCV.minenclosingtriangle/2","type":"function"},{"doc":"","ref":"OpenCV.html#minmaxloc/1","title":"OpenCV.minmaxloc/1","type":"function"},{"doc":"Finds the global minimum and maximum in an array. The function cv::minMaxLoc finds the minimum and maximum element values and their positions. The extremums are searched across the whole array or, if mask is not an empty array, in the specified array region. The function do not work with multi-channel arrays. If you need to find minimum or maximum elements across all the channels, use Mat::reshape first to reinterpret the array as single-channel. Or you may extract the particular channel using either extractImageCOI , or mixChannels , or split . src . minVal . maxVal . minLoc . maxLoc . mask . @sa max, min, reduceArgMin, reduceArgMax, compare, inRange, extractImageCOI, mixChannels, split, Mat::reshape mask : UMat Python prototype (for reference): minMaxLoc ( src [ , mask ] ) -&gt; minVal , maxVal , minLoc , maxLoc","ref":"OpenCV.html#minmaxloc/2","title":"OpenCV.minmaxloc/2","type":"function"},{"doc":"","ref":"OpenCV.html#mixchannels/3","title":"OpenCV.mixchannels/3","type":"function"},{"doc":"","ref":"OpenCV.html#ml_ann_mlp_create/0","title":"OpenCV.ml_ann_mlp_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#ml_ann_mlp_load/1","title":"OpenCV.ml_ann_mlp_load/1","type":"function"},{"doc":"","ref":"OpenCV.html#ml_boost_create/0","title":"OpenCV.ml_boost_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#ml_boost_load/1","title":"OpenCV.ml_boost_load/1","type":"function"},{"doc":"Loads and creates a serialized Boost from a file Use Boost::save to serialize and store an RTree to disk. Load the Boost from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): Boost_load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.html#ml_boost_load/2","title":"OpenCV.ml_boost_load/2","type":"function"},{"doc":"","ref":"OpenCV.html#ml_dtrees_create/0","title":"OpenCV.ml_dtrees_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#ml_dtrees_load/1","title":"OpenCV.ml_dtrees_load/1","type":"function"},{"doc":"Loads and creates a serialized DTrees from a file Use DTree::save to serialize and store an DTree to disk. Load the DTree from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): DTrees_load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.html#ml_dtrees_load/2","title":"OpenCV.ml_dtrees_load/2","type":"function"},{"doc":"","ref":"OpenCV.html#ml_em_create/0","title":"OpenCV.ml_em_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#ml_em_load/1","title":"OpenCV.ml_em_load/1","type":"function"},{"doc":"Loads and creates a serialized EM from a file Use EM::save to serialize and store an EM to disk. Load the EM from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): EM_load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.html#ml_em_load/2","title":"OpenCV.ml_em_load/2","type":"function"},{"doc":"","ref":"OpenCV.html#ml_knearest_create/0","title":"OpenCV.ml_knearest_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#ml_knearest_load/1","title":"OpenCV.ml_knearest_load/1","type":"function"},{"doc":"","ref":"OpenCV.html#ml_logisticregression_create/0","title":"OpenCV.ml_logisticregression_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#ml_logisticregression_load/1","title":"OpenCV.ml_logisticregression_load/1","type":"function"},{"doc":"Loads and creates a serialized LogisticRegression from a file Use LogisticRegression::save to serialize and store an LogisticRegression to disk. Load the LogisticRegression from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): LogisticRegression_load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.html#ml_logisticregression_load/2","title":"OpenCV.ml_logisticregression_load/2","type":"function"},{"doc":"","ref":"OpenCV.html#ml_normalbayesclassifier_create/0","title":"OpenCV.ml_normalbayesclassifier_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#ml_normalbayesclassifier_load/1","title":"OpenCV.ml_normalbayesclassifier_load/1","type":"function"},{"doc":"Loads and creates a serialized NormalBayesClassifier from a file Use NormalBayesClassifier::save to serialize and store an NormalBayesClassifier to disk. Load the NormalBayesClassifier from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): NormalBayesClassifier_load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.html#ml_normalbayesclassifier_load/2","title":"OpenCV.ml_normalbayesclassifier_load/2","type":"function"},{"doc":"","ref":"OpenCV.html#ml_paramgrid_create/0","title":"OpenCV.ml_paramgrid_create/0","type":"function"},{"doc":"Creates a ParamGrid Ptr that can be given to the %SVM::trainAuto method minVal . maxVal . logstep . minVal : double maxVal : double logstep : double Python prototype (for reference): ParamGrid_create ( [ , minVal [ , maxVal [ , logstep ] ] ] ) -&gt; retval","ref":"OpenCV.html#ml_paramgrid_create/1","title":"OpenCV.ml_paramgrid_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#ml_rtrees_create/0","title":"OpenCV.ml_rtrees_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#ml_rtrees_load/1","title":"OpenCV.ml_rtrees_load/1","type":"function"},{"doc":"Loads and creates a serialized RTree from a file Use RTree::save to serialize and store an RTree to disk. Load the RTree from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): RTrees_load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.html#ml_rtrees_load/2","title":"OpenCV.ml_rtrees_load/2","type":"function"},{"doc":"","ref":"OpenCV.html#ml_svm_create/0","title":"OpenCV.ml_svm_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#ml_svm_getdefaultgridptr/1","title":"OpenCV.ml_svm_getdefaultgridptr/1","type":"function"},{"doc":"","ref":"OpenCV.html#ml_svm_load/1","title":"OpenCV.ml_svm_load/1","type":"function"},{"doc":"","ref":"OpenCV.html#ml_svmsgd_create/0","title":"OpenCV.ml_svmsgd_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#ml_svmsgd_load/1","title":"OpenCV.ml_svmsgd_load/1","type":"function"},{"doc":"Loads and creates a serialized SVMSGD from a file Use SVMSGD::save to serialize and store an SVMSGD to disk. Load the SVMSGD from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): SVMSGD_load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.html#ml_svmsgd_load/2","title":"OpenCV.ml_svmsgd_load/2","type":"function"},{"doc":"","ref":"OpenCV.html#ml_traindata_create/3","title":"OpenCV.ml_traindata_create/3","type":"function"},{"doc":"Creates training data from in-memory arrays. samples . layout . responses . single row or as a single column. The matrix should have type CV_32F or CV_32S (in the former case the responses are considered as ordered by default; in the latter case - as categorical) varIdx . (CV_32S) containing 0-based variable indices or byte vector (CV_8U) containing a mask of active variables. sampleIdx . vector (CV_32S) containing 0-based sample indices or byte vector (CV_8U) containing a mask of training samples. sampleWeights . varType . &lt;number_of_variables_in_responses&gt;`, containing types of each input and output variable. See ml::VariableTypes. varIdx : UMat sampleIdx : UMat sampleWeights : UMat varType : UMat Python prototype (for reference): TrainData_create ( samples , layout , responses [ , varIdx [ , sampleIdx [ , sampleWeights [ , varType ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#ml_traindata_create/4","title":"OpenCV.ml_traindata_create/4","type":"function"},{"doc":"","ref":"OpenCV.html#ml_traindata_getsubmatrix/3","title":"OpenCV.ml_traindata_getsubmatrix/3","type":"function"},{"doc":"","ref":"OpenCV.html#ml_traindata_getsubvector/2","title":"OpenCV.ml_traindata_getsubvector/2","type":"function"},{"doc":"","ref":"OpenCV.html#moments/1","title":"OpenCV.moments/1","type":"function"},{"doc":"Calculates all of the moments up to the third order of a polygon or rasterized shape. The function computes moments, up to the 3rd order, of a vector shape or a rasterized shape. The results are returned in the structure cv::Moments. array . \\f$1 \\times N\\f$ or \\f$N \\times 1\\f$ ) of 2D points (Point or Point2f ). binaryImage . used for images only. @returns moments. Note : Only applicable to contour moments calculations from Python bindings: Note that the numpy type for the input array should be either np.int32 or np.float32. @sa contourArea, arcLength binaryImage : bool Python prototype (for reference): moments ( array [ , binaryImage ] ) -&gt; retval","ref":"OpenCV.html#moments/2","title":"OpenCV.moments/2","type":"function"},{"doc":"","ref":"OpenCV.html#morphologyex/3","title":"OpenCV.morphologyex/3","type":"function"},{"doc":"Performs advanced morphological transformations. The function cv::morphologyEx can perform advanced morphological transformations using an erosion and dilation as basic operations. Any of the operations can be done in-place. In case of multi-channel images, each channel is processed independently. src . CV_8U, CV_16U, CV_16S, CV_32F or CV_64F. dst . op . kernel . anchor . kernel center. iterations . borderType . borderValue . meaning. @sa dilate, erode, getStructuringElement Note : The number of iterations is the number of times erosion or dilatation operation will be applied. For instance, an opening operation (#MORPH_OPEN) with two iterations is equivalent to apply successively: erode -&gt; erode -&gt; dilate -&gt; dilate (and not erode -&gt; dilate -&gt; erode -&gt; dilate). dst : UMat anchor : Point iterations : int borderType : int borderValue : Scalar Python prototype (for reference): morphologyEx ( src , op , kernel [ , dst [ , anchor [ , iterations [ , borderType [ , borderValue ] ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#morphologyex/4","title":"OpenCV.morphologyex/4","type":"function"},{"doc":"","ref":"OpenCV.html#movewindow/3","title":"OpenCV.movewindow/3","type":"function"},{"doc":"","ref":"OpenCV.html#mser_create/0","title":"OpenCV.mser_create/0","type":"function"},{"doc":"Full constructor for %MSER detector delta . min_area . max_area . max_variation . min_diversity . max_evolution . area_threshold . min_margin . edge_blur_size . delta : int min_area : int max_area : int max_variation : double min_diversity : double max_evolution : int area_threshold : double min_margin : double edge_blur_size : int Python prototype (for reference): MSER_create ( [ , delta [ , min_area [ , max_area [ , max_variation [ , min_diversity [ , max_evolution [ , area_threshold [ , min_margin [ , edge_blur_size ] ] ] ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#mser_create/1","title":"OpenCV.mser_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#mulspectrums/3","title":"OpenCV.mulspectrums/3","type":"function"},{"doc":"Performs the per-element multiplication of two Fourier spectrums. The function cv::mulSpectrums performs the per-element multiplication of the two CCS-packed or complex matrices that are results of a real or complex Fourier transform. The function, together with dft and idft , may be used to calculate convolution (pass conjB=false ) or correlation (pass conjB=true ) of two arrays rapidly. When the arrays are complex, they are simply multiplied (per element) with an optional conjugation of the second-array elements. When the arrays are real, they are assumed to be CCS-packed (see dft for details). a . b . c . flags . each row of src1 and src2 is an independent 1D Fourier spectrum. If you do not want to use this flag, then simply add a 0 as value. conjB . or not (false). c : UMat conjB : bool Python prototype (for reference): mulSpectrums ( a , b , flags [ , c [ , conjB ] ] ) -&gt; c","ref":"OpenCV.html#mulspectrums/4","title":"OpenCV.mulspectrums/4","type":"function"},{"doc":"","ref":"OpenCV.html#multiply/2","title":"OpenCV.multiply/2","type":"function"},{"doc":"Calculates the per-element scaled product of two arrays. The function multiply calculates the per-element product of two arrays: \\f[\\texttt{dst} (I)= \\texttt{saturate} ( \\texttt{scale} \\cdot \\texttt{src1} (I) \\cdot \\texttt{src2} (I))\\f] There is also a @ref MatrixExpressions -friendly variant of the first function. See Mat::mul . For a not-per-element matrix product, see gemm . Note : Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow. src1 . src2 . dst . scale . dtype . @sa add, subtract, divide, scaleAdd, addWeighted, accumulate, accumulateProduct, accumulateSquare, Mat::convertTo dst : UMat scale : double dtype : int Python prototype (for reference): multiply ( src1 , src2 [ , dst [ , scale [ , dtype ] ] ] ) -&gt; dst","ref":"OpenCV.html#multiply/3","title":"OpenCV.multiply/3","type":"function"},{"doc":"","ref":"OpenCV.html#multransposed/2","title":"OpenCV.multransposed/2","type":"function"},{"doc":"Calculates the product of a matrix and its transposition. The function cv::mulTransposed calculates the product of src and its transposition: \\f[\\texttt{dst} = \\texttt{scale} ( \\texttt{src} - \\texttt{delta} )^T ( \\texttt{src} - \\texttt{delta} )\\f] if aTa=true , and \\f[\\texttt{dst} = \\texttt{scale} ( \\texttt{src} - \\texttt{delta} ) ( \\texttt{src} - \\texttt{delta} )^T\\f] otherwise. The function is used to calculate the covariance matrix. With zero delta, it can be used as a faster substitute for general matrix product A*B when B=A' src . function can multiply not only floating-point matrices. dst . aTa . description below. delta . multiplication. When the matrix is empty ( delta=noArray() ), it is assumed to be zero, that is, nothing is subtracted. If it has the same size as src , it is simply subtracted. Otherwise, it is &quot;repeated&quot; (see repeat ) to cover the full src and then subtracted. Type of the delta matrix, when it is not empty, must be the same as the type of created output matrix. See the dtype parameter description below. scale . dtype . the output matrix will have the same type as src . Otherwise, it will be type=CV_MAT_DEPTH(dtype) that should be either CV_32F or CV_64F . @sa calcCovarMatrix, gemm, repeat, reduce dst : UMat delta : UMat scale : double dtype : int Python prototype (for reference): mulTransposed ( src , aTa [ , dst [ , delta [ , scale [ , dtype ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#multransposed/3","title":"OpenCV.multransposed/3","type":"function"},{"doc":"","ref":"OpenCV.html#namedwindow/1","title":"OpenCV.namedwindow/1","type":"function"},{"doc":"Creates a window. The function namedWindow creates a window that can be used as a placeholder for images and trackbars. Created windows are referred to by their names. If a window with the same name already exists, the function does nothing. You can call cv::destroyWindow or cv::destroyAllWindows to close the window and de-allocate any associated memory usage. For a simple program, you do not really have to call these functions because all the resources and windows of the application are closed automatically by the operating system upon exit. Note : Qt backend supports additional flags: WINDOW_NORMAL or WINDOW_AUTOSIZE: WINDOW_NORMAL enables you to resize the window, whereas WINDOW_AUTOSIZE adjusts automatically the window size to fit the displayed image (see imshow ), and you cannot change the window size manually. WINDOW_FREERATIO or WINDOW_KEEPRATIO: WINDOW_FREERATIO adjusts the image with no respect to its ratio, whereas WINDOW_KEEPRATIO keeps the image ratio. WINDOW_GUI_NORMAL or WINDOW_GUI_EXPANDED: WINDOW_GUI_NORMAL is the old way to draw the window without statusbar and toolbar, whereas WINDOW_GUI_EXPANDED is a new enhanced GUI. By default, flags == WINDOW_AUTOSIZE | WINDOW_KEEPRATIO | WINDOW_GUI_EXPANDED winname . flags . flags : int Python prototype (for reference): namedWindow ( winname [ , flags ] ) -&gt; None","ref":"OpenCV.html#namedwindow/2","title":"OpenCV.namedwindow/2","type":"function"},{"doc":"","ref":"OpenCV.html#norm/2","title":"OpenCV.norm/2","type":"function"},{"doc":"Calculates an absolute difference norm or a relative difference norm. This version of cv::norm calculates the absolute difference norm or the relative difference norm of arrays src1 and src2. The type of norm to calculate is specified using #NormTypes. src1 . src2 . normType . mask . normType : int mask : UMat Python prototype (for reference): norm ( src1 , src2 [ , normType [ , mask ] ] ) -&gt; retval","ref":"OpenCV.html#norm/3","title":"OpenCV.norm/3","type":"function"},{"doc":"","ref":"OpenCV.html#normalize/2","title":"OpenCV.normalize/2","type":"function"},{"doc":"Normalizes the norm or value range of an array. The function cv::normalize normalizes scale and shift the input array elements so that \\f[\\| \\texttt{dst} \\| _{L_p}= \\texttt{alpha}\\f] (where p=Inf, 1 or 2) when normType=NORM_INF, NORM_L1, or NORM_L2, respectively; or so that \\f[\\min _I \\texttt{dst} (I)= \\texttt{alpha} , \\, \\, \\max _I \\texttt{dst} (I)= \\texttt{beta}\\f] when normType=NORM_MINMAX (for dense arrays only). The optional mask specifies a sub-array to be normalized. This means that the norm or min-n-max are calculated over the sub-array, and then this sub-array is modified to be normalized. If you want to only use the mask to calculate the norm or min-max but modify the whole array, you can use norm and Mat::convertTo. In case of sparse matrices, only the non-zero values are analyzed and transformed. Because of this, the range transformation for sparse matrices is not allowed since it can shift the zero level. Possible usage with some positive example data: vector&lt;double&gt; positiveData = { 2.0, 8.0, 10.0 }; vector&lt;double&gt; normalizedData_l1, normalizedData_l2, normalizedData_inf, normalizedData_minmax; // Norm to probability (total count) // sum(numbers) = 20.0 // 2.0 0.1 (2.0/20.0) // 8.0 0.4 (8.0/20.0) // 10.0 0.5 (10.0/20.0) normalize(positiveData, normalizedData_l1, 1.0, 0.0, NORM_L1); // Norm to unit vector: ||positiveData|| = 1.0 // 2.0 0.15 // 8.0 0.62 // 10.0 0.77 normalize(positiveData, normalizedData_l2, 1.0, 0.0, NORM_L2); // Norm to max element // 2.0 0.2 (2.0/10.0) // 8.0 0.8 (8.0/10.0) // 10.0 1.0 (10.0/10.0) normalize(positiveData, normalizedData_inf, 1.0, 0.0, NORM_INF); // Norm to range [0.0;1.0] // 2.0 0.0 (shift to left border) // 8.0 0.75 (6.0/8.0) // 10.0 1.0 (shift to right border) normalize(positiveData, normalizedData_minmax, 1.0, 0.0, NORM_MINMAX); src . dst . alpha . normalization. beta . normalization. norm_type . dtype . number of channels as src and the depth =CV_MAT_DEPTH(dtype). mask . @sa norm, Mat::convertTo, SparseMat::convertTo alpha : double beta : double norm_type : int dtype : int mask : UMat Python prototype (for reference): normalize ( src , dst [ , alpha [ , beta [ , norm_type [ , dtype [ , mask ] ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#normalize/3","title":"OpenCV.normalize/3","type":"function"},{"doc":"","ref":"OpenCV.html#ocl_device_getdefault/0","title":"OpenCV.ocl_device_getdefault/0","type":"function"},{"doc":"","ref":"OpenCV.html#ocl_finish/0","title":"OpenCV.ocl_finish/0","type":"function"},{"doc":"","ref":"OpenCV.html#ocl_haveamdblas/0","title":"OpenCV.ocl_haveamdblas/0","type":"function"},{"doc":"","ref":"OpenCV.html#ocl_haveamdfft/0","title":"OpenCV.ocl_haveamdfft/0","type":"function"},{"doc":"","ref":"OpenCV.html#ocl_haveopencl/0","title":"OpenCV.ocl_haveopencl/0","type":"function"},{"doc":"","ref":"OpenCV.html#ocl_ocl_device_device/0","title":"OpenCV.ocl_ocl_device_device/0","type":"function"},{"doc":"","ref":"OpenCV.html#ocl_setuseopencl/1","title":"OpenCV.ocl_setuseopencl/1","type":"function"},{"doc":"","ref":"OpenCV.html#ocl_useopencl/0","title":"OpenCV.ocl_useopencl/0","type":"function"},{"doc":"","ref":"OpenCV.html#orb_create/0","title":"OpenCV.orb_create/0","type":"function"},{"doc":"The ORB constructor nfeatures . scaleFactor . pyramid, where each next level has 4x less pixels than the previous, but such a big scale factor will degrade feature matching scores dramatically. On the other hand, too close to 1 scale factor will mean that to cover certain scale range you will need more pyramid levels and so the speed will suffer. nlevels . input_image_linear_size/pow(scaleFactor, nlevels - firstLevel). edgeThreshold . roughly match the patchSize parameter. firstLevel . with upscaled source image. wTA_K . default value 2 means the BRIEF where we take a random point pair and compare their brightnesses, so we get 0/1 response. Other possible values are 3 and 4. For example, 3 means that we take 3 random points (of course, those point coordinates are random, but they are generated from the pre-defined seed, so each element of BRIEF descriptor is computed deterministically from the pixel rectangle), find point of maximum brightness and output index of the winner (0, 1 or 2). Such output will occupy 2 bits, and therefore it will need a special variant of Hamming distance, denoted as NORM_HAMMING2 (2 bits per bin). When WTA_K=4, we take 4 random points to compute each bin (that will also occupy 2 bits with possible values 0, 1, 2 or 3). scoreType . (the score is written to KeyPoint::score and is used to retain best nfeatures features); FAST_SCORE is alternative value of the parameter that produces slightly less stable keypoints, but it is a little faster to compute. patchSize . pyramid layers the perceived image area covered by a feature will be larger. fastThreshold . nfeatures : int scaleFactor : float nlevels : int edgeThreshold : int firstLevel : int wTA_K : int scoreType : ORB_ScoreType patchSize : int fastThreshold : int Python prototype (for reference): ORB_create ( [ , nfeatures [ , scaleFactor [ , nlevels [ , edgeThreshold [ , firstLevel [ , WTA_K [ , scoreType [ , patchSize [ , fastThreshold ] ] ] ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#orb_create/1","title":"OpenCV.orb_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#parallel_setparallelforbackend/1","title":"OpenCV.parallel_setparallelforbackend/1","type":"function"},{"doc":"Change OpenCV parallel_for backend Note : This call is not thread-safe. Consider calling this function from the main() before any other OpenCV processing functions (and without any other created threads). propagateNumThreads : bool Python prototype (for reference): setParallelForBackend ( backendName [ , propagateNumThreads ] ) -&gt; retval","ref":"OpenCV.html#parallel_setparallelforbackend/2","title":"OpenCV.parallel_setparallelforbackend/2","type":"function"},{"doc":"","ref":"OpenCV.html#patchnans/1","title":"OpenCV.patchnans/1","type":"function"},{"doc":"converts NaNs to the given number a . val . val : double Python prototype (for reference): patchNaNs ( a [ , val ] ) -&gt; a","ref":"OpenCV.html#patchnans/2","title":"OpenCV.patchnans/2","type":"function"},{"doc":"","ref":"OpenCV.html#pcabackproject/3","title":"OpenCV.pcabackproject/3","type":"function"},{"doc":"wrap PCA::backProject result : UMat Python prototype (for reference): PCABackProject ( data , mean , eigenvectors [ , result ] ) -&gt; result","ref":"OpenCV.html#pcabackproject/4","title":"OpenCV.pcabackproject/4","type":"function"},{"doc":"","ref":"OpenCV.html#pcacompute/2","title":"OpenCV.pcacompute/2","type":"function"},{"doc":"","ref":"OpenCV.html#pcacompute/3","title":"OpenCV.pcacompute/3","type":"function"},{"doc":"wrap PCA::operator() eigenvectors : UMat Python prototype (for reference): PCACompute ( data , mean , retainedVariance [ , eigenvectors ] ) -&gt; mean , eigenvectors","ref":"OpenCV.html#pcacompute/4","title":"OpenCV.pcacompute/4","type":"function"},{"doc":"","ref":"OpenCV.html#pcacompute2/2","title":"OpenCV.pcacompute2/2","type":"function"},{"doc":"","ref":"OpenCV.html#pcacompute2/3","title":"OpenCV.pcacompute2/3","type":"function"},{"doc":"wrap PCA::operator() and add eigenvalues output parameter eigenvectors : UMat eigenvalues : UMat Python prototype (for reference): PCACompute2 ( data , mean , retainedVariance [ , eigenvectors [ , eigenvalues ] ] ) -&gt; mean , eigenvectors , eigenvalues","ref":"OpenCV.html#pcacompute2/4","title":"OpenCV.pcacompute2/4","type":"function"},{"doc":"","ref":"OpenCV.html#pcaproject/3","title":"OpenCV.pcaproject/3","type":"function"},{"doc":"wrap PCA::project result : UMat Python prototype (for reference): PCAProject ( data , mean , eigenvectors [ , result ] ) -&gt; result","ref":"OpenCV.html#pcaproject/4","title":"OpenCV.pcaproject/4","type":"function"},{"doc":"","ref":"OpenCV.html#pencilsketch/1","title":"OpenCV.pencilsketch/1","type":"function"},{"doc":"Pencil-like non-photorealistic line drawing src . dst1 . dst2 . sigma_s . sigma_r . shade_factor . dst1 : UMat dst2 : UMat sigma_s : float sigma_r : float shade_factor : float Python prototype (for reference): pencilSketch ( src [ , dst1 [ , dst2 [ , sigma_s [ , sigma_r [ , shade_factor ] ] ] ] ] ) -&gt; dst1 , dst2","ref":"OpenCV.html#pencilsketch/2","title":"OpenCV.pencilsketch/2","type":"function"},{"doc":"","ref":"OpenCV.html#perspectivetransform/2","title":"OpenCV.perspectivetransform/2","type":"function"},{"doc":"Performs the perspective matrix transformation of vectors. The function cv::perspectiveTransform transforms every element of src by treating it as a 2D or 3D vector, in the following way: \\f[(x, y, z) \\rightarrow (x'/w, y'/w, z'/w)\\f] where \\f[(x', y', z', w') = \\texttt{mat} \\cdot \\begin{bmatrix} x &amp; y &amp; z &amp; 1 \\end{bmatrix}\\f] and \\f[w = \\fork{w'}{if (w' \\ne 0)}{\\infty}{otherwise}\\f] Here a 3D vector transformation is shown. In case of a 2D vector transformation, the z component is omitted. Note : The function transforms a sparse set of 2D or 3D vectors. If you want to transform an image using perspective transformation, use warpPerspective . If you have an inverse problem, that is, you want to compute the most probable perspective transformation out of several pairs of corresponding points, you can use getPerspectiveTransform or findHomography . src . element is a 2D/3D vector to be transformed. dst . m . @sa transform, warpPerspective, getPerspectiveTransform, findHomography dst : UMat Python prototype (for reference): perspectiveTransform ( src , m [ , dst ] ) -&gt; dst","ref":"OpenCV.html#perspectivetransform/3","title":"OpenCV.perspectivetransform/3","type":"function"},{"doc":"","ref":"OpenCV.html#phase/2","title":"OpenCV.phase/2","type":"function"},{"doc":"Calculates the rotation angle of 2D vectors. The function cv::phase calculates the rotation angle of each 2D vector that is formed from the corresponding elements of x and y : \\f[\\texttt{angle} (I) = \\texttt{atan2} ( \\texttt{y} (I), \\texttt{x} (I))\\f] The angle estimation accuracy is about 0.3 degrees. When x(I)=y(I)=0 , the corresponding angle(I) is set to 0. x . y . same size and the same type as x. angle . same type as x . angleInDegrees . degrees, otherwise, they are measured in radians. angle : UMat angleInDegrees : bool Python prototype (for reference): phase ( x , y [ , angle [ , angleInDegrees ] ] ) -&gt; angle","ref":"OpenCV.html#phase/3","title":"OpenCV.phase/3","type":"function"},{"doc":"","ref":"OpenCV.html#phasecorrelate/2","title":"OpenCV.phasecorrelate/2","type":"function"},{"doc":"The function is used to detect translational shifts that occur between two images. The operation takes advantage of the Fourier shift theorem for detecting the translational shift in the frequency domain. It can be used for fast image registration as well as motion estimation. For more information please see http://en.wikipedia.org/wiki/Phase_correlation Calculates the cross-power spectrum of two supplied source arrays. The arrays are padded if needed with getOptimalDFTSize. The function performs the following equations: First it applies a Hanning window (see http://en.wikipedia.org/wiki/Hann_function ) to each image to remove possible edge effects. This window is cached until the array size changes to speed up processing time. Next it computes the forward DFTs of each source array: \\f[\\mathbf{G}_a = \\mathcal{F}\\{src_1\\}, \\; \\mathbf{G}_b = \\mathcal{F}\\{src_2\\}\\f] where \\f$\\mathcal{F}\\f$ is the forward DFT. It then computes the cross-power spectrum of each frequency domain array: \\f[R = \\frac{ \\mathbf{G}_a \\mathbf{G}_b^*}{|\\mathbf{G}_a \\mathbf{G}_b^*|}\\f] Next the cross-correlation is converted back into the time domain via the inverse DFT: \\f[r = \\mathcal{F}^{-1}\\{R\\}\\f] Finally, it computes the peak location and computes a 5x5 weighted centroid around the peak to achieve sub-pixel accuracy. \\f[(\\Delta x, \\Delta y) = \\texttt{weightedCentroid} \\{\\arg \\max_{(x, y)}\\{r\\}\\}\\f] If non-zero, the response parameter is computed as the sum of the elements of r within the 5x5 centroid around the peak location. It is normalized to a maximum of 1 (meaning there is a single peak) and will be smaller when there are multiple peaks. src1 . src2 . window . response . @returns detected phase shift (sub-pixel) between the two arrays. @sa dft, getOptimalDFTSize, idft, mulSpectrums createHanningWindow window : UMat Python prototype (for reference): phaseCorrelate ( src1 , src2 [ , window ] ) -&gt; retval , response","ref":"OpenCV.html#phasecorrelate/3","title":"OpenCV.phasecorrelate/3","type":"function"},{"doc":"","ref":"OpenCV.html#pointpolygontest/3","title":"OpenCV.pointpolygontest/3","type":"function"},{"doc":"","ref":"OpenCV.html#polartocart/2","title":"OpenCV.polartocart/2","type":"function"},{"doc":"Calculates x and y coordinates of 2D vectors from their magnitude and angle. The function cv::polarToCart calculates the Cartesian coordinates of each 2D vector represented by the corresponding elements of magnitude and angle: \\f[\\begin{array}{l} \\texttt{x} (I) = \\texttt{magnitude} (I) \\cos ( \\texttt{angle} (I)) \\\\ \\texttt{y} (I) = \\texttt{magnitude} (I) \\sin ( \\texttt{angle} (I)) \\\\ \\end{array}\\f] The relative accuracy of the estimated coordinates is about 1e-6. magnitude . it can be an empty matrix (=Mat()), in this case, the function assumes that all the magnitudes are =1; if it is not empty, it must have the same size and type as angle. angle . x . size and type as angle. y . size and type as angle. angleInDegrees . degrees, otherwise, they are measured in radians. @sa cartToPolar, magnitude, phase, exp, log, pow, sqrt x : UMat y : UMat angleInDegrees : bool Python prototype (for reference): polarToCart ( magnitude , angle [ , x [ , y [ , angleInDegrees ] ] ] ) -&gt; x , y","ref":"OpenCV.html#polartocart/3","title":"OpenCV.polartocart/3","type":"function"},{"doc":"","ref":"OpenCV.html#pollkey/0","title":"OpenCV.pollkey/0","type":"function"},{"doc":"","ref":"OpenCV.html#polylines/4","title":"OpenCV.polylines/4","type":"function"},{"doc":"Draws several polygonal curves. img : Image. pts . isClosed . the function draws a line from the last vertex of each curve to its first vertex. color . thickness . lineType . shift . The function cv::polylines draws one or more polygonal curves. thickness : int lineType : int shift : int Python prototype (for reference): polylines ( img , pts , isClosed , color [ , thickness [ , lineType [ , shift ] ] ] ) -&gt; img","ref":"OpenCV.html#polylines/5","title":"OpenCV.polylines/5","type":"function"},{"doc":"","ref":"OpenCV.html#pow/2","title":"OpenCV.pow/2","type":"function"},{"doc":"Raises every array element to a power. The function cv::pow raises every element of the input array to power : \\f[\\texttt{dst} (I) = \\fork{\\texttt{src}(I)^{power}}{if (\\texttt{power}) is integer}{|\\texttt{src}(I)|^{power}}{otherwise}\\f] So, for a non-integer power exponent, the absolute values of input array elements are used. However, it is possible to get true values for negative values using some extra operations. In the example below, computing the 5th root of array src shows: Mat mask = src &lt; 0; pow(src, 1./5, dst); subtract(Scalar::all(0), dst, dst, mask); For some values of power, such as integer values, 0.5 and -0.5, specialized faster algorithms are used. Special values (NaN, Inf) are not handled. src . power . dst . @sa sqrt, exp, log, cartToPolar, polarToCart dst : UMat Python prototype (for reference): pow ( src , power [ , dst ] ) -&gt; dst","ref":"OpenCV.html#pow/3","title":"OpenCV.pow/3","type":"function"},{"doc":"","ref":"OpenCV.html#precornerdetect/2","title":"OpenCV.precornerdetect/2","type":"function"},{"doc":"Calculates a feature map for corner detection. The function calculates the complex spatial derivative-based function of the source image \\f[\\texttt{dst} = (D_x \\texttt{src} )^2 \\cdot D_{yy} \\texttt{src} + (D_y \\texttt{src} )^2 \\cdot D_{xx} \\texttt{src} - 2 D_x \\texttt{src} \\cdot D_y \\texttt{src} \\cdot D_{xy} \\texttt{src}\\f] where \\f$D_x\\f$,\\f$D_y\\f$ are the first image derivatives, \\f$D_{xx}\\f$,\\f$D_{yy}\\f$ are the second image derivatives, and \\f$D_{xy}\\f$ is the mixed derivative. The corners can be found as local maximums of the functions, as shown below: Mat corners , dilated_corners ; preCornerDetect ( image , corners , 3 ) ; // dilation with 3 x3 rectangular structuring element dilate ( corners , dilated_corners , Mat ( ) , 1 ) ; Mat corner_mask = corners == dilated_corners ; src . dst . ksize . borderType . dst : UMat borderType : int Python prototype (for reference): preCornerDetect ( src , ksize [ , dst [ , borderType ] ] ) -&gt; dst","ref":"OpenCV.html#precornerdetect/3","title":"OpenCV.precornerdetect/3","type":"function"},{"doc":"","ref":"OpenCV.html#projectpoints/5","title":"OpenCV.projectpoints/5","type":"function"},{"doc":"Projects 3D points to an image plane. objectPoints . 1-channel or 1xN/Nx1 3-channel (or vector\\&lt;Point3f&gt; ), where N is the number of points in the view. rvec . basis from world to camera coordinate system, see @ref calibrateCamera for details. tvec . cameraMatrix . distCoeffs . \\f$\\distcoeffs\\f$ . If the vector is empty, the zero distortion coefficients are assumed. imagePoints . vector\\&lt;Point2f&gt; . jacobian . points with respect to components of the rotation vector, translation vector, focal lengths, coordinates of the principal point and the distortion coefficients. In the old interface different components of the jacobian are returned via different output parameters. aspectRatio . function assumes that the aspect ratio (\\f$f_x / f_y\\f$) is fixed and correspondingly adjusts the jacobian matrix. The function computes the 2D projections of 3D points to the image plane, given intrinsic and extrinsic camera parameters. Optionally, the function computes Jacobians -matrices of partial derivatives of image points coordinates (as functions of all the input parameters) with respect to the particular parameters, intrinsic and/or extrinsic. The Jacobians are used during the global optimization in @ref calibrateCamera, @ref solvePnP, and @ref stereoCalibrate. The function itself can also be used to compute a re-projection error, given the current intrinsic and extrinsic parameters. Note : By setting rvec = tvec = \\f$[0, 0, 0]\\f$, or by setting cameraMatrix to a 3x3 identity matrix, or by passing zero distortion coefficients, one can get various useful partial cases of the function. This means, one can compute the distorted coordinates for a sparse set of points or apply a perspective transformation (and also compute the derivatives) in the ideal zero-distortion setup. imagePoints : UMat jacobian : UMat aspectRatio : double Python prototype (for reference): projectPoints ( objectPoints , rvec , tvec , cameraMatrix , distCoeffs [ , imagePoints [ , jacobian [ , aspectRatio ] ] ] ) -&gt; imagePoints , jacobian","ref":"OpenCV.html#projectpoints/6","title":"OpenCV.projectpoints/6","type":"function"},{"doc":"","ref":"OpenCV.html#psnr/2","title":"OpenCV.psnr/2","type":"function"},{"doc":"Computes the Peak Signal-to-Noise Ratio (PSNR) image quality metric. This function calculates the Peak Signal-to-Noise Ratio (PSNR) image quality metric in decibels (dB), between two input arrays src1 and src2. The arrays must have the same type. The PSNR is calculated as follows: \\f[ \\texttt{PSNR} = 10 \\cdot \\log_{10}{\\left( \\frac{R^2}{MSE} \\right) } \\f] where R is the maximum integer value of depth (e.g. 255 in the case of CV_8U data) and MSE is the mean squared error between the two arrays. src1 . src2 . r . r : double Python prototype (for reference): PSNR ( src1 , src2 [ , R ] ) -&gt; retval","ref":"OpenCV.html#psnr/3","title":"OpenCV.psnr/3","type":"function"},{"doc":"","ref":"OpenCV.html#puttext/6","title":"OpenCV.puttext/6","type":"function"},{"doc":"Draws a text string. The function cv::putText renders the specified text string in the image. Symbols that cannot be rendered using the specified font are replaced by question marks. See #getTextSize for a text rendering code example. img : Image. text . org . fontFace . fontScale . color . thickness . lineType . bottomLeftOrigin . it is at the top-left corner. thickness : int lineType : int bottomLeftOrigin : bool Python prototype (for reference): putText ( img , text , org , fontFace , fontScale , color [ , thickness [ , lineType [ , bottomLeftOrigin ] ] ] ) -&gt; img","ref":"OpenCV.html#puttext/7","title":"OpenCV.puttext/7","type":"function"},{"doc":"","ref":"OpenCV.html#pyrdown/1","title":"OpenCV.pyrdown/1","type":"function"},{"doc":"Blurs an image and downsamples it. By default, size of the output image is computed as Size((src.cols+1)/2, (src.rows+1)/2) , but in any case, the following conditions should be satisfied: \\f[\\begin{array}{l} | \\texttt{dstsize.width} *2-src.cols| \\leq 2 \\\\ | \\texttt{dstsize.height} *2-src.rows| \\leq 2 \\end{array}\\f] The function performs the downsampling step of the Gaussian pyramid construction. First, it convolves the source image with the kernel: \\f[\\frac{1}{256} \\begin{bmatrix} 1 &amp; 4 &amp; 6 &amp; 4 &amp; 1 \\\\ 4 &amp; 16 &amp; 24 &amp; 16 &amp; 4 \\\\ 6 &amp; 24 &amp; 36 &amp; 24 &amp; 6 \\\\ 4 &amp; 16 &amp; 24 &amp; 16 &amp; 4 \\\\ 1 &amp; 4 &amp; 6 &amp; 4 &amp; 1 \\end{bmatrix}\\f] Then, it downsamples the image by rejecting even rows and columns. src . dst . dstsize . borderType . dst : UMat dstsize : Size borderType : int Python prototype (for reference): pyrDown ( src [ , dst [ , dstsize [ , borderType ] ] ] ) -&gt; dst","ref":"OpenCV.html#pyrdown/2","title":"OpenCV.pyrdown/2","type":"function"},{"doc":"","ref":"OpenCV.html#pyrmeanshiftfiltering/3","title":"OpenCV.pyrmeanshiftfiltering/3","type":"function"},{"doc":"Performs initial step of meanshift segmentation of an image. The function implements the filtering stage of meanshift segmentation, that is, the output of the function is the filtered &quot;posterized&quot; image with color gradients and fine-grain texture flattened. At every pixel (X,Y) of the input image (or down-sized input image, see below) the function executes meanshift iterations, that is, the pixel (X,Y) neighborhood in the joint space-color hyperspace is considered: \\f[(x,y): X- \\texttt{sp} \\le x \\le X+ \\texttt{sp} , Y- \\texttt{sp} \\le y \\le Y+ \\texttt{sp} , ||(R,G,B)-(r,g,b)|| \\le \\texttt{sr}\\f] where (R,G,B) and (r,g,b) are the vectors of color components at (X,Y) and (x,y), respectively (though, the algorithm does not depend on the color space used, so any 3-component color space can be used instead). Over the neighborhood the average spatial value (X',Y') and average color vector (R',G',B') are found and they act as the neighborhood center on the next iteration: \\f[(X,Y)~(X',Y'), (R,G,B)~(R',G',B').\\f] After the iterations over, the color components of the initial pixel (that is, the pixel from where the iterations started) are set to the final value (average color at the last iteration): \\f[I(X,Y) &lt;- (R*,G*,B*)\\f] When maxLevel &gt; 0, the gaussian pyramid of maxLevel+1 levels is built, and the above procedure is run on the smallest layer first. After that, the results are propagated to the larger layer and the iterations are run again only on those pixels where the layer colors differ by more than sr from the lower-resolution layer of the pyramid. That makes boundaries of color regions sharper. Note that the results will be actually different from the ones obtained by running the meanshift procedure on the whole original image (i.e. when maxLevel==0). src . dst . sp . sr . maxLevel . termcrit . dst : UMat maxLevel : int termcrit : TermCriteria Python prototype (for reference): pyrMeanShiftFiltering ( src , sp , sr [ , dst [ , maxLevel [ , termcrit ] ] ] ) -&gt; dst","ref":"OpenCV.html#pyrmeanshiftfiltering/4","title":"OpenCV.pyrmeanshiftfiltering/4","type":"function"},{"doc":"","ref":"OpenCV.html#pyrotationwarper_pyrotationwarper/0","title":"OpenCV.pyrotationwarper_pyrotationwarper/0","type":"function"},{"doc":"","ref":"OpenCV.html#pyrotationwarper_pyrotationwarper/2","title":"OpenCV.pyrotationwarper_pyrotationwarper/2","type":"function"},{"doc":"","ref":"OpenCV.html#pyrup/1","title":"OpenCV.pyrup/1","type":"function"},{"doc":"Upsamples an image and then blurs it. By default, size of the output image is computed as Size(src.cols\\*2, (src.rows\\*2) , but in any case, the following conditions should be satisfied: \\f[\\begin{array}{l} | \\texttt{dstsize.width} -src.cols*2| \\leq ( \\texttt{dstsize.width} \\mod 2) \\\\ | \\texttt{dstsize.height} -src.rows*2| \\leq ( \\texttt{dstsize.height} \\mod 2) \\end{array}\\f] The function performs the upsampling step of the Gaussian pyramid construction, though it can actually be used to construct the Laplacian pyramid. First, it upsamples the source image by injecting even zero rows and columns and then convolves the result with the same kernel as in pyrDown multiplied by 4. src . dst . dstsize . borderType . dst : UMat dstsize : Size borderType : int Python prototype (for reference): pyrUp ( src [ , dst [ , dstsize [ , borderType ] ] ] ) -&gt; dst","ref":"OpenCV.html#pyrup/2","title":"OpenCV.pyrup/2","type":"function"},{"doc":"","ref":"OpenCV.html#qrcodedetector_qrcodedetector/0","title":"OpenCV.qrcodedetector_qrcodedetector/0","type":"function"},{"doc":"","ref":"OpenCV.html#qrcodeencoder_create/0","title":"OpenCV.qrcodeencoder_create/0","type":"function"},{"doc":"Constructor parameters . parameters : QRCodeEncoder_Params Python prototype (for reference): QRCodeEncoder_create ( [ , parameters ] ) -&gt; retval","ref":"OpenCV.html#qrcodeencoder_create/1","title":"OpenCV.qrcodeencoder_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#qrcodeencoder_params_qrcodeencoder_params/0","title":"OpenCV.qrcodeencoder_params_qrcodeencoder_params/0","type":"function"},{"doc":"","ref":"OpenCV.html#randn/3","title":"OpenCV.randn/3","type":"function"},{"doc":"","ref":"OpenCV.html#randshuffle/1","title":"OpenCV.randshuffle/1","type":"function"},{"doc":"Shuffles the array elements randomly. The function cv::randShuffle shuffles the specified 1D array by randomly choosing pairs of elements and swapping them. The number of such swap operations will be dst.rows*dst.cols*iterFactor . dst . iterFactor . below). rng . instead. @sa RNG, sort iterFactor : double Python prototype (for reference): randShuffle ( dst [ , iterFactor ] ) -&gt; dst","ref":"OpenCV.html#randshuffle/2","title":"OpenCV.randshuffle/2","type":"function"},{"doc":"","ref":"OpenCV.html#randu/3","title":"OpenCV.randu/3","type":"function"},{"doc":"","ref":"OpenCV.html#readopticalflow/1","title":"OpenCV.readopticalflow/1","type":"function"},{"doc":"","ref":"OpenCV.html#recoverpose/3","title":"OpenCV.recoverpose/3","type":"function"},{"doc":"","ref":"OpenCV.html#recoverpose/4","title":"OpenCV.recoverpose/4","type":"function"},{"doc":"","ref":"OpenCV.html#recoverpose/5","title":"OpenCV.recoverpose/5","type":"function"},{"doc":"Has overloading in C++ e . points1 . floating-point (single or double precision). points2 . cameraMatrix . Note that this function assumes that points1 and points2 are feature points from cameras with the same camera intrinsic matrix. r . that performs a change of basis from the first camera's coordinate system to the second camera's coordinate system. Note that, in general, t can not be used for this tuple, see the parameter description below. t . therefore is only known up to scale, i.e. t is the direction of the translation vector and has unit length. distanceThresh . points). mask . inliers in points1 and points2 for then given essential matrix E. Only these inliers will be used to recover pose. In the output mask only inliers which pass the cheirality check. triangulatedPoints . This function differs from the one above that it outputs the triangulated 3D point that are used for the cheirality check. r : UMat t : UMat mask : UMat triangulatedPoints : UMat Python prototype (for reference): recoverPose ( E , points1 , points2 , cameraMatrix , distanceThresh [ , R [ , t [ , mask [ , triangulatedPoints ] ] ] ] ) -&gt; retval , R , t , mask , triangulatedPoints","ref":"OpenCV.html#recoverpose/6","title":"OpenCV.recoverpose/6","type":"function"},{"doc":"","ref":"OpenCV.html#rectangle/3","title":"OpenCV.rectangle/3","type":"function"},{"doc":"","ref":"OpenCV.html#rectangle/4","title":"OpenCV.rectangle/4","type":"function"},{"doc":"Draws a simple, thick, or filled up-right rectangle. The function cv::rectangle draws a rectangle outline or a filled rectangle whose two opposite corners are pt1 and pt2. img : Image. pt1 . pt2 . color . thickness . mean that the function has to draw a filled rectangle. lineType . shift . thickness : int lineType : int shift : int Python prototype (for reference): rectangle ( img , pt1 , pt2 , color [ , thickness [ , lineType [ , shift ] ] ] ) -&gt; img","ref":"OpenCV.html#rectangle/5","title":"OpenCV.rectangle/5","type":"function"},{"doc":"","ref":"OpenCV.html#rectify3collinear/16","title":"OpenCV.rectify3collinear/16","type":"function"},{"doc":"r1 : UMat r2 : UMat r3 : UMat p1 : UMat p2 : UMat p3 : UMat q : UMat Python prototype (for reference): rectify3Collinear ( cameraMatrix1 , distCoeffs1 , cameraMatrix2 , distCoeffs2 , cameraMatrix3 , distCoeffs3 , imgpt1 , imgpt3 , imageSize , R12 , T12 , R13 , T13 , alpha , newImgSize , flags [ , R1 [ , R2 [ , R3 [ , P1 [ , P2 [ , P3 [ , Q ] ] ] ] ] ] ] ) -&gt; retval , R1 , R2 , R3 , P1 , P2 , P3 , Q , roi1 , roi2","ref":"OpenCV.html#rectify3collinear/17","title":"OpenCV.rectify3collinear/17","type":"function"},{"doc":"","ref":"OpenCV.html#reduce/3","title":"OpenCV.reduce/3","type":"function"},{"doc":"Reduces a matrix to a vector. The function #reduce reduces the matrix to a vector by treating the matrix rows/columns as a set of 1D vectors and performing the specified operation on the vectors until a single row/column is obtained. For example, the function can be used to compute horizontal and vertical projections of a raster image. In case of #REDUCE_MAX and #REDUCE_MIN , the output image should have the same type as the source one. In case of #REDUCE_SUM and #REDUCE_AVG , the output may have a larger element bit-depth to preserve accuracy. And multi-channel arrays are also supported in these two reduction modes. The following code demonstrates its usage for a single channel matrix. @snippet snippets/core_reduce.cpp example And the following code demonstrates its usage for a two-channel matrix. @snippet snippets/core_reduce.cpp example2 src . dst . dim . a single row. 1 means that the matrix is reduced to a single column. rtype . dtype . otherwise, its type will be CV_MAKE_TYPE(CV_MAT_DEPTH(dtype), src.channels()). @sa repeat, reduceArgMin, reduceArgMax dst : UMat dtype : int Python prototype (for reference): reduce ( src , dim , rtype [ , dst [ , dtype ] ] ) -&gt; dst","ref":"OpenCV.html#reduce/4","title":"OpenCV.reduce/4","type":"function"},{"doc":"","ref":"OpenCV.html#reduceargmax/2","title":"OpenCV.reduceargmax/2","type":"function"},{"doc":"Finds indices of max elements along provided axis Note : - If input or output array is not continuous , this function will create an internal copy . - NaN handling is left unspecified , see patchNaNs ( ) . - The returned index is always in bounds of input matrix . src . dst . except for axis being reduced - it should be set to 1. lastIndex . axis . @sa reduceArgMin, minMaxLoc, min, max, compare, reduce dst : UMat lastIndex : bool Python prototype (for reference): reduceArgMax ( src , axis [ , dst [ , lastIndex ] ] ) -&gt; dst","ref":"OpenCV.html#reduceargmax/3","title":"OpenCV.reduceargmax/3","type":"function"},{"doc":"","ref":"OpenCV.html#reduceargmin/2","title":"OpenCV.reduceargmin/2","type":"function"},{"doc":"Finds indices of min elements along provided axis Note : - If input or output array is not continuous , this function will create an internal copy . - NaN handling is left unspecified , see patchNaNs ( ) . - The returned index is always in bounds of input matrix . src . dst . except for axis being reduced - it should be set to 1. lastIndex . axis . @sa reduceArgMax, minMaxLoc, min, max, compare, reduce dst : UMat lastIndex : bool Python prototype (for reference): reduceArgMin ( src , axis [ , dst [ , lastIndex ] ] ) -&gt; dst","ref":"OpenCV.html#reduceargmin/3","title":"OpenCV.reduceargmin/3","type":"function"},{"doc":"","ref":"OpenCV.html#remap/4","title":"OpenCV.remap/4","type":"function"},{"doc":"Applies a generic geometrical transformation to an image. The function remap transforms the source image using the specified map: \\f[\\texttt{dst} (x,y) = \\texttt{src} (map_x(x,y),map_y(x,y))\\f] where values of pixels with non-integer coordinates are computed using one of available interpolation methods. \\f$map_x\\f$ and \\f$map_y\\f$ can be encoded as separate floating-point maps in \\f$map_1\\f$ and \\f$map_2\\f$ respectively, or interleaved floating-point maps of \\f$(x,y)\\f$ in \\f$map_1\\f$, or fixed-point maps created by using convertMaps. The reason you might want to convert from floating to fixed-point representations of a map is that they can yield much faster (\\~2x) remapping operations. In the converted case, \\f$map_1\\f$ contains pairs (cvFloor(x), cvFloor(y)) and \\f$map_2\\f$ contains indices in a table of interpolation coefficients. This function cannot operate in-place. src . dst . map1 . CV_32FC1, or CV_32FC2. See convertMaps for details on converting a floating point representation to fixed-point for speed. map2 . if map1 is (x,y) points), respectively. interpolation . and #INTER_LINEAR_EXACT are not supported by this function. borderMode . borderMode=#BORDER_TRANSPARENT, it means that the pixels in the destination image that corresponds to the &quot;outliers&quot; in the source image are not modified by the function. borderValue . Note : Due to current implementation limitations the size of an input and output images should be less than 32767x32767. dst : UMat borderMode : int borderValue : Scalar Python prototype (for reference): remap ( src , map1 , map2 , interpolation [ , dst [ , borderMode [ , borderValue ] ] ] ) -&gt; dst","ref":"OpenCV.html#remap/5","title":"OpenCV.remap/5","type":"function"},{"doc":"","ref":"OpenCV.html#repeat/3","title":"OpenCV.repeat/3","type":"function"},{"doc":"Fills the output array with repeated copies of the input array. The function cv::repeat duplicates the input array one or more times along each of the two axes: \\f[\\texttt{dst} _{ij}= \\texttt{src} _{i\\mod src.rows, \\; j\\mod src.cols }\\f] The second variant of the function is more convenient to use with @ref MatrixExpressions. src . ny . vertical axis. nx . horizontal axis. dst . @sa cv::reduce dst : UMat Python prototype (for reference): repeat ( src , ny , nx [ , dst ] ) -&gt; dst","ref":"OpenCV.html#repeat/4","title":"OpenCV.repeat/4","type":"function"},{"doc":"","ref":"OpenCV.html#reprojectimageto3d/2","title":"OpenCV.reprojectimageto3d/2","type":"function"},{"doc":"Reprojects a disparity image to 3D space. disparity . floating-point disparity image. The values of 8-bit / 16-bit signed formats are assumed to have no fractional bits. If the disparity is 16-bit signed format, as computed by @ref StereoBM or @ref StereoSGBM and maybe other algorithms, it should be divided by 16 (and scaled to float) before being used here. 3dImage . _3dImage(x,y) contains 3D coordinates of the point (x,y) computed from the disparity map. If one uses Q obtained by @ref stereoRectify, then the returned points are represented in the first camera's rectified coordinate system. q . @ref stereoRectify. handleMissingValues . points where the disparity was not computed). If handleMissingValues=true, then pixels with the minimal disparity that corresponds to the outliers (see StereoMatcher::compute ) are transformed to 3D points with a very large Z value (currently set to 10000). ddepth . depth. ddepth can also be set to CV_16S, CV_32S or CV_32F. The function transforms a single-channel disparity map to a 3-channel image representing a 3D surface. That is, for each pixel (x,y) and the corresponding disparity d=disparity(x,y) , it computes: \\f[\\begin{bmatrix} X \\\\ Y \\\\ Z \\\\ W \\end{bmatrix} = Q \\begin{bmatrix} x \\\\ y \\\\ \\texttt{disparity} (x,y) \\\\ z \\end{bmatrix}.\\f] @sa To reproject a sparse set of points {(x,y,d),...} to 3D space, use perspectiveTransform. 3dImage : UMat handleMissingValues : bool ddepth : int Python prototype (for reference): reprojectImageTo3D ( disparity , Q [ , _3dImage [ , handleMissingValues [ , ddepth ] ] ] ) -&gt; _3dImage","ref":"OpenCV.html#reprojectimageto3d/3","title":"OpenCV.reprojectimageto3d/3","type":"function"},{"doc":"","ref":"OpenCV.html#resize/2","title":"OpenCV.resize/2","type":"function"},{"doc":"Resizes an image. The function resize resizes the image src down to or up to the specified size. Note that the initial dst type or size are not taken into account. Instead, the size and type are derived from the src , dsize , fx , and fy . If you want to resize src so that it fits the pre-created dst, you may call the function as follows: // explicitly specify dsize = dst . size ( ) ; fx and fy will be computed from that . resize ( src , dst , dst . size ( ) , 0 , 0 , interpolation ) ; If you want to decimate the image by factor of 2 in each direction, you can call the function this way: // specify fx and fy and let the function compute the destination image size . resize ( src , dst , Size ( ) , 0.5 , 0.5 , interpolation ) ; To shrink an image, it will generally look best with #INTER_AREA interpolation, whereas to enlarge an image, it will generally look best with c#INTER_CUBIC (slow) or #INTER_LINEAR (faster but still looks OK). src . dst . src.size(), fx, and fy; the type of dst is the same as of src. dsize . \\f[\\texttt{dsize = Size(round(fx*src.cols), round(fy*src.rows))}\\f] Either dsize or both fx and fy must be non-zero. fx . \\f[\\texttt{(double)dsize.width/src.cols}\\f] fy . \\f[\\texttt{(double)dsize.height/src.rows}\\f] interpolation . @sa warpAffine, warpPerspective, remap dst : UMat fx : double fy : double interpolation : int Python prototype (for reference): resize ( src , dsize [ , dst [ , fx [ , fy [ , interpolation ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#resize/3","title":"OpenCV.resize/3","type":"function"},{"doc":"","ref":"OpenCV.html#resizewindow/2","title":"OpenCV.resizewindow/2","type":"function"},{"doc":"","ref":"OpenCV.html#resizewindow/3","title":"OpenCV.resizewindow/3","type":"function"},{"doc":"","ref":"OpenCV.html#rodrigues/1","title":"OpenCV.rodrigues/1","type":"function"},{"doc":"Converts a rotation matrix to a rotation vector or vice versa. src . dst . jacobian . derivatives of the output array components with respect to the input array components. \\f[\\begin{array}{l} \\theta \\leftarrow norm(r) \\\\ r \\leftarrow r/ \\theta \\\\ R = \\cos(\\theta) I + (1- \\cos{\\theta} ) r r^T + \\sin(\\theta) \\vecthreethree{0}{-r_z}{r_y}{r_z}{0}{-r_x}{-r_y}{r_x}{0} \\end{array}\\f] Inverse transformation can be also done easily, since \\f[\\sin ( \\theta ) \\vecthreethree{0}{-r_z}{r_y}{r_z}{0}{-r_x}{-r_y}{r_x}{0} = \\frac{R - R^T}{2}\\f] A rotation vector is a convenient and most compact representation of a rotation matrix (since any rotation matrix has just 3 degrees of freedom). The representation is used in the global 3D geometry optimization procedures like @ref calibrateCamera, @ref stereoCalibrate, or @ref solvePnP . Note : More information about the computation of the derivative of a 3D rotation matrix with respect to its exponential coordinate can be found in: A Compact Formula for the Derivative of a 3-D Rotation in Exponential Coordinates, Guillermo Gallego, Anthony J. Yezzi @cite Gallego2014ACF Note : Useful information on SE(3) and Lie Groups can be found in: A tutorial on SE(3) transformation parameterizations and on-manifold optimization, Jose-Luis Blanco @cite blanco2010tutorial Lie Groups for 2D and 3D Transformation, Ethan Eade @cite Eade17 A micro Lie theory for state estimation in robotics, Joan Solà, Jérémie Deray, Dinesh Atchuthan @cite Sol2018AML dst : UMat jacobian : UMat Python prototype (for reference): Rodrigues ( src [ , dst [ , jacobian ] ] ) -&gt; dst , jacobian","ref":"OpenCV.html#rodrigues/2","title":"OpenCV.rodrigues/2","type":"function"},{"doc":"","ref":"OpenCV.html#rotate/2","title":"OpenCV.rotate/2","type":"function"},{"doc":"Rotates a 2D array in multiples of 90 degrees. The function cv::rotate rotates the array in one of three different ways: Rotate by 90 degrees clockwise ( rotateCode = ROTATE_90_CLOCKWISE ) . Rotate by 180 degrees clockwise ( rotateCode = ROTATE_180 ) . Rotate by 270 degrees clockwise ( rotateCode = ROTATE_90_COUNTERCLOCKWISE ) . src . dst . and the rows and cols are switched for ROTATE_90_CLOCKWISE and ROTATE_90_COUNTERCLOCKWISE. rotateCode . @sa transpose , repeat , completeSymm, flip, RotateFlags dst : UMat Python prototype (for reference): rotate ( src , rotateCode [ , dst ] ) -&gt; dst","ref":"OpenCV.html#rotate/3","title":"OpenCV.rotate/3","type":"function"},{"doc":"","ref":"OpenCV.html#rotatedrectangleintersection/2","title":"OpenCV.rotatedrectangleintersection/2","type":"function"},{"doc":"Finds out if there is any intersection between two rotated rectangles. If there is then the vertices of the intersecting region are returned as well. Below are some examples of intersection configurations. The hatched pattern indicates the intersecting region and the red vertices are returned by the function. rect1 . rect2 . intersectingRegion . at most 8 vertices. Stored as std::vector\\&lt;cv::Point2f&gt; or cv::Mat as Mx1 of type CV_32FC2. @returns One of #RectanglesIntersectTypes intersectingRegion : UMat Python prototype (for reference): rotatedRectangleIntersection ( rect1 , rect2 [ , intersectingRegion ] ) -&gt; retval , intersectingRegion","ref":"OpenCV.html#rotatedrectangleintersection/3","title":"OpenCV.rotatedrectangleintersection/3","type":"function"},{"doc":"","ref":"OpenCV.html#rqdecomp3x3/1","title":"OpenCV.rqdecomp3x3/1","type":"function"},{"doc":"Computes an RQ decomposition of 3x3 matrices. src . mtxR . mtxQ . qx . qy . qz . The function computes a RQ decomposition using the given rotations. This function is used in #decomposeProjectionMatrix to decompose the left 3x3 submatrix of a projection matrix into a camera and a rotation matrix. It optionally returns three rotation matrices, one for each axis, and the three Euler angles in degrees (as the return value) that could be used in OpenGL. Note, there is always more than one sequence of rotations about the three principal axes that results in the same orientation of an object, e.g. see @cite Slabaugh . Returned tree rotation matrices and corresponding three Euler angles are only one of the possible solutions. mtxR : UMat mtxQ : UMat qx : UMat qy : UMat qz : UMat Python prototype (for reference): RQDecomp3x3 ( src [ , mtxR [ , mtxQ [ , Qx [ , Qy [ , Qz ] ] ] ] ] ) -&gt; retval , mtxR , mtxQ , Qx , Qy , Qz","ref":"OpenCV.html#rqdecomp3x3/2","title":"OpenCV.rqdecomp3x3/2","type":"function"},{"doc":"","ref":"OpenCV.html#samples_addsamplesdatasearchpath/1","title":"OpenCV.samples_addsamplesdatasearchpath/1","type":"function"},{"doc":"","ref":"OpenCV.html#samples_addsamplesdatasearchsubdirectory/1","title":"OpenCV.samples_addsamplesdatasearchsubdirectory/1","type":"function"},{"doc":"","ref":"OpenCV.html#samples_findfile/1","title":"OpenCV.samples_findfile/1","type":"function"},{"doc":"Try to find requested data file Search directories: Directories passed via addSamplesDataSearchPath() OPENCV_SAMPLES_DATA_PATH_HINT environment variable OPENCV_SAMPLES_DATA_PATH environment variable If parameter value is not empty and nothing is found then stop searching. Detects build/install path based on: a. current working directory (CWD) b. and/or binary module location (opencv_core/opencv_world, doesn't work with static linkage) Scan &lt;source&gt;/{,data,samples/data} directories if build directory is detected or the current directory is in source tree. Scan &lt;install&gt;/share/OpenCV directory if install directory is detected. @see cv::utils::findDataFile relative_path . required . If true, function prints information message and raises cv::Exception. If false, function returns empty result silentMode . @return Returns path (absolute or relative to the current directory) or empty string if file is not found required : bool silentMode : bool Python prototype (for reference): findFile ( relative_path [ , required [ , silentMode ] ] ) -&gt; retval","ref":"OpenCV.html#samples_findfile/2","title":"OpenCV.samples_findfile/2","type":"function"},{"doc":"","ref":"OpenCV.html#samples_findfileorkeep/1","title":"OpenCV.samples_findfileorkeep/1","type":"function"},{"doc":"silentMode : bool Python prototype (for reference): findFileOrKeep ( relative_path [ , silentMode ] ) -&gt; retval","ref":"OpenCV.html#samples_findfileorkeep/2","title":"OpenCV.samples_findfileorkeep/2","type":"function"},{"doc":"","ref":"OpenCV.html#sampsondistance/3","title":"OpenCV.sampsondistance/3","type":"function"},{"doc":"","ref":"OpenCV.html#scaleadd/3","title":"OpenCV.scaleadd/3","type":"function"},{"doc":"Calculates the sum of a scaled array and another array. The function scaleAdd is one of the classical primitive linear algebra operations, known as DAXPY or SAXPY in BLAS . It calculates the sum of a scaled array and another array: \\f[\\texttt{dst} (I)= \\texttt{scale} \\cdot \\texttt{src1} (I) + \\texttt{src2} (I)\\f] The function can also be emulated with a matrix expression, for example: Mat A(3, 3, CV_64F); ... A.row(0) = A.row(1)*2 + A.row(2); src1 . alpha . src2 . dst . @sa add, addWeighted, subtract, Mat::dot, Mat::convertTo dst : UMat Python prototype (for reference): scaleAdd ( src1 , alpha , src2 [ , dst ] ) -&gt; dst","ref":"OpenCV.html#scaleadd/4","title":"OpenCV.scaleadd/4","type":"function"},{"doc":"","ref":"OpenCV.html#scharr/4","title":"OpenCV.scharr/4","type":"function"},{"doc":"Calculates the first x- or y- image derivative using Scharr operator. The function computes the first x- or y- spatial image derivative using the Scharr operator. The call \\f[\\texttt{Scharr(src, dst, ddepth, dx, dy, scale, delta, borderType)}\\f] is equivalent to \\f[\\texttt{Sobel(src, dst, ddepth, dx, dy, FILTER_SCHARR, scale, delta, borderType)} .\\f] src . dst . ddepth . dx . dy . scale . applied (see #getDerivKernels for details). delta . borderType . @sa cartToPolar dst : UMat scale : double delta : double borderType : int Python prototype (for reference): Scharr ( src , ddepth , dx , dy [ , dst [ , scale [ , delta [ , borderType ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#scharr/5","title":"OpenCV.scharr/5","type":"function"},{"doc":"","ref":"OpenCV.html#seamlessclone/5","title":"OpenCV.seamlessclone/5","type":"function"},{"doc":"Image editing tasks concern either global changes (color/intensity corrections, filters, deformations) or local changes concerned to a selection. Here we are interested in achieving local changes, ones that are restricted to a region manually selected (ROI), in a seamless and effortless manner. The extent of the changes ranges from slight distortions to complete replacement by novel content @cite PM03 . src . dst . mask . p . blend . flags . blend : UMat Python prototype (for reference): seamlessClone ( src , dst , mask , p , flags [ , blend ] ) -&gt; blend","ref":"OpenCV.html#seamlessclone/6","title":"OpenCV.seamlessclone/6","type":"function"},{"doc":"","ref":"OpenCV.html#segmentation_segmentation_intelligentscissorsmb_intelligentscissorsmb/0","title":"OpenCV.segmentation_segmentation_intelligentscissorsmb_intelligentscissorsmb/0","type":"function"},{"doc":"","ref":"OpenCV.html#selectroi/1","title":"OpenCV.selectroi/1","type":"function"},{"doc":"","ref":"OpenCV.html#selectroi/2","title":"OpenCV.selectroi/2","type":"function"},{"doc":"Allows users to select a ROI on the given image. The function creates a window and allows users to select a ROI using the mouse. Controls: use space or enter to finish selection, use key c to cancel selection (function will return the zero cv::Rect). windowName . img . showCrosshair . fromCenter . selection rectangle will correspont to the initial mouse position. @return selected ROI or empty rect if selection canceled. Note : The function sets it's own mouse callback for specified window using cv::setMouseCallback(windowName, ...). After finish of work an empty callback will be set for the used window. showCrosshair : bool fromCenter : bool Python prototype (for reference): selectROI ( windowName , img [ , showCrosshair [ , fromCenter ] ] ) -&gt; retval","ref":"OpenCV.html#selectroi/3","title":"OpenCV.selectroi/3","type":"function"},{"doc":"","ref":"OpenCV.html#selectrois/2","title":"OpenCV.selectrois/2","type":"function"},{"doc":"Allows users to select multiple ROIs on the given image. The function creates a window and allows users to select multiple ROIs using the mouse. Controls: use space or enter to finish current selection and start a new one, use esc to terminate multiple ROI selection process. windowName . img . boundingBoxes . showCrosshair . fromCenter . selection rectangle will correspont to the initial mouse position. Note : The function sets it's own mouse callback for specified window using cv::setMouseCallback(windowName, ...). After finish of work an empty callback will be set for the used window. showCrosshair : bool fromCenter : bool Python prototype (for reference): selectROIs ( windowName , img [ , showCrosshair [ , fromCenter ] ] ) -&gt; boundingBoxes","ref":"OpenCV.html#selectrois/3","title":"OpenCV.selectrois/3","type":"function"},{"doc":"","ref":"OpenCV.html#sepfilter2d/4","title":"OpenCV.sepfilter2d/4","type":"function"},{"doc":"Applies a separable linear filter to an image. The function applies a separable linear filter to the image. That is, first, every row of src is filtered with the 1D kernel kernelX. Then, every column of the result is filtered with the 1D kernel kernelY. The final result shifted by delta is stored in dst . src . dst . ddepth . kernelX . kernelY . anchor . is at the kernel center. delta . borderType . @sa filter2D, Sobel, GaussianBlur, boxFilter, blur dst : UMat anchor : Point delta : double borderType : int Python prototype (for reference): sepFilter2D ( src , ddepth , kernelX , kernelY [ , dst [ , anchor [ , delta [ , borderType ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#sepfilter2d/5","title":"OpenCV.sepfilter2d/5","type":"function"},{"doc":"","ref":"OpenCV.html#setidentity/1","title":"OpenCV.setidentity/1","type":"function"},{"doc":"Initializes a scaled identity matrix. The function cv::setIdentity initializes a scaled identity matrix: \\f[\\texttt{mtx} (i,j)= \\fork{\\texttt{value}}{ if (i=j)}{0}{otherwise}\\f] The function can also be emulated using the matrix initializers and the matrix expressions: Mat A = Mat :: eye ( 4 , 3 , CV_32F ) * 5 ; // A will be set to [ [ 5 , 0 , 0 ] , [ 0 , 5 , 0 ] , [ 0 , 0 , 5 ] , [ 0 , 0 , 0 ] ] mtx . s . @sa Mat::zeros, Mat::ones, Mat::setTo, Mat::operator= s : Scalar Python prototype (for reference): setIdentity ( mtx [ , s ] ) -&gt; mtx","ref":"OpenCV.html#setidentity/2","title":"OpenCV.setidentity/2","type":"function"},{"doc":"","ref":"OpenCV.html#setloglevel/1","title":"OpenCV.setloglevel/1","type":"function"},{"doc":"","ref":"OpenCV.html#setnumthreads/1","title":"OpenCV.setnumthreads/1","type":"function"},{"doc":"","ref":"OpenCV.html#setrngseed/1","title":"OpenCV.setrngseed/1","type":"function"},{"doc":"","ref":"OpenCV.html#settrackbarmax/3","title":"OpenCV.settrackbarmax/3","type":"function"},{"doc":"","ref":"OpenCV.html#settrackbarmin/3","title":"OpenCV.settrackbarmin/3","type":"function"},{"doc":"","ref":"OpenCV.html#settrackbarpos/3","title":"OpenCV.settrackbarpos/3","type":"function"},{"doc":"","ref":"OpenCV.html#setuseopenvx/1","title":"OpenCV.setuseopenvx/1","type":"function"},{"doc":"","ref":"OpenCV.html#setuseoptimized/1","title":"OpenCV.setuseoptimized/1","type":"function"},{"doc":"","ref":"OpenCV.html#setwindowproperty/3","title":"OpenCV.setwindowproperty/3","type":"function"},{"doc":"","ref":"OpenCV.html#setwindowtitle/2","title":"OpenCV.setwindowtitle/2","type":"function"},{"doc":"","ref":"OpenCV.html#sift_create/0","title":"OpenCV.sift_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#sift_create/1","title":"OpenCV.sift_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#sift_create/6","title":"OpenCV.sift_create/6","type":"function"},{"doc":"","ref":"OpenCV.html#simpleblobdetector_create/0","title":"OpenCV.simpleblobdetector_create/0","type":"function"},{"doc":"parameters : SimpleBlobDetector_Params Python prototype (for reference): SimpleBlobDetector_create ( [ , parameters ] ) -&gt; retval","ref":"OpenCV.html#simpleblobdetector_create/1","title":"OpenCV.simpleblobdetector_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#simpleblobdetector_params_simpleblobdetector_params/0","title":"OpenCV.simpleblobdetector_params_simpleblobdetector_params/0","type":"function"},{"doc":"","ref":"OpenCV.html#sobel/4","title":"OpenCV.sobel/4","type":"function"},{"doc":"Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator. In all cases except one, the \\f$\\texttt{ksize} \\times \\texttt{ksize}\\f$ separable kernel is used to calculate the derivative. When \\f$\\texttt{ksize = 1}\\f$, the \\f$3 \\times 1\\f$ or \\f$1 \\times 3\\f$ kernel is used (that is, no Gaussian smoothing is done). ksize = 1 can only be used for the first or the second x- or y- derivatives. There is also the special value ksize = #FILTER_SCHARR (-1) that corresponds to the \\f$3\\times3\\f$ Scharr filter that may give more accurate results than the \\f$3\\times3\\f$ Sobel. The Scharr aperture is \\f[\\vecthreethree{-3}{0}{3}{-10}{0}{10}{-3}{0}{3}\\f] for the x-derivative, or transposed for the y-derivative. The function calculates an image derivative by convolving the image with the appropriate kernel: \\f[\\texttt{dst} = \\frac{\\partial^{xorder+yorder} \\texttt{src}}{\\partial x^{xorder} \\partial y^{yorder}}\\f] The Sobel operators combine Gaussian smoothing and differentiation, so the result is more or less resistant to the noise. Most often, the function is called with ( xorder = 1, yorder = 0, ksize = 3) or ( xorder = 0, yorder = 1, ksize = 3) to calculate the first x- or y- image derivative. The first case corresponds to a kernel of: \\f[\\vecthreethree{-1}{0}{1}{-2}{0}{2}{-1}{0}{1}\\f] The second case corresponds to a kernel of: \\f[\\vecthreethree{-1}{-2}{-1}{0}{0}{0}{1}{2}{1}\\f] src . dst . ddepth . 8-bit input images it will result in truncated derivatives. dx . dy . ksize . scale . applied (see #getDerivKernels for details). delta . borderType . @sa Scharr, Laplacian, sepFilter2D, filter2D, GaussianBlur, cartToPolar dst : UMat ksize : int scale : double delta : double borderType : int Python prototype (for reference): Sobel ( src , ddepth , dx , dy [ , dst [ , ksize [ , scale [ , delta [ , borderType ] ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#sobel/5","title":"OpenCV.sobel/5","type":"function"},{"doc":"","ref":"OpenCV.html#solve/2","title":"OpenCV.solve/2","type":"function"},{"doc":"Solves one or more linear systems or least-squares problems. The function cv::solve solves a linear system or least-squares problem (the latter is possible with SVD or QR methods, or by specifying the flag #DECOMP_NORMAL ): \\f[\\texttt{dst} = \\arg \\min _X \\| \\texttt{src1} \\cdot \\texttt{X} - \\texttt{src2} \\|\\f] If #DECOMP_LU or #DECOMP_CHOLESKY method is used, the function returns 1 if src1 (or \\f$\\texttt{src1}^T\\texttt{src1}\\f$ ) is non-singular. Otherwise, it returns 0. In the latter case, dst is not valid. Other methods find a pseudo-solution in case of a singular left-hand side part. Note : If you want to find a unity-norm solution of an under-defined singular system \\f$\\texttt{src1}\\cdot\\texttt{dst}=0\\f$ , the function solve will not do the work. Use SVD::solveZ instead. src1 . src2 . dst . flags . @sa invert, SVD, eigen dst : UMat flags : int Python prototype (for reference): solve ( src1 , src2 [ , dst [ , flags ] ] ) -&gt; retval , dst","ref":"OpenCV.html#solve/3","title":"OpenCV.solve/3","type":"function"},{"doc":"","ref":"OpenCV.html#solvecubic/1","title":"OpenCV.solvecubic/1","type":"function"},{"doc":"Finds the real roots of a cubic equation. The function solveCubic finds the real roots of a cubic equation: if coeffs is a 4-element vector: \\f[\\texttt{coeffs} [0] x^3 + \\texttt{coeffs} [1] x^2 + \\texttt{coeffs} [2] x + \\texttt{coeffs} [3] = 0\\f] if coeffs is a 3-element vector: \\f[x^3 + \\texttt{coeffs} [0] x^2 + \\texttt{coeffs} [1] x + \\texttt{coeffs} [2] = 0\\f] The roots are stored in the roots array. coeffs . roots . @return number of real roots. It can be 0, 1 or 2. roots : UMat Python prototype (for reference): solveCubic ( coeffs [ , roots ] ) -&gt; retval , roots","ref":"OpenCV.html#solvecubic/2","title":"OpenCV.solvecubic/2","type":"function"},{"doc":"","ref":"OpenCV.html#solvelp/2","title":"OpenCV.solvelp/2","type":"function"},{"doc":"Solve given (non-integer) linear programming problem using the Simplex Algorithm (Simplex Method). What we mean here by &quot;linear programming problem&quot; (or LP problem, for short) can be formulated as: \\f[\\mbox{Maximize } c\\cdot x\\\\ \\mbox{Subject to:}\\\\ Ax\\leq b\\\\ x\\geq 0\\f] Where \\f$c\\f$ is fixed 1 -by- n row-vector, \\f$A\\f$ is fixed m -by- n matrix, \\f$b\\f$ is fixed m -by- 1 column vector and \\f$x\\f$ is an arbitrary n -by- 1 column vector, which satisfies the constraints. Simplex algorithm is one of many algorithms that are designed to handle this sort of problems efficiently. Although it is not optimal in theoretical sense (there exist algorithms that can solve any problem written as above in polynomial time, while simplex method degenerates to exponential time for some special cases), it is well-studied, easy to implement and is shown to work well for real-life purposes. The particular implementation is taken almost verbatim from Introduction to Algorithms, third edition by T. H. Cormen, C. E. Leiserson, R. L. Rivest and Clifford Stein. In particular, the Bland's rule http://en.wikipedia.org/wiki/Bland%27s_rule is used to prevent cycling. func . contain 32- or 64-bit floating point numbers. As a convenience, column-vector may be also submitted, in the latter case it is understood to correspond to \\f$c^T\\f$. constr . and the remaining to \\f$A\\f$. It should contain 32- or 64-bit floating point numbers. z . formulation above. It will contain 64-bit floating point numbers. @return One of cv::SolveLPResult z : UMat Python prototype (for reference): solveLP ( Func , Constr [ , z ] ) -&gt; retval , z","ref":"OpenCV.html#solvelp/3","title":"OpenCV.solvelp/3","type":"function"},{"doc":"","ref":"OpenCV.html#solvep3p/5","title":"OpenCV.solvep3p/5","type":"function"},{"doc":"Finds an object pose from 3 3D-2D point correspondences. @see @ref calib3d_solvePnP objectPoints . 1x3/3x1 3-channel. vector\\&lt;Point3f&gt; can be also passed here. imagePoints . vector\\&lt;Point2f&gt; can be also passed here. cameraMatrix . distCoeffs . \\f$\\distcoeffs\\f$. If the vector is NULL/empty, the zero distortion coefficients are assumed. rvecs . the model coordinate system to the camera coordinate system. A P3P problem has up to 4 solutions. tvecs . flags . @ref SOLVEPNP_P3P Method is based on the paper of X.S. Gao, X.-R. Hou, J. Tang, H.-F. Chang &quot;Complete Solution Classification for the Perspective-Three-Point Problem&quot; (@cite gao2003complete). @ref SOLVEPNP_AP3P Method is based on the paper of T. Ke and S. Roumeliotis. &quot;An Efficient Algebraic Solution to the Perspective-Three-Point Problem&quot; (@cite Ke17). The function estimates the object pose given 3 object points, their corresponding image projections, as well as the camera intrinsic matrix and the distortion coefficients. Note : The solutions are sorted by reprojection errors (lowest to highest). rvecs : vector_UMat tvecs : vector_UMat Python prototype (for reference): solveP3P ( objectPoints , imagePoints , cameraMatrix , distCoeffs , flags [ , rvecs [ , tvecs ] ] ) -&gt; retval , rvecs , tvecs","ref":"OpenCV.html#solvep3p/6","title":"OpenCV.solvep3p/6","type":"function"},{"doc":"","ref":"OpenCV.html#solvepnp/4","title":"OpenCV.solvepnp/4","type":"function"},{"doc":"Finds an object pose from 3D-2D point correspondences. @see @ref calib3d_solvePnP This function returns the rotation and the translation vectors that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame, using different methods: P3P methods (@ref SOLVEPNP_P3P, @ref SOLVEPNP_AP3P): need 4 input points to return a unique solution. @ref SOLVEPNP_IPPE Input points must be &gt;= 4 and object points must be coplanar. @ref SOLVEPNP_IPPE_SQUARE Special case suitable for marker pose estimation. Number of input points must be 4. Object points must be defined in the following order: point 0: [-squareLength / 2, squareLength / 2, 0] point 1: [ squareLength / 2, squareLength / 2, 0] point 2: [ squareLength / 2, -squareLength / 2, 0] point 3: [-squareLength / 2, -squareLength / 2, 0] for all the other flags, number of input points must be &gt;= 4 and object points can be in any configuration. objectPoints . 1xN/Nx1 3-channel, where N is the number of points. vector\\&lt;Point3d&gt; can be also passed here. imagePoints . where N is the number of points. vector\\&lt;Point2d&gt; can be also passed here. cameraMatrix . distCoeffs . \\f$\\distcoeffs\\f$. If the vector is NULL/empty, the zero distortion coefficients are assumed. rvec . the model coordinate system to the camera coordinate system. tvec . useExtrinsicGuess . the provided rvec and tvec values as initial approximations of the rotation and translation vectors, respectively, and further optimizes them. flags . More information about Perspective-n-Points is described in @ref calib3d_solvePnP Note : An example of how to use solvePnP for planar augmented reality can be found at opencv_source_code/samples/python/plane_ar.py If you are using Python: Numpy array slices won't work as input because solvePnP requires contiguous arrays (enforced by the assertion using cv::Mat::checkVector() around line 55 of modules/calib3d/src/solvepnp.cpp version 2.4.9) The P3P algorithm requires image points to be in an array of shape (N,1,2) due to its calling of #undistortPoints (around line 75 of modules/calib3d/src/solvepnp.cpp version 2.4.9) which requires 2-channel information. Thus, given some data D = np.array(...) where D.shape = (N,M), in order to use a subset of it as, e.g., imagePoints, one must effectively copy it into a new array: imagePoints = np.ascontiguousarray(D[:,:2]).reshape((N,1,2)) The methods @ref SOLVEPNP_DLS and @ref SOLVEPNP_UPNP cannot be used as the current implementations are unstable and sometimes give completely wrong results. If you pass one of these two flags, @ref SOLVEPNP_EPNP method will be used instead. The minimum number of points is 4 in the general case. In the case of @ref SOLVEPNP_P3P and @ref SOLVEPNP_AP3P methods, it is required to use exactly 4 points (the first 3 points are used to estimate all the solutions of the P3P problem, the last one is used to retain the best solution that minimizes the reprojection error). With @ref SOLVEPNP_ITERATIVE method and useExtrinsicGuess=true , the minimum number of points is 3 (3 points are sufficient to compute a pose but there are up to 4 solutions). The initial solution should be close to the global solution to converge. With @ref SOLVEPNP_IPPE input points must be &gt;= 4 and object points must be coplanar. With @ref SOLVEPNP_IPPE_SQUARE this is a special case suitable for marker pose estimation. Number of input points must be 4. Object points must be defined in the following order: point 0: [-squareLength / 2, squareLength / 2, 0] point 1: [ squareLength / 2, squareLength / 2, 0] point 2: [ squareLength / 2, -squareLength / 2, 0] point 3: [-squareLength / 2, -squareLength / 2, 0] With @ref SOLVEPNP_SQPNP input points must be &gt;= 3 rvec : UMat tvec : UMat useExtrinsicGuess : bool flags : int Python prototype (for reference): solvePnP ( objectPoints , imagePoints , cameraMatrix , distCoeffs [ , rvec [ , tvec [ , useExtrinsicGuess [ , flags ] ] ] ] ) -&gt; retval , rvec , tvec","ref":"OpenCV.html#solvepnp/5","title":"OpenCV.solvepnp/5","type":"function"},{"doc":"","ref":"OpenCV.html#solvepnpgeneric/4","title":"OpenCV.solvepnpgeneric/4","type":"function"},{"doc":"Finds an object pose from 3D-2D point correspondences. @see @ref calib3d_solvePnP This function returns a list of all the possible solutions (a solution is a &lt;rotation vector, translation vector&gt; couple), depending on the number of input points and the chosen method: P3P methods (@ref SOLVEPNP_P3P, @ref SOLVEPNP_AP3P): 3 or 4 input points. Number of returned solutions can be between 0 and 4 with 3 input points. @ref SOLVEPNP_IPPE Input points must be &gt;= 4 and object points must be coplanar. Returns 2 solutions. @ref SOLVEPNP_IPPE_SQUARE Special case suitable for marker pose estimation. Number of input points must be 4 and 2 solutions are returned. Object points must be defined in the following order: point 0: [-squareLength / 2, squareLength / 2, 0] point 1: [ squareLength / 2, squareLength / 2, 0] point 2: [ squareLength / 2, -squareLength / 2, 0] point 3: [-squareLength / 2, -squareLength / 2, 0] for all the other flags, number of input points must be &gt;= 4 and object points can be in any configuration. Only 1 solution is returned. objectPoints . 1xN/Nx1 3-channel, where N is the number of points. vector\\&lt;Point3d&gt; can be also passed here. imagePoints . where N is the number of points. vector\\&lt;Point2d&gt; can be also passed here. cameraMatrix . distCoeffs . \\f$\\distcoeffs\\f$. If the vector is NULL/empty, the zero distortion coefficients are assumed. rvecs . the model coordinate system to the camera coordinate system. tvecs . useExtrinsicGuess . the provided rvec and tvec values as initial approximations of the rotation and translation vectors, respectively, and further optimizes them. flags . rvec . and useExtrinsicGuess is set to true. tvec . and useExtrinsicGuess is set to true. reprojectionError . (\\f$ \\text{RMSE} = \\sqrt{\\frac{\\sum_{i}^{N} \\left ( \\hat{y_i} - y_i \\right )^2}{N}} \\f$) between the input image points and the 3D object points projected with the estimated pose. More information is described in @ref calib3d_solvePnP Note : An example of how to use solvePnP for planar augmented reality can be found at opencv_source_code/samples/python/plane_ar.py If you are using Python: Numpy array slices won't work as input because solvePnP requires contiguous arrays (enforced by the assertion using cv::Mat::checkVector() around line 55 of modules/calib3d/src/solvepnp.cpp version 2.4.9) The P3P algorithm requires image points to be in an array of shape (N,1,2) due to its calling of #undistortPoints (around line 75 of modules/calib3d/src/solvepnp.cpp version 2.4.9) which requires 2-channel information. Thus, given some data D = np.array(...) where D.shape = (N,M), in order to use a subset of it as, e.g., imagePoints, one must effectively copy it into a new array: imagePoints = np.ascontiguousarray(D[:,:2]).reshape((N,1,2)) The methods @ref SOLVEPNP_DLS and @ref SOLVEPNP_UPNP cannot be used as the current implementations are unstable and sometimes give completely wrong results. If you pass one of these two flags, @ref SOLVEPNP_EPNP method will be used instead. The minimum number of points is 4 in the general case. In the case of @ref SOLVEPNP_P3P and @ref SOLVEPNP_AP3P methods, it is required to use exactly 4 points (the first 3 points are used to estimate all the solutions of the P3P problem, the last one is used to retain the best solution that minimizes the reprojection error). With @ref SOLVEPNP_ITERATIVE method and useExtrinsicGuess=true , the minimum number of points is 3 (3 points are sufficient to compute a pose but there are up to 4 solutions). The initial solution should be close to the global solution to converge. With @ref SOLVEPNP_IPPE input points must be &gt;= 4 and object points must be coplanar. With @ref SOLVEPNP_IPPE_SQUARE this is a special case suitable for marker pose estimation. Number of input points must be 4. Object points must be defined in the following order: point 0: [-squareLength / 2, squareLength / 2, 0] point 1: [ squareLength / 2, squareLength / 2, 0] point 2: [ squareLength / 2, -squareLength / 2, 0] point 3: [-squareLength / 2, -squareLength / 2, 0] rvecs : vector_UMat tvecs : vector_UMat useExtrinsicGuess : bool flags : SolvePnPMethod rvec : UMat tvec : UMat reprojectionError : UMat Python prototype (for reference): solvePnPGeneric ( objectPoints , imagePoints , cameraMatrix , distCoeffs [ , rvecs [ , tvecs [ , useExtrinsicGuess [ , flags [ , rvec [ , tvec [ , reprojectionError ] ] ] ] ] ] ] ) -&gt; retval , rvecs , tvecs , reprojectionError","ref":"OpenCV.html#solvepnpgeneric/5","title":"OpenCV.solvepnpgeneric/5","type":"function"},{"doc":"","ref":"OpenCV.html#solvepnpransac/4","title":"OpenCV.solvepnpransac/4","type":"function"},{"doc":"rvec : UMat tvec : UMat inliers : UMat params : UsacParams Python prototype (for reference): solvePnPRansac ( objectPoints , imagePoints , cameraMatrix , distCoeffs [ , rvec [ , tvec [ , inliers [ , params ] ] ] ] ) -&gt; retval , cameraMatrix , rvec , tvec , inliers","ref":"OpenCV.html#solvepnpransac/5","title":"OpenCV.solvepnpransac/5","type":"function"},{"doc":"","ref":"OpenCV.html#solvepnprefinelm/6","title":"OpenCV.solvepnprefinelm/6","type":"function"},{"doc":"Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution. @see @ref calib3d_solvePnP objectPoints . where N is the number of points. vector\\&lt;Point3d&gt; can also be passed here. imagePoints . where N is the number of points. vector\\&lt;Point2d&gt; can also be passed here. cameraMatrix . distCoeffs . \\f$\\distcoeffs\\f$. If the vector is NULL/empty, the zero distortion coefficients are assumed. rvec . the model coordinate system to the camera coordinate system. Input values are used as an initial solution. tvec . criteria . The function refines the object pose given at least 3 object points, their corresponding image projections, an initial solution for the rotation and translation vector, as well as the camera intrinsic matrix and the distortion coefficients. The function minimizes the projection error with respect to the rotation and the translation vectors, according to a Levenberg-Marquardt iterative minimization @cite Madsen04 @cite Eade13 process. criteria : TermCriteria Python prototype (for reference): solvePnPRefineLM ( objectPoints , imagePoints , cameraMatrix , distCoeffs , rvec , tvec [ , criteria ] ) -&gt; rvec , tvec","ref":"OpenCV.html#solvepnprefinelm/7","title":"OpenCV.solvepnprefinelm/7","type":"function"},{"doc":"","ref":"OpenCV.html#solvepnprefinevvs/6","title":"OpenCV.solvepnprefinevvs/6","type":"function"},{"doc":"Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution. @see @ref calib3d_solvePnP objectPoints . where N is the number of points. vector\\&lt;Point3d&gt; can also be passed here. imagePoints . where N is the number of points. vector\\&lt;Point2d&gt; can also be passed here. cameraMatrix . distCoeffs . \\f$\\distcoeffs\\f$. If the vector is NULL/empty, the zero distortion coefficients are assumed. rvec . the model coordinate system to the camera coordinate system. Input values are used as an initial solution. tvec . criteria . vVSlambda . gain in the Damped Gauss-Newton formulation. The function refines the object pose given at least 3 object points, their corresponding image projections, an initial solution for the rotation and translation vector, as well as the camera intrinsic matrix and the distortion coefficients. The function minimizes the projection error with respect to the rotation and the translation vectors, using a virtual visual servoing (VVS) @cite Chaumette06 @cite Marchand16 scheme. criteria : TermCriteria vVSlambda : double Python prototype (for reference): solvePnPRefineVVS ( objectPoints , imagePoints , cameraMatrix , distCoeffs , rvec , tvec [ , criteria [ , VVSlambda ] ] ) -&gt; rvec , tvec","ref":"OpenCV.html#solvepnprefinevvs/7","title":"OpenCV.solvepnprefinevvs/7","type":"function"},{"doc":"","ref":"OpenCV.html#solvepoly/1","title":"OpenCV.solvepoly/1","type":"function"},{"doc":"Finds the real or complex roots of a polynomial equation. The function cv::solvePoly finds real and complex roots of a polynomial equation: \\f[\\texttt{coeffs} [n] x^{n} + \\texttt{coeffs} [n-1] x^{n-1} + ... + \\texttt{coeffs} [1] x + \\texttt{coeffs} [0] = 0\\f] coeffs . roots . maxIters . roots : UMat maxIters : int Python prototype (for reference): solvePoly ( coeffs [ , roots [ , maxIters ] ] ) -&gt; retval , roots","ref":"OpenCV.html#solvepoly/2","title":"OpenCV.solvepoly/2","type":"function"},{"doc":"","ref":"OpenCV.html#sort/2","title":"OpenCV.sort/2","type":"function"},{"doc":"Sorts each row or each column of a matrix. The function cv::sort sorts each matrix row or each matrix column in ascending or descending order. So you should pass two operation flags to get desired behaviour. If you want to sort matrix rows or columns lexicographically, you can use STL std::sort generic function with the proper comparison predicate. src . dst . flags . @sa sortIdx, randShuffle dst : UMat Python prototype (for reference): sort ( src , flags [ , dst ] ) -&gt; dst","ref":"OpenCV.html#sort/3","title":"OpenCV.sort/3","type":"function"},{"doc":"","ref":"OpenCV.html#sortidx/2","title":"OpenCV.sortidx/2","type":"function"},{"doc":"Sorts each row or each column of a matrix. The function cv::sortIdx sorts each matrix row or each matrix column in the ascending or descending order. So you should pass two operation flags to get desired behaviour. Instead of reordering the elements themselves, it stores the indices of sorted elements in the output array. For example: Mat A = Mat :: eye ( 3 , 3 , CV_32F ) , B ; sortIdx ( A , B , SORT_EVERY_ROW + SORT_ASCENDING ) ; // B will probably contain // ( because of equal elements in A some permutations are possible ) : // [ [ 1 , 2 , 0 ] , [ 0 , 2 , 1 ] , [ 0 , 1 , 2 ] ] src . dst . flags . @sa sort, randShuffle dst : UMat Python prototype (for reference): sortIdx ( src , flags [ , dst ] ) -&gt; dst","ref":"OpenCV.html#sortidx/3","title":"OpenCV.sortidx/3","type":"function"},{"doc":"","ref":"OpenCV.html#sparsepyrlkopticalflow_create/0","title":"OpenCV.sparsepyrlkopticalflow_create/0","type":"function"},{"doc":"winSize : Size maxLevel : int crit : TermCriteria flags : int minEigThreshold : double Python prototype (for reference): SparsePyrLKOpticalFlow_create ( [ , winSize [ , maxLevel [ , crit [ , flags [ , minEigThreshold ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#sparsepyrlkopticalflow_create/1","title":"OpenCV.sparsepyrlkopticalflow_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#spatialgradient/1","title":"OpenCV.spatialgradient/1","type":"function"},{"doc":"Calculates the first order image derivative in both x and y using a Sobel operator Equivalent to calling: Sobel ( src , dx , CV_16SC1 , 1 , 0 , 3 ) ; Sobel ( src , dy , CV_16SC1 , 0 , 1 , 3 ) ; src . dx . dy . ksize . borderType . Only #BORDER_DEFAULT=#BORDER_REFLECT_101 and #BORDER_REPLICATE are supported. @sa Sobel dx : UMat dy : UMat ksize : int borderType : int Python prototype (for reference): spatialGradient ( src [ , dx [ , dy [ , ksize [ , borderType ] ] ] ] ) -&gt; dx , dy","ref":"OpenCV.html#spatialgradient/2","title":"OpenCV.spatialgradient/2","type":"function"},{"doc":"","ref":"OpenCV.html#split/1","title":"OpenCV.split/1","type":"function"},{"doc":"Has overloading in C++ m . mv . mv : vector_UMat Python prototype (for reference): split ( m [ , mv ] ) -&gt; mv","ref":"OpenCV.html#split/2","title":"OpenCV.split/2","type":"function"},{"doc":"","ref":"OpenCV.html#sqrboxfilter/3","title":"OpenCV.sqrboxfilter/3","type":"function"},{"doc":"Calculates the normalized sum of squares of the pixel values overlapping the filter. For every pixel \\f$ (x, y) \\f$ in the source image, the function calculates the sum of squares of those neighboring pixel values which overlap the filter placed over the pixel \\f$ (x, y) \\f$. The unnormalized square box filter can be useful in computing local image statistics such as the the local variance and standard deviation around the neighborhood of a pixel. src . dst . ddepth . ksize . anchor . center. normalize . borderType . @sa boxFilter dst : UMat anchor : Point normalize : bool borderType : int Python prototype (for reference): sqrBoxFilter ( src , ddepth , ksize [ , dst [ , anchor [ , normalize [ , borderType ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#sqrboxfilter/4","title":"OpenCV.sqrboxfilter/4","type":"function"},{"doc":"","ref":"OpenCV.html#sqrt/1","title":"OpenCV.sqrt/1","type":"function"},{"doc":"Calculates a square root of array elements. The function cv::sqrt calculates a square root of each input array element. In case of multi-channel arrays, each channel is processed independently. The accuracy is approximately the same as of the built-in std::sqrt . src . dst . dst : UMat Python prototype (for reference): sqrt ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.html#sqrt/2","title":"OpenCV.sqrt/2","type":"function"},{"doc":"","ref":"OpenCV.html#startwindowthread/0","title":"OpenCV.startwindowthread/0","type":"function"},{"doc":"","ref":"OpenCV.html#stereobm_create/0","title":"OpenCV.stereobm_create/0","type":"function"},{"doc":"Creates StereoBM object numDisparities . disparity from 0 (default minimum disparity) to numDisparities. The search range can then be shifted by changing the minimum disparity. blockSize . (as the block is centered at the current pixel). Larger block size implies smoother, though less accurate disparity map. Smaller block size gives more detailed disparity map, but there is higher chance for algorithm to find a wrong correspondence. The function create StereoBM object. You can then call StereoBM::compute() to compute disparity for a specific stereo pair. numDisparities : int blockSize : int Python prototype (for reference): StereoBM_create ( [ , numDisparities [ , blockSize ] ] ) -&gt; retval","ref":"OpenCV.html#stereobm_create/1","title":"OpenCV.stereobm_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#stereocalibrate/8","title":"OpenCV.stereocalibrate/8","type":"function"},{"doc":"r : UMat t : UMat e : UMat f : UMat flags : int criteria : TermCriteria Python prototype (for reference): stereoCalibrate ( objectPoints , imagePoints1 , imagePoints2 , cameraMatrix1 , distCoeffs1 , cameraMatrix2 , distCoeffs2 , imageSize [ , R [ , T [ , E [ , F [ , flags [ , criteria ] ] ] ] ] ] ) -&gt; retval , cameraMatrix1 , distCoeffs1 , cameraMatrix2 , distCoeffs2 , R , T , E , F","ref":"OpenCV.html#stereocalibrate/9","title":"OpenCV.stereocalibrate/9","type":"function"},{"doc":"","ref":"OpenCV.html#stereocalibrateextended/10","title":"OpenCV.stereocalibrateextended/10","type":"function"},{"doc":"Calibrates a stereo camera set up. This function finds the intrinsic parameters for each of the two cameras and the extrinsic parameters between the two cameras. objectPoints . in @ref calibrateCamera. For each pattern view, both cameras need to see the same object points. Therefore, objectPoints.size(), imagePoints1.size(), and imagePoints2.size() need to be equal as well as objectPoints[i].size(), imagePoints1[i].size(), and imagePoints2[i].size() need to be equal for each i. imagePoints1 . observed by the first camera. The same structure as in @ref calibrateCamera. imagePoints2 . observed by the second camera. The same structure as in @ref calibrateCamera. cameraMatrix1 . @ref calibrateCamera. Furthermore, for the stereo case, additional flags may be used, see below. distCoeffs1 . @ref calibrateCamera. cameraMatrix2 . cameraMatrix1. distCoeffs2 . description for distCoeffs1. imageSize . r . points given in the first camera's coordinate system to points in the second camera's coordinate system. In more technical terms, the tuple of R and T performs a change of basis from the first camera's coordinate system to the second camera's coordinate system. Due to its duality, this tuple is equivalent to the position of the first camera with respect to the second camera coordinate system. t . e . f . perViewErrors . flags . @ref CALIB_FIX_INTRINSIC Fix cameraMatrix? and distCoeffs? so that only R, T, E, and F matrices are estimated. @ref CALIB_USE_INTRINSIC_GUESS Optimize some or all of the intrinsic parameters according to the specified flags. Initial values are provided by the user. @ref CALIB_USE_EXTRINSIC_GUESS R and T contain valid initial values that are optimized further. Otherwise R and T are initialized to the median value of the pattern views (each dimension separately). @ref CALIB_FIX_PRINCIPAL_POINT Fix the principal points during the optimization. @ref CALIB_FIX_FOCAL_LENGTH Fix \\f$f^{(j)}_x\\f$ and \\f$f^{(j)}_y\\f$ . @ref CALIB_FIX_ASPECT_RATIO Optimize \\f$f^{(j)}_y\\f$ . Fix the ratio \\f$f^{(j)}_x/f^{(j)}_y\\f$ . @ref CALIB_SAME_FOCAL_LENGTH Enforce \\f$f^{(0)}_x=f^{(1)}_x\\f$ and \\f$f^{(0)}_y=f^{(1)}_y\\f$ . @ref CALIB_ZERO_TANGENT_DIST Set tangential distortion coefficients for each camera to zeros and fix there. @ref CALIB_FIX_K1,..., @ref CALIB_FIX_K6 Do not change the corresponding radial distortion coefficient during the optimization. If @ref CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0. @ref CALIB_RATIONAL_MODEL Enable coefficients k4, k5, and k6. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the rational model and return 8 coefficients. If the flag is not set, the function computes and returns only 5 distortion coefficients. @ref CALIB_THIN_PRISM_MODEL Coefficients s1, s2, s3 and s4 are enabled. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the thin prism model and return 12 coefficients. If the flag is not set, the function computes and returns only 5 distortion coefficients. @ref CALIB_FIX_S1_S2_S3_S4 The thin prism distortion coefficients are not changed during the optimization. If @ref CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0. @ref CALIB_TILTED_MODEL Coefficients tauX and tauY are enabled. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the tilted sensor model and return 14 coefficients. If the flag is not set, the function computes and returns only 5 distortion coefficients. @ref CALIB_FIX_TAUX_TAUY The coefficients of the tilted sensor model are not changed during the optimization. If @ref CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0. criteria . The function estimates the transformation between two cameras making a stereo pair. If one computes the poses of an object relative to the first camera and to the second camera, ( \\f$R_1\\f$,\\f$T_1\\f$ ) and (\\f$R_2\\f$,\\f$T_2\\f$), respectively, for a stereo camera where the relative position and orientation between the two cameras are fixed, then those poses definitely relate to each other. This means, if the relative position and orientation (\\f$R\\f$,\\f$T\\f$) of the two cameras is known, it is possible to compute (\\f$R_2\\f$,\\f$T_2\\f$) when (\\f$R_1\\f$,\\f$T_1\\f$) is given. This is what the described function does. It computes (\\f$R\\f$,\\f$T\\f$) such that: \\f[R_2=R R_1\\f] \\f[T_2=R T_1 + T.\\f] Therefore, one can compute the coordinate representation of a 3D point for the second camera's coordinate system when given the point's coordinate representation in the first camera's coordinate system: \\f[\\begin{bmatrix} X_2 \\\\ Y_2 \\\\ Z_2 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} R &amp; T \\\\ 0 &amp; 1 \\end{bmatrix} \\begin{bmatrix} X_1 \\\\ Y_1 \\\\ Z_1 \\\\ 1 \\end{bmatrix}.\\f] Optionally, it computes the essential matrix E: \\f[E= \\vecthreethree{0}{-T_2}{T_1}{T_2}{0}{-T_0}{-T_1}{T_0}{0} R\\f] where \\f$T_i\\f$ are components of the translation vector \\f$T\\f$ : \\f$T=[T_0, T_1, T_2]^T\\f$ . And the function can also compute the fundamental matrix F: \\f[F = cameraMatrix2^{-T}\\cdot E \\cdot cameraMatrix1^{-1}\\f] Besides the stereo-related information, the function can also perform a full calibration of each of the two cameras. However, due to the high dimensionality of the parameter space and noise in the input data, the function can diverge from the correct solution. If the intrinsic parameters can be estimated with high accuracy for each of the cameras individually (for example, using #calibrateCamera ), you are recommended to do so and then pass @ref CALIB_FIX_INTRINSIC flag to the function along with the computed intrinsic parameters. Otherwise, if all the parameters are estimated at once, it makes sense to restrict some parameters, for example, pass @ref CALIB_SAME_FOCAL_LENGTH and @ref CALIB_ZERO_TANGENT_DIST flags, which is usually a reasonable assumption. Similarly to #calibrateCamera, the function minimizes the total re-projection error for all the points in all the available views from both cameras. The function returns the final value of the re-projection error. e : UMat f : UMat perViewErrors : UMat flags : int criteria : TermCriteria Python prototype (for reference): stereoCalibrateExtended ( objectPoints , imagePoints1 , imagePoints2 , cameraMatrix1 , distCoeffs1 , cameraMatrix2 , distCoeffs2 , imageSize , R , T [ , E [ , F [ , perViewErrors [ , flags [ , criteria ] ] ] ] ] ) -&gt; retval , cameraMatrix1 , distCoeffs1 , cameraMatrix2 , distCoeffs2 , R , T , E , F , perViewErrors","ref":"OpenCV.html#stereocalibrateextended/11","title":"OpenCV.stereocalibrateextended/11","type":"function"},{"doc":"","ref":"OpenCV.html#stereorectify/7","title":"OpenCV.stereorectify/7","type":"function"},{"doc":"Computes rectification transforms for each head of a calibrated stereo camera. cameraMatrix1 . distCoeffs1 . cameraMatrix2 . distCoeffs2 . imageSize . r . see @ref stereoCalibrate. t . see @ref stereoCalibrate. r1 . brings points given in the unrectified first camera's coordinate system to points in the rectified first camera's coordinate system. In more technical terms, it performs a change of basis from the unrectified first camera's coordinate system to the rectified first camera's coordinate system. r2 . brings points given in the unrectified second camera's coordinate system to points in the rectified second camera's coordinate system. In more technical terms, it performs a change of basis from the unrectified second camera's coordinate system to the rectified second camera's coordinate system. p1 . camera, i.e. it projects points given in the rectified first camera coordinate system into the rectified first camera's image. p2 . camera, i.e. it projects points given in the rectified first camera coordinate system into the rectified second camera's image. q . flags . the function makes the principal points of each camera have the same pixel coordinates in the rectified views. And if the flag is not set, the function may still shift the images in the horizontal or vertical direction (depending on the orientation of epipolar lines) to maximize the useful image area. alpha . scaling. Otherwise, the parameter should be between 0 and 1. alpha=0 means that the rectified images are zoomed and shifted so that only valid pixels are visible (no black areas after rectification). alpha=1 means that the rectified image is decimated and shifted so that all the pixels from the original images from the cameras are retained in the rectified images (no source image pixels are lost). Any intermediate value yields an intermediate result between those two extreme cases. newImageSize . #initUndistortRectifyMap (see the stereo_calib.cpp sample in OpenCV samples directory). When (0,0) is passed (default), it is set to the original imageSize . Setting it to a larger value can help you preserve details in the original image, especially when there is a big radial distortion. validPixROI1 . are valid. If alpha=0 , the ROIs cover the whole images. Otherwise, they are likely to be smaller (see the picture below). validPixROI2 . are valid. If alpha=0 , the ROIs cover the whole images. Otherwise, they are likely to be smaller (see the picture below). The function computes the rotation matrices for each camera that (virtually) make both camera image planes the same plane. Consequently, this makes all the epipolar lines parallel and thus simplifies the dense stereo correspondence problem. The function takes the matrices computed by #stereoCalibrate as input. As output, it provides two rotation matrices and also two projection matrices in the new coordinates. The function distinguishes the following two cases: Horizontal stereo : the first and the second camera views are shifted relative to each other mainly along the x-axis (with possible small vertical shift). In the rectified images, the corresponding epipolar lines in the left and right cameras are horizontal and have the same y-coordinate. P1 and P2 look like: \\f[\\texttt{P1} = \\begin{bmatrix} f &amp; 0 &amp; cx_1 &amp; 0 \\\\ 0 &amp; f &amp; cy &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\end{bmatrix}\\f] \\f[\\texttt{P2} = \\begin{bmatrix} f &amp; 0 &amp; cx_2 &amp; T_x*f \\\\ 0 &amp; f &amp; cy &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\end{bmatrix} ,\\f] where \\f$T_x\\f$ is a horizontal shift between the cameras and \\f$cx_1=cx_2\\f$ if @ref CALIB_ZERO_DISPARITY is set. Vertical stereo : the first and the second camera views are shifted relative to each other mainly in the vertical direction (and probably a bit in the horizontal direction too). The epipolar lines in the rectified images are vertical and have the same x-coordinate. P1 and P2 look like: \\f[\\texttt{P1} = \\begin{bmatrix} f &amp; 0 &amp; cx &amp; 0 \\\\ 0 &amp; f &amp; cy_1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\end{bmatrix}\\f] \\f[\\texttt{P2} = \\begin{bmatrix} f &amp; 0 &amp; cx &amp; 0 \\\\ 0 &amp; f &amp; cy_2 &amp; T_y*f \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\end{bmatrix},\\f] where \\f$T_y\\f$ is a vertical shift between the cameras and \\f$cy_1=cy_2\\f$ if @ref CALIB_ZERO_DISPARITY is set. As you can see, the first three columns of P1 and P2 will effectively be the new &quot;rectified&quot; camera matrices. The matrices, together with R1 and R2 , can then be passed to #initUndistortRectifyMap to initialize the rectification map for each camera. See below the screenshot from the stereo_calib.cpp sample. Some red horizontal lines pass through the corresponding image regions. This means that the images are well rectified, which is what most stereo correspondence algorithms rely on. The green rectangles are roi1 and roi2 . You see that their interiors are all valid pixels. r1 : UMat r2 : UMat p1 : UMat p2 : UMat q : UMat flags : int alpha : double newImageSize : Size Python prototype (for reference): stereoRectify ( cameraMatrix1 , distCoeffs1 , cameraMatrix2 , distCoeffs2 , imageSize , R , T [ , R1 [ , R2 [ , P1 [ , P2 [ , Q [ , flags [ , alpha [ , newImageSize ] ] ] ] ] ] ] ] ) -&gt; R1 , R2 , P1 , P2 , Q , validPixROI1 , validPixROI2","ref":"OpenCV.html#stereorectify/8","title":"OpenCV.stereorectify/8","type":"function"},{"doc":"","ref":"OpenCV.html#stereorectifyuncalibrated/4","title":"OpenCV.stereorectifyuncalibrated/4","type":"function"},{"doc":"Computes a rectification transform for an uncalibrated stereo camera. points1 . points2 . #findFundamentalMat are supported. f . #findFundamentalMat . imgSize . h1 . h2 . threshold . than zero, all the point pairs that do not comply with the epipolar geometry (that is, the points for which \\f$|\\texttt{points2[i]}^T*\\texttt{F}*\\texttt{points1[i]}|&gt;\\texttt{threshold}\\f$ ) are rejected prior to computing the homographies. Otherwise, all the points are considered inliers. The function computes the rectification transformations without knowing intrinsic parameters of the cameras and their relative position in the space, which explains the suffix &quot;uncalibrated&quot;. Another related difference from #stereoRectify is that the function outputs not the rectification transformations in the object (3D) space, but the planar perspective transformations encoded by the homography matrices H1 and H2 . The function implements the algorithm @cite Hartley99 . Note : While the algorithm does not need to know the intrinsic parameters of the cameras, it heavily depends on the epipolar geometry. Therefore, if the camera lenses have a significant distortion, it would be better to correct it before computing the fundamental matrix and calling this function. For example, distortion coefficients can be estimated for each head of stereo camera separately by using #calibrateCamera . Then, the images can be corrected using #undistort , or just the point coordinates can be corrected with #undistortPoints . h1 : UMat h2 : UMat threshold : double Python prototype (for reference): stereoRectifyUncalibrated ( points1 , points2 , F , imgSize [ , H1 [ , H2 [ , threshold ] ] ] ) -&gt; retval , H1 , H2","ref":"OpenCV.html#stereorectifyuncalibrated/5","title":"OpenCV.stereorectifyuncalibrated/5","type":"function"},{"doc":"","ref":"OpenCV.html#stereosgbm_create/0","title":"OpenCV.stereosgbm_create/0","type":"function"},{"doc":"Creates StereoSGBM object minDisparity . rectification algorithms can shift images, so this parameter needs to be adjusted accordingly. numDisparities . zero. In the current implementation, this parameter must be divisible by 16. blockSize . somewhere in the 3..11 range. p1 . p2 . the smoother the disparity is. P1 is the penalty on the disparity change by plus or minus 1 between neighbor pixels. P2 is the penalty on the disparity change by more than 1 between neighbor pixels. The algorithm requires P2 &gt; P1 . See stereo_match.cpp sample where some reasonably good P1 and P2 values are shown (like 8*number_of_image_channels*blockSize*blockSize and 32*number_of_image_channels*blockSize*blockSize , respectively). disp12MaxDiff . disparity check. Set it to a non-positive value to disable the check. preFilterCap . computes x-derivative at each pixel and clips its value by [-preFilterCap, preFilterCap] interval. The result values are passed to the Birchfield-Tomasi pixel cost function. uniquenessRatio . value should &quot;win&quot; the second best value to consider the found match correct. Normally, a value within the 5-15 range is good enough. speckleWindowSize . and invalidate. Set it to 0 to disable speckle filtering. Otherwise, set it somewhere in the 50-200 range. speckleRange . filtering, set the parameter to a positive value, it will be implicitly multiplied by 16. Normally, 1 or 2 is good enough. mode . algorithm. It will consume O(W*H*numDisparities) bytes, which is large for 640x480 stereo and huge for HD-size pictures. By default, it is set to false . The first constructor initializes StereoSGBM with all the default parameters. So, you only have to set StereoSGBM::numDisparities at minimum. The second constructor enables you to set each parameter to a custom value. minDisparity : int numDisparities : int blockSize : int p1 : int p2 : int disp12MaxDiff : int preFilterCap : int uniquenessRatio : int speckleWindowSize : int speckleRange : int mode : int Python prototype (for reference): StereoSGBM_create ( [ , minDisparity [ , numDisparities [ , blockSize [ , P1 [ , P2 [ , disp12MaxDiff [ , preFilterCap [ , uniquenessRatio [ , speckleWindowSize [ , speckleRange [ , mode ] ] ] ] ] ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.html#stereosgbm_create/1","title":"OpenCV.stereosgbm_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#stitcher_create/0","title":"OpenCV.stitcher_create/0","type":"function"},{"doc":"Creates a Stitcher configured in one of the stitching modes. mode . to stitch and their transformation. Default parameters will be chosen for operation in given scenario. @return Stitcher class instance. mode : Mode Python prototype (for reference): Stitcher_create ( [ , mode ] ) -&gt; retval","ref":"OpenCV.html#stitcher_create/1","title":"OpenCV.stitcher_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#stylization/1","title":"OpenCV.stylization/1","type":"function"},{"doc":"Stylization aims to produce digital imagery with a wide variety of effects not focused on photorealism. Edge-aware filters are ideal for stylization, as they can abstract regions of low contrast while preserving, or enhancing, high-contrast features. src . dst . sigma_s . sigma_r . dst : UMat sigma_s : float sigma_r : float Python prototype (for reference): stylization ( src [ , dst [ , sigma_s [ , sigma_r ] ] ] ) -&gt; dst","ref":"OpenCV.html#stylization/2","title":"OpenCV.stylization/2","type":"function"},{"doc":"","ref":"OpenCV.html#subdiv2d_subdiv2d/1","title":"OpenCV.subdiv2d_subdiv2d/1","type":"function"},{"doc":"","ref":"OpenCV.html#subtract/2","title":"OpenCV.subtract/2","type":"function"},{"doc":"Calculates the per-element difference between two arrays or array and a scalar. The function subtract calculates: Difference between two arrays, when both input arrays have the same size and the same number of channels: \\f[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1}(I) - \\texttt{src2}(I)) \\quad \\texttt{if mask}(I) \\ne0\\f] Difference between an array and a scalar, when src2 is constructed from Scalar or has the same number of elements as src1.channels() : \\f[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1}(I) - \\texttt{src2} ) \\quad \\texttt{if mask}(I) \\ne0\\f] Difference between a scalar and an array, when src1 is constructed from Scalar or has the same number of elements as src2.channels() : \\f[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1} - \\texttt{src2}(I) ) \\quad \\texttt{if mask}(I) \\ne0\\f] The reverse difference between a scalar and an array in the case of SubRS : \\f[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src2} - \\texttt{src1}(I) ) \\quad \\texttt{if mask}(I) \\ne0\\f] where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently. The first function in the list above can be replaced with matrix expressions: dst = src1 - src2; dst -= src1; // equivalent to subtract(dst, src1, dst); The input arrays and the output array can all have the same or different depths. For example, you can subtract to 8-bit unsigned arrays and store the difference in a 16-bit signed array. Depth of the output array is determined by dtype parameter. In the second and third cases above, as well as in the first case, when src1.depth() == src2.depth(), dtype can be set to the default -1. In this case the output array will have the same depth as the input array, be it src1, src2 or both. Note : Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow. src1 . src2 . dst . mask . of the output array to be changed. dtype . @sa add, addWeighted, scaleAdd, Mat::convertTo dst : UMat mask : UMat dtype : int Python prototype (for reference): subtract ( src1 , src2 [ , dst [ , mask [ , dtype ] ] ] ) -&gt; dst","ref":"OpenCV.html#subtract/3","title":"OpenCV.subtract/3","type":"function"},{"doc":"","ref":"OpenCV.html#sumelems/1","title":"OpenCV.sumelems/1","type":"function"},{"doc":"","ref":"OpenCV.html#svbacksubst/4","title":"OpenCV.svbacksubst/4","type":"function"},{"doc":"wrap SVD::backSubst dst : UMat Python prototype (for reference): SVBackSubst ( w , u , vt , rhs [ , dst ] ) -&gt; dst","ref":"OpenCV.html#svbacksubst/5","title":"OpenCV.svbacksubst/5","type":"function"},{"doc":"","ref":"OpenCV.html#svdecomp/1","title":"OpenCV.svdecomp/1","type":"function"},{"doc":"wrap SVD::compute w : UMat u : UMat vt : UMat flags : int Python prototype (for reference): SVDecomp ( src [ , w [ , u [ , vt [ , flags ] ] ] ] ) -&gt; w , u , vt","ref":"OpenCV.html#svdecomp/2","title":"OpenCV.svdecomp/2","type":"function"},{"doc":"","ref":"OpenCV.html#textureflattening/2","title":"OpenCV.textureflattening/2","type":"function"},{"doc":"By retaining only the gradients at edge locations, before integrating with the Poisson solver, one washes out the texture of the selected region, giving its contents a flat aspect. Here Canny Edge %Detector is used. src . mask . dst . low_threshold . high_threshold . kernel_size . Note : The algorithm assumes that the color of the source image is close to that of the destination. This assumption means that when the colors don't match, the source image color gets tinted toward the color of the destination image. dst : UMat low_threshold : float high_threshold : float kernel_size : int Python prototype (for reference): textureFlattening ( src , mask [ , dst [ , low_threshold [ , high_threshold [ , kernel_size ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#textureflattening/3","title":"OpenCV.textureflattening/3","type":"function"},{"doc":"","ref":"OpenCV.html#threshold/4","title":"OpenCV.threshold/4","type":"function"},{"doc":"Applies a fixed-level threshold to each array element. The function applies fixed-level thresholding to a multiple-channel array. The function is typically used to get a bi-level (binary) image out of a grayscale image ( #compare could be also used for this purpose) or for removing a noise, that is, filtering out pixels with too small or too large values. There are several types of thresholding supported by the function. They are determined by type parameter. Also, the special values #THRESH_OTSU or #THRESH_TRIANGLE may be combined with one of the above values. In these cases, the function determines the optimal threshold value using the Otsu's or Triangle algorithm and uses it instead of the specified thresh. Note : Currently, the Otsu's and Triangle methods are implemented only for 8-bit single-channel images. src . dst . thresh . maxval . types. type . @return the computed threshold value if Otsu's or Triangle methods used. @sa adaptiveThreshold, findContours, compare, min, max dst : UMat Python prototype (for reference): threshold ( src , thresh , maxval , type [ , dst ] ) -&gt; retval , dst","ref":"OpenCV.html#threshold/5","title":"OpenCV.threshold/5","type":"function"},{"doc":"","ref":"OpenCV.html#tickmeter_tickmeter/0","title":"OpenCV.tickmeter_tickmeter/0","type":"function"},{"doc":"","ref":"OpenCV.html#trace/1","title":"OpenCV.trace/1","type":"function"},{"doc":"","ref":"OpenCV.html#trackerdasiamrpn_create/0","title":"OpenCV.trackerdasiamrpn_create/0","type":"function"},{"doc":"Constructor parameters . parameters : TrackerDaSiamRPN_Params Python prototype (for reference): TrackerDaSiamRPN_create ( [ , parameters ] ) -&gt; retval","ref":"OpenCV.html#trackerdasiamrpn_create/1","title":"OpenCV.trackerdasiamrpn_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#trackerdasiamrpn_params_trackerdasiamrpn_params/0","title":"OpenCV.trackerdasiamrpn_params_trackerdasiamrpn_params/0","type":"function"},{"doc":"","ref":"OpenCV.html#trackergoturn_create/0","title":"OpenCV.trackergoturn_create/0","type":"function"},{"doc":"Constructor parameters . parameters : TrackerGOTURN_Params Python prototype (for reference): TrackerGOTURN_create ( [ , parameters ] ) -&gt; retval","ref":"OpenCV.html#trackergoturn_create/1","title":"OpenCV.trackergoturn_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#trackergoturn_params_trackergoturn_params/0","title":"OpenCV.trackergoturn_params_trackergoturn_params/0","type":"function"},{"doc":"","ref":"OpenCV.html#trackermil_create/0","title":"OpenCV.trackermil_create/0","type":"function"},{"doc":"Create MIL tracker instance parameters . parameters : TrackerMIL_Params Python prototype (for reference): TrackerMIL_create ( [ , parameters ] ) -&gt; retval","ref":"OpenCV.html#trackermil_create/1","title":"OpenCV.trackermil_create/1","type":"function"},{"doc":"","ref":"OpenCV.html#trackermil_params_trackermil_params/0","title":"OpenCV.trackermil_params_trackermil_params/0","type":"function"},{"doc":"","ref":"OpenCV.html#transform/2","title":"OpenCV.transform/2","type":"function"},{"doc":"Performs the matrix transformation of every array element. The function cv::transform performs the matrix transformation of every element of the array src and stores the results in dst : \\f[\\texttt{dst} (I) = \\texttt{m} \\cdot \\texttt{src} (I)\\f] (when m.cols=src.channels() ), or \\f[\\texttt{dst} (I) = \\texttt{m} \\cdot [ \\texttt{src} (I); 1]\\f] (when m.cols=src.channels()+1 ) Every element of the N -channel array src is interpreted as N -element vector that is transformed using the M x N or M x (N+1) matrix m to M-element vector - the corresponding element of the output array dst . The function may be used for geometrical transformation of N -dimensional points, arbitrary linear color space transformation (such as various kinds of RGB to YUV transforms), shuffling the image channels, and so forth. src . m.cols or m.cols-1. dst . many channels as m.rows. m . @sa perspectiveTransform, getAffineTransform, estimateAffine2D, warpAffine, warpPerspective dst : UMat Python prototype (for reference): transform ( src , m [ , dst ] ) -&gt; dst","ref":"OpenCV.html#transform/3","title":"OpenCV.transform/3","type":"function"},{"doc":"","ref":"OpenCV.html#transpose/1","title":"OpenCV.transpose/1","type":"function"},{"doc":"Transposes a matrix. The function cv::transpose transposes the matrix src : \\f[\\texttt{dst} (i,j) = \\texttt{src} (j,i)\\f] Note : No complex conjugation is done in case of a complex matrix. It should be done separately if needed. src . dst . dst : UMat Python prototype (for reference): transpose ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.html#transpose/2","title":"OpenCV.transpose/2","type":"function"},{"doc":"","ref":"OpenCV.html#triangulatepoints/4","title":"OpenCV.triangulatepoints/4","type":"function"},{"doc":"This function reconstructs 3-dimensional points (in homogeneous coordinates) by using their observations with a stereo camera. projMatr1 . given in the world's coordinate system into the first image. projMatr2 . given in the world's coordinate system into the second image. projPoints1 . it can be also a vector of feature points or two-channel matrix of size 1xN or Nx1. projPoints2 . version, it can be also a vector of feature points or two-channel matrix of size 1xN or Nx1. points4D . returned in the world's coordinate system. Note : Keep in mind that all input data should be of float type in order for this function to work. Note : If the projection matrices from @ref stereoRectify are used, then the returned points are represented in the first camera's rectified coordinate system. @sa reprojectImageTo3D points4D : UMat Python prototype (for reference): triangulatePoints ( projMatr1 , projMatr2 , projPoints1 , projPoints2 [ , points4D ] ) -&gt; points4D","ref":"OpenCV.html#triangulatepoints/5","title":"OpenCV.triangulatepoints/5","type":"function"},{"doc":"","ref":"OpenCV.html#umat_context/0","title":"OpenCV.umat_context/0","type":"function"},{"doc":"","ref":"OpenCV.html#umat_queue/0","title":"OpenCV.umat_queue/0","type":"function"},{"doc":"","ref":"OpenCV.html#umat_umat/2","title":"OpenCV.umat_umat/2","type":"function"},{"doc":"","ref":"OpenCV.html#umat_umat/3","title":"OpenCV.umat_umat/3","type":"function"},{"doc":"","ref":"OpenCV.html#umat_umat/4","title":"OpenCV.umat_umat/4","type":"function"},{"doc":"usageFlags : UMatUsageFlags Python prototype (for reference): UMat ( rows , cols , type , s [ , usageFlags ] ) -&gt; &lt; UMat object &gt;","ref":"OpenCV.html#umat_umat/5","title":"OpenCV.umat_umat/5","type":"function"},{"doc":"","ref":"OpenCV.html#undistort/3","title":"OpenCV.undistort/3","type":"function"},{"doc":"Transforms an image to compensate for lens distortion. The function transforms an image to compensate radial and tangential lens distortion. The function is simply a combination of #initUndistortRectifyMap (with unity R ) and #remap (with bilinear interpolation). See the former function for details of the transformation being performed. Those pixels in the destination image, for which there is no correspondent pixels in the source image, are filled with zeros (black color). A particular subset of the source image that will be visible in the corrected image can be regulated by newCameraMatrix. You can use #getOptimalNewCameraMatrix to compute the appropriate newCameraMatrix depending on your requirements. The camera matrix and the distortion parameters can be determined using #calibrateCamera. If the resolution of images is different from the resolution used at the calibration stage, \\f$f_x, f_y, c_x\\f$ and \\f$c_y\\f$ need to be scaled accordingly, while the distortion coefficients remain the same. src . dst . cameraMatrix . distCoeffs . \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6[, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed. newCameraMatrix . cameraMatrix but you may additionally scale and shift the result by using a different matrix. dst : UMat newCameraMatrix : UMat Python prototype (for reference): undistort ( src , cameraMatrix , distCoeffs [ , dst [ , newCameraMatrix ] ] ) -&gt; dst","ref":"OpenCV.html#undistort/4","title":"OpenCV.undistort/4","type":"function"},{"doc":"","ref":"OpenCV.html#undistortpoints/3","title":"OpenCV.undistortpoints/3","type":"function"},{"doc":"Computes the ideal point coordinates from the observed point coordinates. The function is similar to #undistort and #initUndistortRectifyMap but it operates on a sparse set of points instead of a raster image. Also the function performs a reverse transformation to #projectPoints. In case of a 3D object, it does not reconstruct its 3D coordinates, but for a planar object, it does, up to a translation vector, if the proper R is specified. For each observed point coordinate \\f$(u, v)\\f$ the function computes: \\f[ \\begin{array}{l} x^{&quot;} \\leftarrow (u - c_x)/f_x \\\\ y^{&quot;} \\leftarrow (v - c_y)/f_y \\\\ (x',y') = undistort(x^{&quot;},y^{&quot;}, \\texttt{distCoeffs}) \\\\ {[X\\,Y\\,W]} ^T \\leftarrow R*[x' \\, y' \\, 1]^T \\\\ x \\leftarrow X/W \\\\ y \\leftarrow Y/W \\\\ \\text{only performed if P is specified:} \\\\ u' \\leftarrow x {f'}_x + {c'}_x \\\\ v' \\leftarrow y {f'}_y + {c'}_y \\end{array} \\f] where undistort is an approximate iterative algorithm that estimates the normalized original point coordinates out of the normalized distorted point coordinates (&quot;normalized&quot; means that the coordinates do not depend on the camera matrix). The function can be used for both a stereo camera head or a monocular camera (when R is empty). src . vector\\&lt;Point2f&gt; ). dst . transformation. If matrix P is identity or omitted, dst will contain normalized point coordinates. cameraMatrix . distCoeffs . \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6[, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed. r . #stereoRectify can be passed here. If the matrix is empty, the identity transformation is used. p . #stereoRectify can be passed here. If the matrix is empty, the identity new camera matrix is used. dst : UMat r : UMat p : UMat Python prototype (for reference): undistortPoints ( src , cameraMatrix , distCoeffs [ , dst [ , R [ , P ] ] ] ) -&gt; dst","ref":"OpenCV.html#undistortpoints/4","title":"OpenCV.undistortpoints/4","type":"function"},{"doc":"","ref":"OpenCV.html#undistortpointsiter/6","title":"OpenCV.undistortpointsiter/6","type":"function"},{"doc":"Has overloading in C++ Note : Default version of #undistortPoints does 5 iterations to compute undistorted points. dst : UMat Python prototype (for reference): undistortPointsIter ( src , cameraMatrix , distCoeffs , R , P , criteria [ , dst ] ) -&gt; dst","ref":"OpenCV.html#undistortpointsiter/7","title":"OpenCV.undistortpointsiter/7","type":"function"},{"doc":"","ref":"OpenCV.html#usacparams_usacparams/0","title":"OpenCV.usacparams_usacparams/0","type":"function"},{"doc":"","ref":"OpenCV.html#useopenvx/0","title":"OpenCV.useopenvx/0","type":"function"},{"doc":"","ref":"OpenCV.html#useoptimized/0","title":"OpenCV.useoptimized/0","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpbool/1","title":"OpenCV.utils_dumpbool/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpcstring/1","title":"OpenCV.utils_dumpcstring/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpdouble/1","title":"OpenCV.utils_dumpdouble/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpfloat/1","title":"OpenCV.utils_dumpfloat/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpinputarray/1","title":"OpenCV.utils_dumpinputarray/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpinputarrayofarrays/1","title":"OpenCV.utils_dumpinputarrayofarrays/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpinputoutputarray/1","title":"OpenCV.utils_dumpinputoutputarray/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpinputoutputarrayofarrays/1","title":"OpenCV.utils_dumpinputoutputarrayofarrays/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpint/1","title":"OpenCV.utils_dumpint/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumprange/1","title":"OpenCV.utils_dumprange/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumprect/1","title":"OpenCV.utils_dumprect/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumprotatedrect/1","title":"OpenCV.utils_dumprotatedrect/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpsizet/1","title":"OpenCV.utils_dumpsizet/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpstring/1","title":"OpenCV.utils_dumpstring/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumptermcriteria/1","title":"OpenCV.utils_dumptermcriteria/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpvectorofdouble/1","title":"OpenCV.utils_dumpvectorofdouble/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpvectorofint/1","title":"OpenCV.utils_dumpvectorofint/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_dumpvectorofrect/1","title":"OpenCV.utils_dumpvectorofrect/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_fs_getcachedirectoryfordownloads/0","title":"OpenCV.utils_fs_getcachedirectoryfordownloads/0","type":"function"},{"doc":"","ref":"OpenCV.html#utils_generatevectorofint/1","title":"OpenCV.utils_generatevectorofint/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_generatevectorofmat/4","title":"OpenCV.utils_generatevectorofmat/4","type":"function"},{"doc":"vec : vector_Mat Python prototype (for reference): generateVectorOfMat ( len , rows , cols , dtype [ , vec ] ) -&gt; vec","ref":"OpenCV.html#utils_generatevectorofmat/5","title":"OpenCV.utils_generatevectorofmat/5","type":"function"},{"doc":"","ref":"OpenCV.html#utils_generatevectorofrect/1","title":"OpenCV.utils_generatevectorofrect/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_testasyncarray/1","title":"OpenCV.utils_testasyncarray/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_testasyncexception/0","title":"OpenCV.utils_testasyncexception/0","type":"function"},{"doc":"","ref":"OpenCV.html#utils_testoverloadresolution/1","title":"OpenCV.utils_testoverloadresolution/1","type":"function"},{"doc":"point : Point Python prototype (for reference): testOverloadResolution ( value [ , point ] ) -&gt; retval","ref":"OpenCV.html#utils_testoverloadresolution/2","title":"OpenCV.utils_testoverloadresolution/2","type":"function"},{"doc":"","ref":"OpenCV.html#utils_testoverwritenativemethod/1","title":"OpenCV.utils_testoverwritenativemethod/1","type":"function"},{"doc":"","ref":"OpenCV.html#utils_testraisegeneralexception/0","title":"OpenCV.utils_testraisegeneralexception/0","type":"function"},{"doc":"","ref":"OpenCV.html#utils_testreservedkeywordconversion/1","title":"OpenCV.utils_testreservedkeywordconversion/1","type":"function"},{"doc":"lambda_ : int from_ : int Python prototype (for reference): testReservedKeywordConversion ( positional_argument [ , lambda_ [ , from_ ] ] ) -&gt; retval","ref":"OpenCV.html#utils_testreservedkeywordconversion/2","title":"OpenCV.utils_testreservedkeywordconversion/2","type":"function"},{"doc":"","ref":"OpenCV.html#utils_testrotatedrect/5","title":"OpenCV.utils_testrotatedrect/5","type":"function"},{"doc":"","ref":"OpenCV.html#utils_testrotatedrectvector/5","title":"OpenCV.utils_testrotatedrectvector/5","type":"function"},{"doc":"","ref":"OpenCV.html#validatedisparity/4","title":"OpenCV.validatedisparity/4","type":"function"},{"doc":"disp12MaxDisp : int Python prototype (for reference): validateDisparity ( disparity , cost , minDisparity , numberOfDisparities [ , disp12MaxDisp ] ) -&gt; disparity","ref":"OpenCV.html#validatedisparity/5","title":"OpenCV.validatedisparity/5","type":"function"},{"doc":"","ref":"OpenCV.html#variationalrefinement_create/0","title":"OpenCV.variationalrefinement_create/0","type":"function"},{"doc":"","ref":"OpenCV.html#vconcat/1","title":"OpenCV.vconcat/1","type":"function"},{"doc":"Has overloading in C++ std::vector&lt;cv::Mat&gt; matrices = { cv::Mat(1, 4, CV_8UC1, cv::Scalar(1)), cv::Mat(1, 4, CV_8UC1, cv::Scalar(2)), cv::Mat(1, 4, CV_8UC1, cv::Scalar(3)),}; cv::Mat out; cv::vconcat( matrices, out ); //out: //[1, 1, 1, 1; // 2, 2, 2, 2; // 3, 3, 3, 3] src . dst . same depth. dst : UMat Python prototype (for reference): vconcat ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.html#vconcat/2","title":"OpenCV.vconcat/2","type":"function"},{"doc":"","ref":"OpenCV.html#videocapture_videocapture/0","title":"OpenCV.videocapture_videocapture/0","type":"function"},{"doc":"","ref":"OpenCV.html#videocapture_videocapture/1","title":"OpenCV.videocapture_videocapture/1","type":"function"},{"doc":"","ref":"OpenCV.html#videocapture_videocapture/2","title":"OpenCV.videocapture_videocapture/2","type":"function"},{"doc":"","ref":"OpenCV.html#videocapture_videocapture/3","title":"OpenCV.videocapture_videocapture/3","type":"function"},{"doc":"","ref":"OpenCV.html#videoio_registry_getbackendname/1","title":"OpenCV.videoio_registry_getbackendname/1","type":"function"},{"doc":"","ref":"OpenCV.html#videoio_registry_getbackends/0","title":"OpenCV.videoio_registry_getbackends/0","type":"function"},{"doc":"","ref":"OpenCV.html#videoio_registry_getcamerabackendpluginversion/1","title":"OpenCV.videoio_registry_getcamerabackendpluginversion/1","type":"function"},{"doc":"","ref":"OpenCV.html#videoio_registry_getcamerabackends/0","title":"OpenCV.videoio_registry_getcamerabackends/0","type":"function"},{"doc":"","ref":"OpenCV.html#videoio_registry_getstreambackendpluginversion/1","title":"OpenCV.videoio_registry_getstreambackendpluginversion/1","type":"function"},{"doc":"","ref":"OpenCV.html#videoio_registry_getstreambackends/0","title":"OpenCV.videoio_registry_getstreambackends/0","type":"function"},{"doc":"","ref":"OpenCV.html#videoio_registry_getwriterbackendpluginversion/1","title":"OpenCV.videoio_registry_getwriterbackendpluginversion/1","type":"function"},{"doc":"","ref":"OpenCV.html#videoio_registry_getwriterbackends/0","title":"OpenCV.videoio_registry_getwriterbackends/0","type":"function"},{"doc":"","ref":"OpenCV.html#videoio_registry_hasbackend/1","title":"OpenCV.videoio_registry_hasbackend/1","type":"function"},{"doc":"","ref":"OpenCV.html#videoio_registry_isbackendbuiltin/1","title":"OpenCV.videoio_registry_isbackendbuiltin/1","type":"function"},{"doc":"","ref":"OpenCV.html#videowriter_fourcc/4","title":"OpenCV.videowriter_fourcc/4","type":"function"},{"doc":"","ref":"OpenCV.html#videowriter_videowriter/0","title":"OpenCV.videowriter_videowriter/0","type":"function"},{"doc":"","ref":"OpenCV.html#videowriter_videowriter/4","title":"OpenCV.videowriter_videowriter/4","type":"function"},{"doc":"","ref":"OpenCV.html#videowriter_videowriter/5","title":"OpenCV.videowriter_videowriter/5","type":"function"},{"doc":"","ref":"OpenCV.html#videowriter_videowriter/6","title":"OpenCV.videowriter_videowriter/6","type":"function"},{"doc":"","ref":"OpenCV.html#waitkeyex/0","title":"OpenCV.waitkeyex/0","type":"function"},{"doc":"Similar to #waitKey, but returns full key code. Note : Key code is implementation specific and depends on used backend: QT/GTK/Win32/etc delay : int Python prototype (for reference): waitKeyEx ( [ , delay ] ) -&gt; retval","ref":"OpenCV.html#waitkeyex/1","title":"OpenCV.waitkeyex/1","type":"function"},{"doc":"","ref":"OpenCV.html#warpaffine/3","title":"OpenCV.warpaffine/3","type":"function"},{"doc":"Applies an affine transformation to an image. The function warpAffine transforms the source image using the specified matrix: \\f[\\texttt{dst} (x,y) = \\texttt{src} ( \\texttt{M} _{11} x + \\texttt{M} _{12} y + \\texttt{M} _{13}, \\texttt{M} _{21} x + \\texttt{M} _{22} y + \\texttt{M} _{23})\\f] when the flag #WARP_INVERSE_MAP is set. Otherwise, the transformation is first inverted with #invertAffineTransform and then put in the formula above instead of M. The function cannot operate in-place. src . dst . m . dsize . flags . flag #WARP_INVERSE_MAP that means that M is the inverse transformation ( \\f$\\texttt{dst}\\rightarrow\\texttt{src}\\f$ ). borderMode . borderMode=#BORDER_TRANSPARENT, it means that the pixels in the destination image corresponding to the &quot;outliers&quot; in the source image are not modified by the function. borderValue . @sa warpPerspective, resize, remap, getRectSubPix, transform dst : UMat flags : int borderMode : int borderValue : Scalar Python prototype (for reference): warpAffine ( src , M , dsize [ , dst [ , flags [ , borderMode [ , borderValue ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#warpaffine/4","title":"OpenCV.warpaffine/4","type":"function"},{"doc":"","ref":"OpenCV.html#warpperspective/3","title":"OpenCV.warpperspective/3","type":"function"},{"doc":"Applies a perspective transformation to an image. The function warpPerspective transforms the source image using the specified matrix: \\f[\\texttt{dst} (x,y) = \\texttt{src} \\left ( \\frac{M_{11} x + M_{12} y + M_{13}}{M_{31} x + M_{32} y + M_{33}} , \\frac{M_{21} x + M_{22} y + M_{23}}{M_{31} x + M_{32} y + M_{33}} \\right )\\f] when the flag #WARP_INVERSE_MAP is set. Otherwise, the transformation is first inverted with invert and then put in the formula above instead of M. The function cannot operate in-place. src . dst . m . dsize . flags . optional flag #WARP_INVERSE_MAP, that sets M as the inverse transformation ( \\f$\\texttt{dst}\\rightarrow\\texttt{src}\\f$ ). borderMode . borderValue . @sa warpAffine, resize, remap, getRectSubPix, perspectiveTransform dst : UMat flags : int borderMode : int borderValue : Scalar Python prototype (for reference): warpPerspective ( src , M , dsize [ , dst [ , flags [ , borderMode [ , borderValue ] ] ] ] ) -&gt; dst","ref":"OpenCV.html#warpperspective/4","title":"OpenCV.warpperspective/4","type":"function"},{"doc":"","ref":"OpenCV.html#warppolar/5","title":"OpenCV.warppolar/5","type":"function"},{"doc":"\\brief Remaps an image to polar or semilog-polar coordinates space @anchor polar_remaps_reference_image Transform the source image using the following transformation: \\f[ dst(\\rho , \\phi ) = src(x,y) \\f] where \\f[ \\begin{array}{l} \\vec{I} = (x - center.x, \\;y - center.y) \\\\ \\phi = Kangle \\cdot \\texttt{angle} (\\vec{I}) \\\\ \\rho = \\left\\{\\begin{matrix} Klin \\cdot \\texttt{magnitude} (\\vec{I}) &amp; default \\\\ Klog \\cdot log_e(\\texttt{magnitude} (\\vec{I})) &amp; if \\; semilog \\\\ \\end{matrix}\\right. \\end{array} \\f] and \\f[ \\begin{array}{l} Kangle = dsize.height / 2\\Pi \\\\ Klin = dsize.width / maxRadius \\\\ Klog = dsize.width / log_e(maxRadius) \\\\ \\end{array} \\f] \\par Linear vs semilog mapping Polar mapping can be linear or semi-log. Add one of #WarpPolarMode to flags to specify the polar mapping mode. Linear is the default mode. The semilog mapping emulates the human &quot;foveal&quot; vision that permit very high acuity on the line of sight (central vision) in contrast to peripheral vision where acuity is minor. \\par Option on dsize : if both values in dsize &lt;=0 (default), the destination image will have (almost) same area of source bounding circle: \\f[\\begin{array}{l} dsize.area \\leftarrow (maxRadius^2 \\cdot \\Pi) \\\\ dsize.width = \\texttt{cvRound}(maxRadius) \\\\ dsize.height = \\texttt{cvRound}(maxRadius \\cdot \\Pi) \\\\ \\end{array}\\f] if only dsize.height &lt;= 0 , the destination image area will be proportional to the bounding circle area but scaled by Kx * Kx : \\f[\\begin{array}{l} dsize.height = \\texttt{cvRound}(dsize.width \\cdot \\Pi) \\\\ \\end{array} \\f] if both values in dsize &gt; 0 , the destination image will have the given size therefore the area of the bounding circle will be scaled to dsize . \\par Reverse mapping You can get reverse mapping adding #WARP_INVERSE_MAP to flags \\snippet polar_transforms.cpp InverseMap In addiction, to calculate the original coordinate from a polar mapped coordinate \\f$(rho, phi)-&gt;(x, y)\\f$: \\snippet polar_transforms.cpp InverseCoordinate src . dst . dsize . center . maxRadius . flags . Add #WARP_POLAR_LINEAR to select linear polar mapping (default) Add #WARP_POLAR_LOG to select semilog polar mapping Add #WARP_INVERSE_MAP for reverse mapping. Note : The function can not operate in-place. To calculate magnitude and angle in degrees #cartToPolar is used internally thus angles are measured from 0 to 360 with accuracy about 0.3 degrees. This function uses #remap. Due to current implementation limitations the size of an input and output images should be less than 32767x32767. @sa cv::remap dst : UMat Python prototype (for reference): warpPolar ( src , dsize , center , maxRadius , flags [ , dst ] ) -&gt; dst","ref":"OpenCV.html#warppolar/6","title":"OpenCV.warppolar/6","type":"function"},{"doc":"","ref":"OpenCV.html#watershed/2","title":"OpenCV.watershed/2","type":"function"},{"doc":"","ref":"OpenCV.html#writeopticalflow/2","title":"OpenCV.writeopticalflow/2","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html","title":"OpenCV.AKAZE","type":"module"},{"doc":"","ref":"OpenCV.AKAZE.html#create/0","title":"OpenCV.AKAZE.create/0","type":"function"},{"doc":"The AKAZE constructor descriptor_type . DESCRIPTOR_KAZE_UPRIGHT, DESCRIPTOR_MLDB or DESCRIPTOR_MLDB_UPRIGHT. descriptor_size . descriptor_channels . threshold . nOctaves . nOctaveLayers . diffusivity . DIFF_CHARBONNIER descriptor_type : AKAZE_DescriptorType descriptor_size : int descriptor_channels : int threshold : float nOctaves : int nOctaveLayers : int diffusivity : KAZE_DiffusivityType Python prototype (for reference): create ( [ , descriptor_type [ , descriptor_size [ , descriptor_channels [ , threshold [ , nOctaves [ , nOctaveLayers [ , diffusivity ] ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.AKAZE.html#create/1","title":"OpenCV.AKAZE.create/1","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#getdefaultname/1","title":"OpenCV.AKAZE.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#getdescriptorchannels/1","title":"OpenCV.AKAZE.getdescriptorchannels/1","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#getdescriptorsize/1","title":"OpenCV.AKAZE.getdescriptorsize/1","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#getdescriptortype/1","title":"OpenCV.AKAZE.getdescriptortype/1","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#getdiffusivity/1","title":"OpenCV.AKAZE.getdiffusivity/1","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#getnoctavelayers/1","title":"OpenCV.AKAZE.getnoctavelayers/1","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#getnoctaves/1","title":"OpenCV.AKAZE.getnoctaves/1","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#getthreshold/1","title":"OpenCV.AKAZE.getthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#setdescriptorchannels/2","title":"OpenCV.AKAZE.setdescriptorchannels/2","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#setdescriptorsize/2","title":"OpenCV.AKAZE.setdescriptorsize/2","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#setdescriptortype/2","title":"OpenCV.AKAZE.setdescriptortype/2","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#setdiffusivity/2","title":"OpenCV.AKAZE.setdiffusivity/2","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#setnoctavelayers/2","title":"OpenCV.AKAZE.setnoctavelayers/2","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#setnoctaves/2","title":"OpenCV.AKAZE.setnoctaves/2","type":"function"},{"doc":"","ref":"OpenCV.AKAZE.html#setthreshold/2","title":"OpenCV.AKAZE.setthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.AffineFeature.html","title":"OpenCV.AffineFeature","type":"module"},{"doc":"","ref":"OpenCV.AffineFeature.html#create/1","title":"OpenCV.AffineFeature.create/1","type":"function"},{"doc":"backend . maxTilt . minTilt . tiltStep . rotateStepBase . maxTilt : int minTilt : int tiltStep : float rotateStepBase : float Python prototype (for reference): create ( backend [ , maxTilt [ , minTilt [ , tiltStep [ , rotateStepBase ] ] ] ] ) -&gt; retval","ref":"OpenCV.AffineFeature.html#create/2","title":"OpenCV.AffineFeature.create/2","type":"function"},{"doc":"","ref":"OpenCV.AffineFeature.html#getdefaultname/1","title":"OpenCV.AffineFeature.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.AffineFeature.html#getviewparams/3","title":"OpenCV.AffineFeature.getviewparams/3","type":"function"},{"doc":"","ref":"OpenCV.AffineFeature.html#setviewparams/3","title":"OpenCV.AffineFeature.setviewparams/3","type":"function"},{"doc":"","ref":"OpenCV.AgastFeatureDetector.html","title":"OpenCV.AgastFeatureDetector","type":"module"},{"doc":"","ref":"OpenCV.AgastFeatureDetector.html#create/0","title":"OpenCV.AgastFeatureDetector.create/0","type":"function"},{"doc":"threshold : int nonmaxSuppression : bool type : AgastFeatureDetector_DetectorType Python prototype (for reference): create ( [ , threshold [ , nonmaxSuppression [ , type ] ] ] ) -&gt; retval","ref":"OpenCV.AgastFeatureDetector.html#create/1","title":"OpenCV.AgastFeatureDetector.create/1","type":"function"},{"doc":"","ref":"OpenCV.AgastFeatureDetector.html#getdefaultname/1","title":"OpenCV.AgastFeatureDetector.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.AgastFeatureDetector.html#getnonmaxsuppression/1","title":"OpenCV.AgastFeatureDetector.getnonmaxsuppression/1","type":"function"},{"doc":"","ref":"OpenCV.AgastFeatureDetector.html#getthreshold/1","title":"OpenCV.AgastFeatureDetector.getthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.AgastFeatureDetector.html#gettype/1","title":"OpenCV.AgastFeatureDetector.gettype/1","type":"function"},{"doc":"","ref":"OpenCV.AgastFeatureDetector.html#setnonmaxsuppression/2","title":"OpenCV.AgastFeatureDetector.setnonmaxsuppression/2","type":"function"},{"doc":"","ref":"OpenCV.AgastFeatureDetector.html#setthreshold/2","title":"OpenCV.AgastFeatureDetector.setthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.AgastFeatureDetector.html#settype/2","title":"OpenCV.AgastFeatureDetector.settype/2","type":"function"},{"doc":"","ref":"OpenCV.Algorithm.html","title":"OpenCV.Algorithm","type":"module"},{"doc":"","ref":"OpenCV.Algorithm.html#clear/1","title":"OpenCV.Algorithm.clear/1","type":"function"},{"doc":"","ref":"OpenCV.Algorithm.html#empty/1","title":"OpenCV.Algorithm.empty/1","type":"function"},{"doc":"","ref":"OpenCV.Algorithm.html#getdefaultname/1","title":"OpenCV.Algorithm.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.Algorithm.html#read/2","title":"OpenCV.Algorithm.read/2","type":"function"},{"doc":"","ref":"OpenCV.Algorithm.html#save/2","title":"OpenCV.Algorithm.save/2","type":"function"},{"doc":"","ref":"OpenCV.Algorithm.html#write/2","title":"OpenCV.Algorithm.write/2","type":"function"},{"doc":"simplified API for language bindings Has overloading in C++ name : String Python prototype (for reference): write ( fs [ , name ] ) -&gt; None","ref":"OpenCV.Algorithm.html#write/3","title":"OpenCV.Algorithm.write/3","type":"function"},{"doc":"","ref":"OpenCV.AlignExposures.html","title":"OpenCV.AlignExposures","type":"module"},{"doc":"","ref":"OpenCV.AlignExposures.html#process/5","title":"OpenCV.AlignExposures.process/5","type":"function"},{"doc":"","ref":"OpenCV.AlignMTB.html","title":"OpenCV.AlignMTB","type":"module"},{"doc":"","ref":"OpenCV.AlignMTB.html#calculateshift/3","title":"OpenCV.AlignMTB.calculateshift/3","type":"function"},{"doc":"","ref":"OpenCV.AlignMTB.html#computebitmaps/2","title":"OpenCV.AlignMTB.computebitmaps/2","type":"function"},{"doc":"Computes median threshold and exclude bitmaps of given image. img . tb . eb . tb : UMat eb : UMat Python prototype (for reference): computeBitmaps ( img [ , tb [ , eb ] ] ) -&gt; tb , eb","ref":"OpenCV.AlignMTB.html#computebitmaps/3","title":"OpenCV.AlignMTB.computebitmaps/3","type":"function"},{"doc":"","ref":"OpenCV.AlignMTB.html#getcut/1","title":"OpenCV.AlignMTB.getcut/1","type":"function"},{"doc":"","ref":"OpenCV.AlignMTB.html#getexcluderange/1","title":"OpenCV.AlignMTB.getexcluderange/1","type":"function"},{"doc":"","ref":"OpenCV.AlignMTB.html#getmaxbits/1","title":"OpenCV.AlignMTB.getmaxbits/1","type":"function"},{"doc":"","ref":"OpenCV.AlignMTB.html#process/3","title":"OpenCV.AlignMTB.process/3","type":"function"},{"doc":"","ref":"OpenCV.AlignMTB.html#setcut/2","title":"OpenCV.AlignMTB.setcut/2","type":"function"},{"doc":"","ref":"OpenCV.AlignMTB.html#setexcluderange/2","title":"OpenCV.AlignMTB.setexcluderange/2","type":"function"},{"doc":"","ref":"OpenCV.AlignMTB.html#setmaxbits/2","title":"OpenCV.AlignMTB.setmaxbits/2","type":"function"},{"doc":"","ref":"OpenCV.AlignMTB.html#shiftmat/3","title":"OpenCV.AlignMTB.shiftmat/3","type":"function"},{"doc":"Helper function, that shift Mat filling new regions with zeros. src . dst . shift . dst : UMat Python prototype (for reference): shiftMat ( src , shift [ , dst ] ) -&gt; dst","ref":"OpenCV.AlignMTB.html#shiftmat/4","title":"OpenCV.AlignMTB.shiftmat/4","type":"function"},{"doc":"","ref":"OpenCV.AsyncArray.html","title":"OpenCV.AsyncArray","type":"module"},{"doc":"","ref":"OpenCV.AsyncArray.html#asyncarray/0","title":"OpenCV.AsyncArray.asyncarray/0","type":"function"},{"doc":"","ref":"OpenCV.AsyncArray.html#get/1","title":"OpenCV.AsyncArray.get/1","type":"function"},{"doc":"","ref":"OpenCV.AsyncArray.html#get/2","title":"OpenCV.AsyncArray.get/2","type":"function"},{"doc":"Retrieving the result with timeout dst . timeoutNs . @returns true if result is ready, false if the timeout has expired Note : Result or stored exception can be fetched only once. dst : UMat Python prototype (for reference): get ( timeoutNs [ , dst ] ) -&gt; retval , dst","ref":"OpenCV.AsyncArray.html#get/3","title":"OpenCV.AsyncArray.get/3","type":"function"},{"doc":"","ref":"OpenCV.AsyncArray.html#release/1","title":"OpenCV.AsyncArray.release/1","type":"function"},{"doc":"","ref":"OpenCV.AsyncArray.html#valid/1","title":"OpenCV.AsyncArray.valid/1","type":"function"},{"doc":"","ref":"OpenCV.AsyncArray.html#wait_for/2","title":"OpenCV.AsyncArray.wait_for/2","type":"function"},{"doc":"","ref":"OpenCV.BFMatcher.html","title":"OpenCV.BFMatcher","type":"module"},{"doc":"","ref":"OpenCV.BFMatcher.html#bfmatcher/0","title":"OpenCV.BFMatcher.bfmatcher/0","type":"function"},{"doc":"Brute-force matcher constructor (obsolete). Please use BFMatcher.create() normType : int crossCheck : bool Python prototype (for reference): BFMatcher ( [ , normType [ , crossCheck ] ] ) -&gt; &lt; BFMatcher object &gt;","ref":"OpenCV.BFMatcher.html#bfmatcher/1","title":"OpenCV.BFMatcher.bfmatcher/1","type":"function"},{"doc":"","ref":"OpenCV.BFMatcher.html#create/0","title":"OpenCV.BFMatcher.create/0","type":"function"},{"doc":"Brute-force matcher create method. normType . preferable choices for SIFT and SURF descriptors, NORM_HAMMING should be used with ORB, BRISK and BRIEF, NORM_HAMMING2 should be used with ORB when WTA_K==3 or 4 (see ORB::ORB constructor description). crossCheck . nearest neighbors for each query descriptor. If crossCheck==true, then the knnMatch() method with k=1 will only return pairs (i,j) such that for i-th query descriptor the j-th descriptor in the matcher's collection is the nearest and vice versa, i.e. the BFMatcher will only return consistent pairs. Such technique usually produces best results with minimal number of outliers when there are enough matches. This is alternative to the ratio test, used by D. Lowe in SIFT paper. normType : int crossCheck : bool Python prototype (for reference): create ( [ , normType [ , crossCheck ] ] ) -&gt; retval","ref":"OpenCV.BFMatcher.html#create/1","title":"OpenCV.BFMatcher.create/1","type":"function"},{"doc":"","ref":"OpenCV.BOWImgDescriptorExtractor.html","title":"OpenCV.BOWImgDescriptorExtractor","type":"module"},{"doc":"","ref":"OpenCV.BOWImgDescriptorExtractor.html#bowimgdescriptorextractor/2","title":"OpenCV.BOWImgDescriptorExtractor.bowimgdescriptorextractor/2","type":"function"},{"doc":"","ref":"OpenCV.BOWImgDescriptorExtractor.html#compute/3","title":"OpenCV.BOWImgDescriptorExtractor.compute/3","type":"function"},{"doc":"Has overloading in C++ keypointDescriptors . imgDescriptor . pointIdxsOfClusters . pointIdxsOfClusters[i] are keypoint indices that belong to the i -th cluster (word of vocabulary) returned if it is non-zero. imgDescriptor : Mat Python prototype (for reference): compute ( image , keypoints [ , imgDescriptor ] ) -&gt; imgDescriptor","ref":"OpenCV.BOWImgDescriptorExtractor.html#compute/4","title":"OpenCV.BOWImgDescriptorExtractor.compute/4","type":"function"},{"doc":"","ref":"OpenCV.BOWImgDescriptorExtractor.html#descriptorsize/1","title":"OpenCV.BOWImgDescriptorExtractor.descriptorsize/1","type":"function"},{"doc":"","ref":"OpenCV.BOWImgDescriptorExtractor.html#descriptortype/1","title":"OpenCV.BOWImgDescriptorExtractor.descriptortype/1","type":"function"},{"doc":"","ref":"OpenCV.BOWImgDescriptorExtractor.html#getvocabulary/1","title":"OpenCV.BOWImgDescriptorExtractor.getvocabulary/1","type":"function"},{"doc":"","ref":"OpenCV.BOWImgDescriptorExtractor.html#setvocabulary/2","title":"OpenCV.BOWImgDescriptorExtractor.setvocabulary/2","type":"function"},{"doc":"","ref":"OpenCV.BOWKMeansTrainer.html","title":"OpenCV.BOWKMeansTrainer","type":"module"},{"doc":"","ref":"OpenCV.BOWKMeansTrainer.html#bowkmeanstrainer/1","title":"OpenCV.BOWKMeansTrainer.bowkmeanstrainer/1","type":"function"},{"doc":"The constructor. @see cv::kmeans termcrit : TermCriteria attempts : int flags : int Python prototype (for reference): BOWKMeansTrainer ( clusterCount [ , termcrit [ , attempts [ , flags ] ] ] ) -&gt; &lt; BOWKMeansTrainer object &gt;","ref":"OpenCV.BOWKMeansTrainer.html#bowkmeanstrainer/2","title":"OpenCV.BOWKMeansTrainer.bowkmeanstrainer/2","type":"function"},{"doc":"","ref":"OpenCV.BOWKMeansTrainer.html#cluster/2","title":"OpenCV.BOWKMeansTrainer.cluster/2","type":"function"},{"doc":"","ref":"OpenCV.BOWTrainer.html","title":"OpenCV.BOWTrainer","type":"module"},{"doc":"","ref":"OpenCV.BOWTrainer.html#add/2","title":"OpenCV.BOWTrainer.add/2","type":"function"},{"doc":"","ref":"OpenCV.BOWTrainer.html#clear/1","title":"OpenCV.BOWTrainer.clear/1","type":"function"},{"doc":"","ref":"OpenCV.BOWTrainer.html#cluster/2","title":"OpenCV.BOWTrainer.cluster/2","type":"function"},{"doc":"","ref":"OpenCV.BOWTrainer.html#descriptorscount/1","title":"OpenCV.BOWTrainer.descriptorscount/1","type":"function"},{"doc":"","ref":"OpenCV.BOWTrainer.html#getdescriptors/1","title":"OpenCV.BOWTrainer.getdescriptors/1","type":"function"},{"doc":"","ref":"OpenCV.BRISK.html","title":"OpenCV.BRISK","type":"module"},{"doc":"","ref":"OpenCV.BRISK.html#create/0","title":"OpenCV.BRISK.create/0","type":"function"},{"doc":"","ref":"OpenCV.BRISK.html#create/1","title":"OpenCV.BRISK.create/1","type":"function"},{"doc":"","ref":"OpenCV.BRISK.html#create/2","title":"OpenCV.BRISK.create/2","type":"function"},{"doc":"","ref":"OpenCV.BRISK.html#create/3","title":"OpenCV.BRISK.create/3","type":"function"},{"doc":"","ref":"OpenCV.BRISK.html#create/4","title":"OpenCV.BRISK.create/4","type":"function"},{"doc":"The BRISK constructor for a custom pattern, detection threshold and octaves thresh . octaves . radiusList . keypoint scale 1). numberList . size as radiusList.. dMax . scale 1). dMin . keypoint scale 1). indexChange . dMax : float dMin : float indexChange : vector_int Python prototype (for reference): create ( thresh , octaves , radiusList , numberList [ , dMax [ , dMin [ , indexChange ] ] ] ) -&gt; retval","ref":"OpenCV.BRISK.html#create/5","title":"OpenCV.BRISK.create/5","type":"function"},{"doc":"","ref":"OpenCV.BRISK.html#getdefaultname/1","title":"OpenCV.BRISK.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.BRISK.html#getoctaves/1","title":"OpenCV.BRISK.getoctaves/1","type":"function"},{"doc":"","ref":"OpenCV.BRISK.html#getthreshold/1","title":"OpenCV.BRISK.getthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.BRISK.html#setoctaves/2","title":"OpenCV.BRISK.setoctaves/2","type":"function"},{"doc":"","ref":"OpenCV.BRISK.html#setthreshold/2","title":"OpenCV.BRISK.setthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractor.html","title":"OpenCV.BackgroundSubtractor","type":"module"},{"doc":"","ref":"OpenCV.BackgroundSubtractor.html#apply/2","title":"OpenCV.BackgroundSubtractor.apply/2","type":"function"},{"doc":"Computes a foreground mask. image . fgmask . learningRate . learnt. Negative parameter value makes the algorithm to use some automatically chosen learning rate. 0 means that the background model is not updated at all, 1 means that the background model is completely reinitialized from the last frame. fgmask : UMat learningRate : double Python prototype (for reference): apply ( image [ , fgmask [ , learningRate ] ] ) -&gt; fgmask","ref":"OpenCV.BackgroundSubtractor.html#apply/3","title":"OpenCV.BackgroundSubtractor.apply/3","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractor.html#getbackgroundimage/1","title":"OpenCV.BackgroundSubtractor.getbackgroundimage/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html","title":"OpenCV.BackgroundSubtractorKNN","type":"module"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#getdetectshadows/1","title":"OpenCV.BackgroundSubtractorKNN.getdetectshadows/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#getdist2threshold/1","title":"OpenCV.BackgroundSubtractorKNN.getdist2threshold/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#gethistory/1","title":"OpenCV.BackgroundSubtractorKNN.gethistory/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#getknnsamples/1","title":"OpenCV.BackgroundSubtractorKNN.getknnsamples/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#getnsamples/1","title":"OpenCV.BackgroundSubtractorKNN.getnsamples/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#getshadowthreshold/1","title":"OpenCV.BackgroundSubtractorKNN.getshadowthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#getshadowvalue/1","title":"OpenCV.BackgroundSubtractorKNN.getshadowvalue/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#setdetectshadows/2","title":"OpenCV.BackgroundSubtractorKNN.setdetectshadows/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#setdist2threshold/2","title":"OpenCV.BackgroundSubtractorKNN.setdist2threshold/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#sethistory/2","title":"OpenCV.BackgroundSubtractorKNN.sethistory/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#setknnsamples/2","title":"OpenCV.BackgroundSubtractorKNN.setknnsamples/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#setnsamples/2","title":"OpenCV.BackgroundSubtractorKNN.setnsamples/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#setshadowthreshold/2","title":"OpenCV.BackgroundSubtractorKNN.setshadowthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorKNN.html#setshadowvalue/2","title":"OpenCV.BackgroundSubtractorKNN.setshadowvalue/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html","title":"OpenCV.BackgroundSubtractorMOG2","type":"module"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#apply/2","title":"OpenCV.BackgroundSubtractorMOG2.apply/2","type":"function"},{"doc":"Computes a foreground mask. image . fgmask . learningRate . learnt. Negative parameter value makes the algorithm to use some automatically chosen learning rate. 0 means that the background model is not updated at all, 1 means that the background model is completely reinitialized from the last frame. fgmask : UMat learningRate : double Python prototype (for reference): apply ( image [ , fgmask [ , learningRate ] ] ) -&gt; fgmask","ref":"OpenCV.BackgroundSubtractorMOG2.html#apply/3","title":"OpenCV.BackgroundSubtractorMOG2.apply/3","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#getbackgroundratio/1","title":"OpenCV.BackgroundSubtractorMOG2.getbackgroundratio/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#getcomplexityreductionthreshold/1","title":"OpenCV.BackgroundSubtractorMOG2.getcomplexityreductionthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#getdetectshadows/1","title":"OpenCV.BackgroundSubtractorMOG2.getdetectshadows/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#gethistory/1","title":"OpenCV.BackgroundSubtractorMOG2.gethistory/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#getnmixtures/1","title":"OpenCV.BackgroundSubtractorMOG2.getnmixtures/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#getshadowthreshold/1","title":"OpenCV.BackgroundSubtractorMOG2.getshadowthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#getshadowvalue/1","title":"OpenCV.BackgroundSubtractorMOG2.getshadowvalue/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#getvarinit/1","title":"OpenCV.BackgroundSubtractorMOG2.getvarinit/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#getvarmax/1","title":"OpenCV.BackgroundSubtractorMOG2.getvarmax/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#getvarmin/1","title":"OpenCV.BackgroundSubtractorMOG2.getvarmin/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#getvarthreshold/1","title":"OpenCV.BackgroundSubtractorMOG2.getvarthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#getvarthresholdgen/1","title":"OpenCV.BackgroundSubtractorMOG2.getvarthresholdgen/1","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#setbackgroundratio/2","title":"OpenCV.BackgroundSubtractorMOG2.setbackgroundratio/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#setcomplexityreductionthreshold/2","title":"OpenCV.BackgroundSubtractorMOG2.setcomplexityreductionthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#setdetectshadows/2","title":"OpenCV.BackgroundSubtractorMOG2.setdetectshadows/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#sethistory/2","title":"OpenCV.BackgroundSubtractorMOG2.sethistory/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#setnmixtures/2","title":"OpenCV.BackgroundSubtractorMOG2.setnmixtures/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#setshadowthreshold/2","title":"OpenCV.BackgroundSubtractorMOG2.setshadowthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#setshadowvalue/2","title":"OpenCV.BackgroundSubtractorMOG2.setshadowvalue/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#setvarinit/2","title":"OpenCV.BackgroundSubtractorMOG2.setvarinit/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#setvarmax/2","title":"OpenCV.BackgroundSubtractorMOG2.setvarmax/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#setvarmin/2","title":"OpenCV.BackgroundSubtractorMOG2.setvarmin/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#setvarthreshold/2","title":"OpenCV.BackgroundSubtractorMOG2.setvarthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.BackgroundSubtractorMOG2.html#setvarthresholdgen/2","title":"OpenCV.BackgroundSubtractorMOG2.setvarthresholdgen/2","type":"function"},{"doc":"","ref":"OpenCV.BaseCascadeClassifier.html","title":"OpenCV.BaseCascadeClassifier","type":"module"},{"doc":"","ref":"OpenCV.CLAHE.html","title":"OpenCV.CLAHE","type":"module"},{"doc":"","ref":"OpenCV.CLAHE.html#apply/2","title":"OpenCV.CLAHE.apply/2","type":"function"},{"doc":"Equalizes the histogram of a grayscale image using Contrast Limited Adaptive Histogram Equalization. src . dst . dst : UMat Python prototype (for reference): apply ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.CLAHE.html#apply/3","title":"OpenCV.CLAHE.apply/3","type":"function"},{"doc":"","ref":"OpenCV.CLAHE.html#collectgarbage/1","title":"OpenCV.CLAHE.collectgarbage/1","type":"function"},{"doc":"","ref":"OpenCV.CLAHE.html#getcliplimit/1","title":"OpenCV.CLAHE.getcliplimit/1","type":"function"},{"doc":"","ref":"OpenCV.CLAHE.html#gettilesgridsize/1","title":"OpenCV.CLAHE.gettilesgridsize/1","type":"function"},{"doc":"","ref":"OpenCV.CLAHE.html#setcliplimit/2","title":"OpenCV.CLAHE.setcliplimit/2","type":"function"},{"doc":"","ref":"OpenCV.CLAHE.html#settilesgridsize/2","title":"OpenCV.CLAHE.settilesgridsize/2","type":"function"},{"doc":"","ref":"OpenCV.CalibrateCRF.html","title":"OpenCV.CalibrateCRF","type":"module"},{"doc":"","ref":"OpenCV.CalibrateCRF.html#process/3","title":"OpenCV.CalibrateCRF.process/3","type":"function"},{"doc":"Recovers inverse camera response. src . dst . times . dst : UMat Python prototype (for reference): process ( src , times [ , dst ] ) -&gt; dst","ref":"OpenCV.CalibrateCRF.html#process/4","title":"OpenCV.CalibrateCRF.process/4","type":"function"},{"doc":"","ref":"OpenCV.CalibrateDebevec.html","title":"OpenCV.CalibrateDebevec","type":"module"},{"doc":"","ref":"OpenCV.CalibrateDebevec.html#getlambda/1","title":"OpenCV.CalibrateDebevec.getlambda/1","type":"function"},{"doc":"","ref":"OpenCV.CalibrateDebevec.html#getrandom/1","title":"OpenCV.CalibrateDebevec.getrandom/1","type":"function"},{"doc":"","ref":"OpenCV.CalibrateDebevec.html#getsamples/1","title":"OpenCV.CalibrateDebevec.getsamples/1","type":"function"},{"doc":"","ref":"OpenCV.CalibrateDebevec.html#setlambda/2","title":"OpenCV.CalibrateDebevec.setlambda/2","type":"function"},{"doc":"","ref":"OpenCV.CalibrateDebevec.html#setrandom/2","title":"OpenCV.CalibrateDebevec.setrandom/2","type":"function"},{"doc":"","ref":"OpenCV.CalibrateDebevec.html#setsamples/2","title":"OpenCV.CalibrateDebevec.setsamples/2","type":"function"},{"doc":"","ref":"OpenCV.CalibrateRobertson.html","title":"OpenCV.CalibrateRobertson","type":"module"},{"doc":"","ref":"OpenCV.CalibrateRobertson.html#getmaxiter/1","title":"OpenCV.CalibrateRobertson.getmaxiter/1","type":"function"},{"doc":"","ref":"OpenCV.CalibrateRobertson.html#getradiance/1","title":"OpenCV.CalibrateRobertson.getradiance/1","type":"function"},{"doc":"","ref":"OpenCV.CalibrateRobertson.html#getthreshold/1","title":"OpenCV.CalibrateRobertson.getthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.CalibrateRobertson.html#setmaxiter/2","title":"OpenCV.CalibrateRobertson.setmaxiter/2","type":"function"},{"doc":"","ref":"OpenCV.CalibrateRobertson.html#setthreshold/2","title":"OpenCV.CalibrateRobertson.setthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.CascadeClassifier.html","title":"OpenCV.CascadeClassifier","type":"module"},{"doc":"","ref":"OpenCV.CascadeClassifier.html#cascadeclassifier/0","title":"OpenCV.CascadeClassifier.cascadeclassifier/0","type":"function"},{"doc":"","ref":"OpenCV.CascadeClassifier.html#cascadeclassifier/1","title":"OpenCV.CascadeClassifier.cascadeclassifier/1","type":"function"},{"doc":"","ref":"OpenCV.CascadeClassifier.html#convert/2","title":"OpenCV.CascadeClassifier.convert/2","type":"function"},{"doc":"","ref":"OpenCV.CascadeClassifier.html#detectmultiscale/2","title":"OpenCV.CascadeClassifier.detectmultiscale/2","type":"function"},{"doc":"Detects objects of different sizes in the input image. The detected objects are returned as a list of rectangles. image . objects . rectangles may be partially outside the original image. scaleFactor . minNeighbors . to retain it. flags . cvHaarDetectObjects. It is not used for a new cascade. minSize . maxSize . The function is parallelized with the TBB library. Note : (Python) A face detection example using cascade classifiers can be found at opencv_source_code/samples/python/facedetect.py scaleFactor : double minNeighbors : int flags : int minSize : Size maxSize : Size Python prototype (for reference): detectMultiScale ( image [ , scaleFactor [ , minNeighbors [ , flags [ , minSize [ , maxSize ] ] ] ] ] ) -&gt; objects","ref":"OpenCV.CascadeClassifier.html#detectmultiscale/3","title":"OpenCV.CascadeClassifier.detectmultiscale/3","type":"function"},{"doc":"","ref":"OpenCV.CascadeClassifier.html#detectmultiscale2/2","title":"OpenCV.CascadeClassifier.detectmultiscale2/2","type":"function"},{"doc":"Has overloading in C++ image . objects . rectangles may be partially outside the original image. numDetections . of detections is the number of neighboring positively classified rectangles that were joined together to form the object. scaleFactor . minNeighbors . to retain it. flags . cvHaarDetectObjects. It is not used for a new cascade. minSize . maxSize . scaleFactor : double minNeighbors : int flags : int minSize : Size maxSize : Size Python prototype (for reference): detectMultiScale2 ( image [ , scaleFactor [ , minNeighbors [ , flags [ , minSize [ , maxSize ] ] ] ] ] ) -&gt; objects , numDetections","ref":"OpenCV.CascadeClassifier.html#detectmultiscale2/3","title":"OpenCV.CascadeClassifier.detectmultiscale2/3","type":"function"},{"doc":"","ref":"OpenCV.CascadeClassifier.html#detectmultiscale3/2","title":"OpenCV.CascadeClassifier.detectmultiscale3/2","type":"function"},{"doc":"Has overloading in C++ This function allows you to retrieve the final stage decision certainty of classification. For this, one needs to set outputRejectLevels on true and provide the rejectLevels and levelWeights parameter. For each resulting detection, levelWeights will then contain the certainty of classification at the final stage. This value can then be used to separate strong from weaker classifications. A code sample on how to use it efficiently can be found below: Mat img ; vector &lt; double &gt; weights ; vector &lt; int &gt; levels ; vector &lt; Rect &gt; detections ; CascadeClassifier model ( &quot;/path/to/your/model.xml&quot; ) ; model . detectMultiScale ( img , detections , levels , weights , 1.1 , 3 , 0 , Size ( ) , Size ( ) , true ) ; cerr &lt;&lt; &quot;Detection &quot; &lt;&lt; detections [ 0 ] &lt;&lt; &quot; with weight &quot; &lt;&lt; weights [ 0 ] &lt;&lt; endl ; scaleFactor : double minNeighbors : int flags : int minSize : Size maxSize : Size outputRejectLevels : bool Python prototype (for reference): detectMultiScale3 ( image [ , scaleFactor [ , minNeighbors [ , flags [ , minSize [ , maxSize [ , outputRejectLevels ] ] ] ] ] ] ) -&gt; objects , rejectLevels , levelWeights","ref":"OpenCV.CascadeClassifier.html#detectmultiscale3/3","title":"OpenCV.CascadeClassifier.detectmultiscale3/3","type":"function"},{"doc":"","ref":"OpenCV.CascadeClassifier.html#empty/1","title":"OpenCV.CascadeClassifier.empty/1","type":"function"},{"doc":"","ref":"OpenCV.CascadeClassifier.html#getfeaturetype/1","title":"OpenCV.CascadeClassifier.getfeaturetype/1","type":"function"},{"doc":"","ref":"OpenCV.CascadeClassifier.html#getoriginalwindowsize/1","title":"OpenCV.CascadeClassifier.getoriginalwindowsize/1","type":"function"},{"doc":"","ref":"OpenCV.CascadeClassifier.html#isoldformatcascade/1","title":"OpenCV.CascadeClassifier.isoldformatcascade/1","type":"function"},{"doc":"","ref":"OpenCV.CascadeClassifier.html#load/2","title":"OpenCV.CascadeClassifier.load/2","type":"function"},{"doc":"","ref":"OpenCV.CascadeClassifier.html#read/2","title":"OpenCV.CascadeClassifier.read/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html","title":"OpenCV.CirclesGridFinderParameters","type":"module"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#circlesgridfinderparameters/0","title":"OpenCV.CirclesGridFinderParameters.circlesgridfinderparameters/0","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#convexhullfactor/1","title":"OpenCV.CirclesGridFinderParameters.convexhullfactor/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#densityneighborhoodsize/1","title":"OpenCV.CirclesGridFinderParameters.densityneighborhoodsize/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#edgegain/1","title":"OpenCV.CirclesGridFinderParameters.edgegain/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#edgepenalty/1","title":"OpenCV.CirclesGridFinderParameters.edgepenalty/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#existingvertexgain/1","title":"OpenCV.CirclesGridFinderParameters.existingvertexgain/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#keypointscale/1","title":"OpenCV.CirclesGridFinderParameters.keypointscale/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#kmeansattempts/1","title":"OpenCV.CirclesGridFinderParameters.kmeansattempts/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#maxrectifieddistance/1","title":"OpenCV.CirclesGridFinderParameters.maxrectifieddistance/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#mindensity/1","title":"OpenCV.CirclesGridFinderParameters.mindensity/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#mindistancetoaddkeypoint/1","title":"OpenCV.CirclesGridFinderParameters.mindistancetoaddkeypoint/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#mingraphconfidence/1","title":"OpenCV.CirclesGridFinderParameters.mingraphconfidence/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#minrngedgeswitchdist/1","title":"OpenCV.CirclesGridFinderParameters.minrngedgeswitchdist/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_convexhullfactor/2","title":"OpenCV.CirclesGridFinderParameters.set_convexhullfactor/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_densityneighborhoodsize/2","title":"OpenCV.CirclesGridFinderParameters.set_densityneighborhoodsize/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_edgegain/2","title":"OpenCV.CirclesGridFinderParameters.set_edgegain/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_edgepenalty/2","title":"OpenCV.CirclesGridFinderParameters.set_edgepenalty/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_existingvertexgain/2","title":"OpenCV.CirclesGridFinderParameters.set_existingvertexgain/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_keypointscale/2","title":"OpenCV.CirclesGridFinderParameters.set_keypointscale/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_kmeansattempts/2","title":"OpenCV.CirclesGridFinderParameters.set_kmeansattempts/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_maxrectifieddistance/2","title":"OpenCV.CirclesGridFinderParameters.set_maxrectifieddistance/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_mindensity/2","title":"OpenCV.CirclesGridFinderParameters.set_mindensity/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_mindistancetoaddkeypoint/2","title":"OpenCV.CirclesGridFinderParameters.set_mindistancetoaddkeypoint/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_mingraphconfidence/2","title":"OpenCV.CirclesGridFinderParameters.set_mingraphconfidence/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_minrngedgeswitchdist/2","title":"OpenCV.CirclesGridFinderParameters.set_minrngedgeswitchdist/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_squaresize/2","title":"OpenCV.CirclesGridFinderParameters.set_squaresize/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_vertexgain/2","title":"OpenCV.CirclesGridFinderParameters.set_vertexgain/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#set_vertexpenalty/2","title":"OpenCV.CirclesGridFinderParameters.set_vertexpenalty/2","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#squaresize/1","title":"OpenCV.CirclesGridFinderParameters.squaresize/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#vertexgain/1","title":"OpenCV.CirclesGridFinderParameters.vertexgain/1","type":"function"},{"doc":"","ref":"OpenCV.CirclesGridFinderParameters.html#vertexpenalty/1","title":"OpenCV.CirclesGridFinderParameters.vertexpenalty/1","type":"function"},{"doc":"","ref":"OpenCV.CudaBufferPool.html","title":"OpenCV.CudaBufferPool","type":"module"},{"doc":"","ref":"OpenCV.CudaBufferPool.html#getallocator/1","title":"OpenCV.CudaBufferPool.getallocator/1","type":"function"},{"doc":"","ref":"OpenCV.CudaBufferPool.html#getbuffer/3","title":"OpenCV.CudaBufferPool.getbuffer/3","type":"function"},{"doc":"","ref":"OpenCV.CudaBufferPool.html#getbuffer/4","title":"OpenCV.CudaBufferPool.getbuffer/4","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html","title":"OpenCV.CudaDeviceInfo","type":"module"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#asyncenginecount/1","title":"OpenCV.CudaDeviceInfo.asyncenginecount/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#canmaphostmemory/1","title":"OpenCV.CudaDeviceInfo.canmaphostmemory/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#clockrate/1","title":"OpenCV.CudaDeviceInfo.clockrate/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#computemode/1","title":"OpenCV.CudaDeviceInfo.computemode/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#concurrentkernels/1","title":"OpenCV.CudaDeviceInfo.concurrentkernels/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#cuda_deviceinfo/0","title":"OpenCV.CudaDeviceInfo.cuda_deviceinfo/0","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#cuda_deviceinfo/1","title":"OpenCV.CudaDeviceInfo.cuda_deviceinfo/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#deviceid/1","title":"OpenCV.CudaDeviceInfo.deviceid/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#eccenabled/1","title":"OpenCV.CudaDeviceInfo.eccenabled/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#freememory/1","title":"OpenCV.CudaDeviceInfo.freememory/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#integrated/1","title":"OpenCV.CudaDeviceInfo.integrated/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#iscompatible/1","title":"OpenCV.CudaDeviceInfo.iscompatible/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#kernelexectimeoutenabled/1","title":"OpenCV.CudaDeviceInfo.kernelexectimeoutenabled/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#l2cachesize/1","title":"OpenCV.CudaDeviceInfo.l2cachesize/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#majorversion/1","title":"OpenCV.CudaDeviceInfo.majorversion/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxgridsize/1","title":"OpenCV.CudaDeviceInfo.maxgridsize/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxsurface1d/1","title":"OpenCV.CudaDeviceInfo.maxsurface1d/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxsurface1dlayered/1","title":"OpenCV.CudaDeviceInfo.maxsurface1dlayered/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxsurface2d/1","title":"OpenCV.CudaDeviceInfo.maxsurface2d/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxsurface2dlayered/1","title":"OpenCV.CudaDeviceInfo.maxsurface2dlayered/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxsurface3d/1","title":"OpenCV.CudaDeviceInfo.maxsurface3d/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxsurfacecubemap/1","title":"OpenCV.CudaDeviceInfo.maxsurfacecubemap/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxsurfacecubemaplayered/1","title":"OpenCV.CudaDeviceInfo.maxsurfacecubemaplayered/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxtexture1d/1","title":"OpenCV.CudaDeviceInfo.maxtexture1d/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxtexture1dlayered/1","title":"OpenCV.CudaDeviceInfo.maxtexture1dlayered/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxtexture1dlinear/1","title":"OpenCV.CudaDeviceInfo.maxtexture1dlinear/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxtexture1dmipmap/1","title":"OpenCV.CudaDeviceInfo.maxtexture1dmipmap/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxtexture2d/1","title":"OpenCV.CudaDeviceInfo.maxtexture2d/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxtexture2dgather/1","title":"OpenCV.CudaDeviceInfo.maxtexture2dgather/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxtexture2dlayered/1","title":"OpenCV.CudaDeviceInfo.maxtexture2dlayered/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxtexture2dlinear/1","title":"OpenCV.CudaDeviceInfo.maxtexture2dlinear/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxtexture2dmipmap/1","title":"OpenCV.CudaDeviceInfo.maxtexture2dmipmap/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxtexture3d/1","title":"OpenCV.CudaDeviceInfo.maxtexture3d/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxtexturecubemap/1","title":"OpenCV.CudaDeviceInfo.maxtexturecubemap/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxtexturecubemaplayered/1","title":"OpenCV.CudaDeviceInfo.maxtexturecubemaplayered/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxthreadsdim/1","title":"OpenCV.CudaDeviceInfo.maxthreadsdim/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxthreadsperblock/1","title":"OpenCV.CudaDeviceInfo.maxthreadsperblock/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#maxthreadspermultiprocessor/1","title":"OpenCV.CudaDeviceInfo.maxthreadspermultiprocessor/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#memorybuswidth/1","title":"OpenCV.CudaDeviceInfo.memorybuswidth/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#memoryclockrate/1","title":"OpenCV.CudaDeviceInfo.memoryclockrate/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#mempitch/1","title":"OpenCV.CudaDeviceInfo.mempitch/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#minorversion/1","title":"OpenCV.CudaDeviceInfo.minorversion/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#multiprocessorcount/1","title":"OpenCV.CudaDeviceInfo.multiprocessorcount/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#pcibusid/1","title":"OpenCV.CudaDeviceInfo.pcibusid/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#pcideviceid/1","title":"OpenCV.CudaDeviceInfo.pcideviceid/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#pcidomainid/1","title":"OpenCV.CudaDeviceInfo.pcidomainid/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#querymemory/3","title":"OpenCV.CudaDeviceInfo.querymemory/3","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#regsperblock/1","title":"OpenCV.CudaDeviceInfo.regsperblock/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#sharedmemperblock/1","title":"OpenCV.CudaDeviceInfo.sharedmemperblock/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#surfacealignment/1","title":"OpenCV.CudaDeviceInfo.surfacealignment/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#tccdriver/1","title":"OpenCV.CudaDeviceInfo.tccdriver/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#texturealignment/1","title":"OpenCV.CudaDeviceInfo.texturealignment/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#texturepitchalignment/1","title":"OpenCV.CudaDeviceInfo.texturepitchalignment/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#totalconstmem/1","title":"OpenCV.CudaDeviceInfo.totalconstmem/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#totalglobalmem/1","title":"OpenCV.CudaDeviceInfo.totalglobalmem/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#totalmemory/1","title":"OpenCV.CudaDeviceInfo.totalmemory/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#unifiedaddressing/1","title":"OpenCV.CudaDeviceInfo.unifiedaddressing/1","type":"function"},{"doc":"","ref":"OpenCV.CudaDeviceInfo.html#warpsize/1","title":"OpenCV.CudaDeviceInfo.warpsize/1","type":"function"},{"doc":"","ref":"OpenCV.CudaEvent.html","title":"OpenCV.CudaEvent","type":"module"},{"doc":"","ref":"OpenCV.CudaEvent.html#cuda_event/0","title":"OpenCV.CudaEvent.cuda_event/0","type":"function"},{"doc":"flags : Event_CreateFlags Python prototype (for reference): Event ( [ , flags ] ) -&gt; &lt; cuda_Event object &gt;","ref":"OpenCV.CudaEvent.html#cuda_event/1","title":"OpenCV.CudaEvent.cuda_event/1","type":"function"},{"doc":"","ref":"OpenCV.CudaEvent.html#elapsedtime/2","title":"OpenCV.CudaEvent.elapsedtime/2","type":"function"},{"doc":"","ref":"OpenCV.CudaEvent.html#queryifcomplete/1","title":"OpenCV.CudaEvent.queryifcomplete/1","type":"function"},{"doc":"","ref":"OpenCV.CudaEvent.html#record/1","title":"OpenCV.CudaEvent.record/1","type":"function"},{"doc":"","ref":"OpenCV.CudaEvent.html#waitforcompletion/1","title":"OpenCV.CudaEvent.waitforcompletion/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuData.html","title":"OpenCV.CudaGpuData","type":"module"},{"doc":"","ref":"OpenCV.CudaGpuMat.html","title":"OpenCV.CudaGpuMat","type":"module"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#adjustroi/5","title":"OpenCV.CudaGpuMat.adjustroi/5","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#assignto/2","title":"OpenCV.CudaGpuMat.assignto/2","type":"function"},{"doc":"type : int Python prototype (for reference): assignTo ( m [ , type ] ) -&gt; None","ref":"OpenCV.CudaGpuMat.html#assignto/3","title":"OpenCV.CudaGpuMat.assignto/3","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#channels/1","title":"OpenCV.CudaGpuMat.channels/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#clone/1","title":"OpenCV.CudaGpuMat.clone/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#col/2","title":"OpenCV.CudaGpuMat.col/2","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#colrange/2","title":"OpenCV.CudaGpuMat.colrange/2","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#colrange/3","title":"OpenCV.CudaGpuMat.colrange/3","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#convertto/3","title":"OpenCV.CudaGpuMat.convertto/3","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#convertto/4","title":"OpenCV.CudaGpuMat.convertto/4","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#convertto/5","title":"OpenCV.CudaGpuMat.convertto/5","type":"function"},{"doc":"dst : UMat Python prototype (for reference): convertTo ( rtype , alpha , beta , stream [ , dst ] ) -&gt; dst","ref":"OpenCV.CudaGpuMat.html#convertto/6","title":"OpenCV.CudaGpuMat.convertto/6","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#copyto/3","title":"OpenCV.CudaGpuMat.copyto/3","type":"function"},{"doc":"dst : UMat Python prototype (for reference): copyTo ( mask , stream [ , dst ] ) -&gt; dst","ref":"OpenCV.CudaGpuMat.html#copyto/4","title":"OpenCV.CudaGpuMat.copyto/4","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#create/3","title":"OpenCV.CudaGpuMat.create/3","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#create/4","title":"OpenCV.CudaGpuMat.create/4","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#cuda_gpumat/1","title":"OpenCV.CudaGpuMat.cuda_gpumat/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#cuda_gpumat/2","title":"OpenCV.CudaGpuMat.cuda_gpumat/2","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#cuda_gpumat/3","title":"OpenCV.CudaGpuMat.cuda_gpumat/3","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#cuda_gpumat/4","title":"OpenCV.CudaGpuMat.cuda_gpumat/4","type":"function"},{"doc":"allocator : GpuMat_Allocator* Python prototype (for reference): GpuMat ( rows , cols , type , s [ , allocator ] ) -&gt; &lt; cuda_GpuMat object &gt;","ref":"OpenCV.CudaGpuMat.html#cuda_gpumat/5","title":"OpenCV.CudaGpuMat.cuda_gpumat/5","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#cudaptr/1","title":"OpenCV.CudaGpuMat.cudaptr/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#defaultallocator/0","title":"OpenCV.CudaGpuMat.defaultallocator/0","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#depth/1","title":"OpenCV.CudaGpuMat.depth/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#download/2","title":"OpenCV.CudaGpuMat.download/2","type":"function"},{"doc":"Performs data download from GpuMat (Non-Blocking call) This function copies data from device memory to host memory. As being a non-blocking call, this function may return even if the copy operation is not finished. The copy operation may be overlapped with operations in other non-default streams if \\p stream is not the default stream and \\p dst is HostMem allocated with HostMem::PAGE_LOCKED option. dst : UMat Python prototype (for reference): download ( stream [ , dst ] ) -&gt; dst","ref":"OpenCV.CudaGpuMat.html#download/3","title":"OpenCV.CudaGpuMat.download/3","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#elemsize/1","title":"OpenCV.CudaGpuMat.elemsize/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#elemsize1/1","title":"OpenCV.CudaGpuMat.elemsize1/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#empty/1","title":"OpenCV.CudaGpuMat.empty/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#iscontinuous/1","title":"OpenCV.CudaGpuMat.iscontinuous/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#locateroi/3","title":"OpenCV.CudaGpuMat.locateroi/3","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#reshape/2","title":"OpenCV.CudaGpuMat.reshape/2","type":"function"},{"doc":"rows : int Python prototype (for reference): reshape ( cn [ , rows ] ) -&gt; retval","ref":"OpenCV.CudaGpuMat.html#reshape/3","title":"OpenCV.CudaGpuMat.reshape/3","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#row/2","title":"OpenCV.CudaGpuMat.row/2","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#rowrange/2","title":"OpenCV.CudaGpuMat.rowrange/2","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#rowrange/3","title":"OpenCV.CudaGpuMat.rowrange/3","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#setdefaultallocator/1","title":"OpenCV.CudaGpuMat.setdefaultallocator/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#setto/4","title":"OpenCV.CudaGpuMat.setto/4","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#size/1","title":"OpenCV.CudaGpuMat.size/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#step/1","title":"OpenCV.CudaGpuMat.step/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#step1/1","title":"OpenCV.CudaGpuMat.step1/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#swap/2","title":"OpenCV.CudaGpuMat.swap/2","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#type/1","title":"OpenCV.CudaGpuMat.type/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#updatecontinuityflag/1","title":"OpenCV.CudaGpuMat.updatecontinuityflag/1","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMat.html#upload/3","title":"OpenCV.CudaGpuMat.upload/3","type":"function"},{"doc":"","ref":"OpenCV.CudaGpuMatAllocator.html","title":"OpenCV.CudaGpuMatAllocator","type":"module"},{"doc":"","ref":"OpenCV.CudaGpuMatND.html","title":"OpenCV.CudaGpuMatND","type":"module"},{"doc":"","ref":"OpenCV.CudaHostMem.html","title":"OpenCV.CudaHostMem","type":"module"},{"doc":"","ref":"OpenCV.CudaHostMem.html#channels/1","title":"OpenCV.CudaHostMem.channels/1","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#clone/1","title":"OpenCV.CudaHostMem.clone/1","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#create/4","title":"OpenCV.CudaHostMem.create/4","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#creatematheader/1","title":"OpenCV.CudaHostMem.creatematheader/1","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#cuda_hostmem/1","title":"OpenCV.CudaHostMem.cuda_hostmem/1","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#cuda_hostmem/2","title":"OpenCV.CudaHostMem.cuda_hostmem/2","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#cuda_hostmem/3","title":"OpenCV.CudaHostMem.cuda_hostmem/3","type":"function"},{"doc":"alloc_type : HostMem_AllocType Python prototype (for reference): HostMem ( rows , cols , type [ , alloc_type ] ) -&gt; &lt; cuda_HostMem object &gt;","ref":"OpenCV.CudaHostMem.html#cuda_hostmem/4","title":"OpenCV.CudaHostMem.cuda_hostmem/4","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#depth/1","title":"OpenCV.CudaHostMem.depth/1","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#elemsize/1","title":"OpenCV.CudaHostMem.elemsize/1","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#elemsize1/1","title":"OpenCV.CudaHostMem.elemsize1/1","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#empty/1","title":"OpenCV.CudaHostMem.empty/1","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#iscontinuous/1","title":"OpenCV.CudaHostMem.iscontinuous/1","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#reshape/2","title":"OpenCV.CudaHostMem.reshape/2","type":"function"},{"doc":"rows : int Python prototype (for reference): reshape ( cn [ , rows ] ) -&gt; retval","ref":"OpenCV.CudaHostMem.html#reshape/3","title":"OpenCV.CudaHostMem.reshape/3","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#size/1","title":"OpenCV.CudaHostMem.size/1","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#step/1","title":"OpenCV.CudaHostMem.step/1","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#step1/1","title":"OpenCV.CudaHostMem.step1/1","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#swap/2","title":"OpenCV.CudaHostMem.swap/2","type":"function"},{"doc":"","ref":"OpenCV.CudaHostMem.html#type/1","title":"OpenCV.CudaHostMem.type/1","type":"function"},{"doc":"","ref":"OpenCV.CudaStream.html","title":"OpenCV.CudaStream","type":"module"},{"doc":"","ref":"OpenCV.CudaStream.html#cuda_stream/1","title":"OpenCV.CudaStream.cuda_stream/1","type":"function"},{"doc":"","ref":"OpenCV.CudaStream.html#cudaptr/1","title":"OpenCV.CudaStream.cudaptr/1","type":"function"},{"doc":"","ref":"OpenCV.CudaStream.html#null/0","title":"OpenCV.CudaStream.null/0","type":"function"},{"doc":"","ref":"OpenCV.CudaStream.html#queryifcomplete/1","title":"OpenCV.CudaStream.queryifcomplete/1","type":"function"},{"doc":"","ref":"OpenCV.CudaStream.html#waitevent/2","title":"OpenCV.CudaStream.waitevent/2","type":"function"},{"doc":"","ref":"OpenCV.CudaStream.html#waitforcompletion/1","title":"OpenCV.CudaStream.waitforcompletion/1","type":"function"},{"doc":"","ref":"OpenCV.CudaTargetArchs.html","title":"OpenCV.CudaTargetArchs","type":"module"},{"doc":"","ref":"OpenCV.CudaTargetArchs.html#has/2","title":"OpenCV.CudaTargetArchs.has/2","type":"function"},{"doc":"","ref":"OpenCV.CudaTargetArchs.html#hasbin/2","title":"OpenCV.CudaTargetArchs.hasbin/2","type":"function"},{"doc":"","ref":"OpenCV.CudaTargetArchs.html#hasequalorgreater/2","title":"OpenCV.CudaTargetArchs.hasequalorgreater/2","type":"function"},{"doc":"","ref":"OpenCV.CudaTargetArchs.html#hasequalorgreaterbin/2","title":"OpenCV.CudaTargetArchs.hasequalorgreaterbin/2","type":"function"},{"doc":"","ref":"OpenCV.CudaTargetArchs.html#hasequalorgreaterptx/2","title":"OpenCV.CudaTargetArchs.hasequalorgreaterptx/2","type":"function"},{"doc":"","ref":"OpenCV.CudaTargetArchs.html#hasequalorlessptx/2","title":"OpenCV.CudaTargetArchs.hasequalorlessptx/2","type":"function"},{"doc":"","ref":"OpenCV.CudaTargetArchs.html#hasptx/2","title":"OpenCV.CudaTargetArchs.hasptx/2","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html","title":"OpenCV.DISOpticalFlow","type":"module"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#create/0","title":"OpenCV.DISOpticalFlow.create/0","type":"function"},{"doc":"Creates an instance of DISOpticalFlow preset . preset : int Python prototype (for reference): create ( [ , preset ] ) -&gt; retval","ref":"OpenCV.DISOpticalFlow.html#create/1","title":"OpenCV.DISOpticalFlow.create/1","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#getfinestscale/1","title":"OpenCV.DISOpticalFlow.getfinestscale/1","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#getgradientdescentiterations/1","title":"OpenCV.DISOpticalFlow.getgradientdescentiterations/1","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#getpatchsize/1","title":"OpenCV.DISOpticalFlow.getpatchsize/1","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#getpatchstride/1","title":"OpenCV.DISOpticalFlow.getpatchstride/1","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#getusemeannormalization/1","title":"OpenCV.DISOpticalFlow.getusemeannormalization/1","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#getusespatialpropagation/1","title":"OpenCV.DISOpticalFlow.getusespatialpropagation/1","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#getvariationalrefinementalpha/1","title":"OpenCV.DISOpticalFlow.getvariationalrefinementalpha/1","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#getvariationalrefinementdelta/1","title":"OpenCV.DISOpticalFlow.getvariationalrefinementdelta/1","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#getvariationalrefinementgamma/1","title":"OpenCV.DISOpticalFlow.getvariationalrefinementgamma/1","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#getvariationalrefinementiterations/1","title":"OpenCV.DISOpticalFlow.getvariationalrefinementiterations/1","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#setfinestscale/2","title":"OpenCV.DISOpticalFlow.setfinestscale/2","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#setgradientdescentiterations/2","title":"OpenCV.DISOpticalFlow.setgradientdescentiterations/2","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#setpatchsize/2","title":"OpenCV.DISOpticalFlow.setpatchsize/2","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#setpatchstride/2","title":"OpenCV.DISOpticalFlow.setpatchstride/2","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#setusemeannormalization/2","title":"OpenCV.DISOpticalFlow.setusemeannormalization/2","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#setusespatialpropagation/2","title":"OpenCV.DISOpticalFlow.setusespatialpropagation/2","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#setvariationalrefinementalpha/2","title":"OpenCV.DISOpticalFlow.setvariationalrefinementalpha/2","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#setvariationalrefinementdelta/2","title":"OpenCV.DISOpticalFlow.setvariationalrefinementdelta/2","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#setvariationalrefinementgamma/2","title":"OpenCV.DISOpticalFlow.setvariationalrefinementgamma/2","type":"function"},{"doc":"","ref":"OpenCV.DISOpticalFlow.html#setvariationalrefinementiterations/2","title":"OpenCV.DISOpticalFlow.setvariationalrefinementiterations/2","type":"function"},{"doc":"","ref":"OpenCV.DMatch.html","title":"OpenCV.DMatch","type":"module"},{"doc":"","ref":"OpenCV.DMatch.html#distance/1","title":"OpenCV.DMatch.distance/1","type":"function"},{"doc":"","ref":"OpenCV.DMatch.html#dmatch/0","title":"OpenCV.DMatch.dmatch/0","type":"function"},{"doc":"","ref":"OpenCV.DMatch.html#dmatch/3","title":"OpenCV.DMatch.dmatch/3","type":"function"},{"doc":"","ref":"OpenCV.DMatch.html#dmatch/4","title":"OpenCV.DMatch.dmatch/4","type":"function"},{"doc":"","ref":"OpenCV.DMatch.html#imgidx/1","title":"OpenCV.DMatch.imgidx/1","type":"function"},{"doc":"","ref":"OpenCV.DMatch.html#queryidx/1","title":"OpenCV.DMatch.queryidx/1","type":"function"},{"doc":"","ref":"OpenCV.DMatch.html#set_distance/2","title":"OpenCV.DMatch.set_distance/2","type":"function"},{"doc":"","ref":"OpenCV.DMatch.html#set_imgidx/2","title":"OpenCV.DMatch.set_imgidx/2","type":"function"},{"doc":"","ref":"OpenCV.DMatch.html#set_queryidx/2","title":"OpenCV.DMatch.set_queryidx/2","type":"function"},{"doc":"","ref":"OpenCV.DMatch.html#set_trainidx/2","title":"OpenCV.DMatch.set_trainidx/2","type":"function"},{"doc":"","ref":"OpenCV.DMatch.html#trainidx/1","title":"OpenCV.DMatch.trainidx/1","type":"function"},{"doc":"","ref":"OpenCV.DenseOpticalFlow.html","title":"OpenCV.DenseOpticalFlow","type":"module"},{"doc":"","ref":"OpenCV.DenseOpticalFlow.html#calc/4","title":"OpenCV.DenseOpticalFlow.calc/4","type":"function"},{"doc":"","ref":"OpenCV.DenseOpticalFlow.html#collectgarbage/1","title":"OpenCV.DenseOpticalFlow.collectgarbage/1","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html","title":"OpenCV.DescriptorMatcher","type":"module"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#add/2","title":"OpenCV.DescriptorMatcher.add/2","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#clear/1","title":"OpenCV.DescriptorMatcher.clear/1","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#clone/1","title":"OpenCV.DescriptorMatcher.clone/1","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#create/1","title":"OpenCV.DescriptorMatcher.create/1","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#empty/1","title":"OpenCV.DescriptorMatcher.empty/1","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#gettraindescriptors/1","title":"OpenCV.DescriptorMatcher.gettraindescriptors/1","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#ismasksupported/1","title":"OpenCV.DescriptorMatcher.ismasksupported/1","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#knnmatch/3","title":"OpenCV.DescriptorMatcher.knnmatch/3","type":"function"},{"doc":"Has overloading in C++ queryDescriptors . matches . k . less than k possible matches in total. masks . descriptors and stored train descriptors from the i-th image trainDescCollection[i]. compactResult . false, the matches vector has the same size as queryDescriptors rows. If compactResult is true, the matches vector does not contain matches for fully masked-out query descriptors. masks : vector_UMat compactResult : bool Python prototype (for reference): knnMatch ( queryDescriptors , k [ , masks [ , compactResult ] ] ) -&gt; matches","ref":"OpenCV.DescriptorMatcher.html#knnmatch/4","title":"OpenCV.DescriptorMatcher.knnmatch/4","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#match/2","title":"OpenCV.DescriptorMatcher.match/2","type":"function"},{"doc":"Has overloading in C++ queryDescriptors . matches . descriptor. So, matches size may be smaller than the query descriptors count. masks . descriptors and stored train descriptors from the i-th image trainDescCollection[i]. masks : vector_UMat Python prototype (for reference): match ( queryDescriptors [ , masks ] ) -&gt; matches","ref":"OpenCV.DescriptorMatcher.html#match/3","title":"OpenCV.DescriptorMatcher.match/3","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#radiusmatch/3","title":"OpenCV.DescriptorMatcher.radiusmatch/3","type":"function"},{"doc":"Has overloading in C++ queryDescriptors . matches . maxDistance . metric distance (e.g. Hamming distance), not the distance between coordinates (which is measured in Pixels)! masks . descriptors and stored train descriptors from the i-th image trainDescCollection[i]. compactResult . false, the matches vector has the same size as queryDescriptors rows. If compactResult is true, the matches vector does not contain matches for fully masked-out query descriptors. masks : vector_UMat compactResult : bool Python prototype (for reference): radiusMatch ( queryDescriptors , maxDistance [ , masks [ , compactResult ] ] ) -&gt; matches","ref":"OpenCV.DescriptorMatcher.html#radiusmatch/4","title":"OpenCV.DescriptorMatcher.radiusmatch/4","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#read/2","title":"OpenCV.DescriptorMatcher.read/2","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#train/1","title":"OpenCV.DescriptorMatcher.train/1","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#write/2","title":"OpenCV.DescriptorMatcher.write/2","type":"function"},{"doc":"","ref":"OpenCV.DescriptorMatcher.html#write/3","title":"OpenCV.DescriptorMatcher.write/3","type":"function"},{"doc":"","ref":"OpenCV.DetailAffineBasedEstimator.html","title":"OpenCV.DetailAffineBasedEstimator","type":"module"},{"doc":"","ref":"OpenCV.DetailAffineBasedEstimator.html#detail_affinebasedestimator/0","title":"OpenCV.DetailAffineBasedEstimator.detail_affinebasedestimator/0","type":"function"},{"doc":"","ref":"OpenCV.DetailAffineBestOf2NearestMatcher.html","title":"OpenCV.DetailAffineBestOf2NearestMatcher","type":"module"},{"doc":"","ref":"OpenCV.DetailAffineBestOf2NearestMatcher.html#detail_affinebestof2nearestmatcher/0","title":"OpenCV.DetailAffineBestOf2NearestMatcher.detail_affinebestof2nearestmatcher/0","type":"function"},{"doc":"Constructs a &quot;best of 2 nearest&quot; matcher that expects affine transformation between images full_affine . transformation with 4 degrees of freedom using only rotation, translation and uniform scaling try_use_gpu . match_conf . num_matches_thresh1 . estimation used in the inliers classification step @sa cv::estimateAffine2D cv::estimateAffinePartial2D full_affine : bool try_use_gpu : bool match_conf : float num_matches_thresh1 : int Python prototype (for reference): AffineBestOf2NearestMatcher ( [ , full_affine [ , try_use_gpu [ , match_conf [ , num_matches_thresh1 ] ] ] ] ) -&gt; &lt; detail_AffineBestOf2NearestMatcher object &gt;","ref":"OpenCV.DetailAffineBestOf2NearestMatcher.html#detail_affinebestof2nearestmatcher/1","title":"OpenCV.DetailAffineBestOf2NearestMatcher.detail_affinebestof2nearestmatcher/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBestOf2NearestMatcher.html","title":"OpenCV.DetailBestOf2NearestMatcher","type":"module"},{"doc":"","ref":"OpenCV.DetailBestOf2NearestMatcher.html#collectgarbage/1","title":"OpenCV.DetailBestOf2NearestMatcher.collectgarbage/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBestOf2NearestMatcher.html#create/0","title":"OpenCV.DetailBestOf2NearestMatcher.create/0","type":"function"},{"doc":"try_use_gpu : bool match_conf : float num_matches_thresh1 : int num_matches_thresh2 : int Python prototype (for reference): create ( [ , try_use_gpu [ , match_conf [ , num_matches_thresh1 [ , num_matches_thresh2 ] ] ] ] ) -&gt; retval","ref":"OpenCV.DetailBestOf2NearestMatcher.html#create/1","title":"OpenCV.DetailBestOf2NearestMatcher.create/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBestOf2NearestMatcher.html#detail_bestof2nearestmatcher/0","title":"OpenCV.DetailBestOf2NearestMatcher.detail_bestof2nearestmatcher/0","type":"function"},{"doc":"Constructs a &quot;best of 2 nearest&quot; matcher. try_use_gpu . match_conf . num_matches_thresh1 . estimation used in the inliers classification step num_matches_thresh2 . re-estimation on inliers try_use_gpu : bool match_conf : float num_matches_thresh1 : int num_matches_thresh2 : int Python prototype (for reference): BestOf2NearestMatcher ( [ , try_use_gpu [ , match_conf [ , num_matches_thresh1 [ , num_matches_thresh2 ] ] ] ] ) -&gt; &lt; detail_BestOf2NearestMatcher object &gt;","ref":"OpenCV.DetailBestOf2NearestMatcher.html#detail_bestof2nearestmatcher/1","title":"OpenCV.DetailBestOf2NearestMatcher.detail_bestof2nearestmatcher/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBestOf2NearestRangeMatcher.html","title":"OpenCV.DetailBestOf2NearestRangeMatcher","type":"module"},{"doc":"","ref":"OpenCV.DetailBestOf2NearestRangeMatcher.html#detail_bestof2nearestrangematcher/0","title":"OpenCV.DetailBestOf2NearestRangeMatcher.detail_bestof2nearestrangematcher/0","type":"function"},{"doc":"range_width : int try_use_gpu : bool match_conf : float num_matches_thresh1 : int num_matches_thresh2 : int Python prototype (for reference): BestOf2NearestRangeMatcher ( [ , range_width [ , try_use_gpu [ , match_conf [ , num_matches_thresh1 [ , num_matches_thresh2 ] ] ] ] ] ) -&gt; &lt; detail_BestOf2NearestRangeMatcher object &gt;","ref":"OpenCV.DetailBestOf2NearestRangeMatcher.html#detail_bestof2nearestrangematcher/1","title":"OpenCV.DetailBestOf2NearestRangeMatcher.detail_bestof2nearestrangematcher/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBlender.html","title":"OpenCV.DetailBlender","type":"module"},{"doc":"","ref":"OpenCV.DetailBlender.html#blend/3","title":"OpenCV.DetailBlender.blend/3","type":"function"},{"doc":"","ref":"OpenCV.DetailBlender.html#createdefault/1","title":"OpenCV.DetailBlender.createdefault/1","type":"function"},{"doc":"try_gpu : bool Python prototype (for reference): createDefault ( type [ , try_gpu ] ) -&gt; retval","ref":"OpenCV.DetailBlender.html#createdefault/2","title":"OpenCV.DetailBlender.createdefault/2","type":"function"},{"doc":"","ref":"OpenCV.DetailBlender.html#feed/4","title":"OpenCV.DetailBlender.feed/4","type":"function"},{"doc":"","ref":"OpenCV.DetailBlender.html#prepare/2","title":"OpenCV.DetailBlender.prepare/2","type":"function"},{"doc":"","ref":"OpenCV.DetailBlender.html#prepare/3","title":"OpenCV.DetailBlender.prepare/3","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksChannelsCompensator.html","title":"OpenCV.DetailBlocksChannelsCompensator","type":"module"},{"doc":"","ref":"OpenCV.DetailBlocksChannelsCompensator.html#detail_blockschannelscompensator/0","title":"OpenCV.DetailBlocksChannelsCompensator.detail_blockschannelscompensator/0","type":"function"},{"doc":"bl_width : int bl_height : int nr_feeds : int Python prototype (for reference): BlocksChannelsCompensator ( [ , bl_width [ , bl_height [ , nr_feeds ] ] ] ) -&gt; &lt; detail_BlocksChannelsCompensator object &gt;","ref":"OpenCV.DetailBlocksChannelsCompensator.html#detail_blockschannelscompensator/1","title":"OpenCV.DetailBlocksChannelsCompensator.detail_blockschannelscompensator/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html","title":"OpenCV.DetailBlocksCompensator","type":"module"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html#apply/5","title":"OpenCV.DetailBlocksCompensator.apply/5","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html#getblocksize/1","title":"OpenCV.DetailBlocksCompensator.getblocksize/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html#getmatgains/1","title":"OpenCV.DetailBlocksCompensator.getmatgains/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html#getnrfeeds/1","title":"OpenCV.DetailBlocksCompensator.getnrfeeds/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html#getnrgainsfilteringiterations/1","title":"OpenCV.DetailBlocksCompensator.getnrgainsfilteringiterations/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html#getsimilaritythreshold/1","title":"OpenCV.DetailBlocksCompensator.getsimilaritythreshold/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html#setblocksize/2","title":"OpenCV.DetailBlocksCompensator.setblocksize/2","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html#setblocksize/3","title":"OpenCV.DetailBlocksCompensator.setblocksize/3","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html#setmatgains/2","title":"OpenCV.DetailBlocksCompensator.setmatgains/2","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html#setnrfeeds/2","title":"OpenCV.DetailBlocksCompensator.setnrfeeds/2","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html#setnrgainsfilteringiterations/2","title":"OpenCV.DetailBlocksCompensator.setnrgainsfilteringiterations/2","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksCompensator.html#setsimilaritythreshold/2","title":"OpenCV.DetailBlocksCompensator.setsimilaritythreshold/2","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksGainCompensator.html","title":"OpenCV.DetailBlocksGainCompensator","type":"module"},{"doc":"","ref":"OpenCV.DetailBlocksGainCompensator.html#apply/5","title":"OpenCV.DetailBlocksGainCompensator.apply/5","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksGainCompensator.html#detail_blocksgaincompensator/0","title":"OpenCV.DetailBlocksGainCompensator.detail_blocksgaincompensator/0","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksGainCompensator.html#detail_blocksgaincompensator/1","title":"OpenCV.DetailBlocksGainCompensator.detail_blocksgaincompensator/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksGainCompensator.html#detail_blocksgaincompensator/3","title":"OpenCV.DetailBlocksGainCompensator.detail_blocksgaincompensator/3","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksGainCompensator.html#getmatgains/1","title":"OpenCV.DetailBlocksGainCompensator.getmatgains/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBlocksGainCompensator.html#setmatgains/2","title":"OpenCV.DetailBlocksGainCompensator.setmatgains/2","type":"function"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterAffine.html","title":"OpenCV.DetailBundleAdjusterAffine","type":"module"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterAffine.html#detail_bundleadjusteraffine/0","title":"OpenCV.DetailBundleAdjusterAffine.detail_bundleadjusteraffine/0","type":"function"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterAffinePartial.html","title":"OpenCV.DetailBundleAdjusterAffinePartial","type":"module"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterAffinePartial.html#detail_bundleadjusteraffinepartial/0","title":"OpenCV.DetailBundleAdjusterAffinePartial.detail_bundleadjusteraffinepartial/0","type":"function"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterBase.html","title":"OpenCV.DetailBundleAdjusterBase","type":"module"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterBase.html#confthresh/1","title":"OpenCV.DetailBundleAdjusterBase.confthresh/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterBase.html#refinementmask/1","title":"OpenCV.DetailBundleAdjusterBase.refinementmask/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterBase.html#setconfthresh/2","title":"OpenCV.DetailBundleAdjusterBase.setconfthresh/2","type":"function"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterBase.html#setrefinementmask/2","title":"OpenCV.DetailBundleAdjusterBase.setrefinementmask/2","type":"function"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterBase.html#settermcriteria/2","title":"OpenCV.DetailBundleAdjusterBase.settermcriteria/2","type":"function"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterBase.html#termcriteria/1","title":"OpenCV.DetailBundleAdjusterBase.termcriteria/1","type":"function"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterRay.html","title":"OpenCV.DetailBundleAdjusterRay","type":"module"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterRay.html#detail_bundleadjusterray/0","title":"OpenCV.DetailBundleAdjusterRay.detail_bundleadjusterray/0","type":"function"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterReproj.html","title":"OpenCV.DetailBundleAdjusterReproj","type":"module"},{"doc":"","ref":"OpenCV.DetailBundleAdjusterReproj.html#detail_bundleadjusterreproj/0","title":"OpenCV.DetailBundleAdjusterReproj.detail_bundleadjusterreproj/0","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html","title":"OpenCV.DetailCameraParams","type":"module"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#aspect/1","title":"OpenCV.DetailCameraParams.aspect/1","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#focal/1","title":"OpenCV.DetailCameraParams.focal/1","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#k/1","title":"OpenCV.DetailCameraParams.k/1","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#ppx/1","title":"OpenCV.DetailCameraParams.ppx/1","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#ppy/1","title":"OpenCV.DetailCameraParams.ppy/1","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#r/1","title":"OpenCV.DetailCameraParams.r/1","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#set_aspect/2","title":"OpenCV.DetailCameraParams.set_aspect/2","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#set_focal/2","title":"OpenCV.DetailCameraParams.set_focal/2","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#set_ppx/2","title":"OpenCV.DetailCameraParams.set_ppx/2","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#set_ppy/2","title":"OpenCV.DetailCameraParams.set_ppy/2","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#set_r/2","title":"OpenCV.DetailCameraParams.set_r/2","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#set_t/2","title":"OpenCV.DetailCameraParams.set_t/2","type":"function"},{"doc":"","ref":"OpenCV.DetailCameraParams.html#t/1","title":"OpenCV.DetailCameraParams.t/1","type":"function"},{"doc":"","ref":"OpenCV.DetailChannelsCompensator.html","title":"OpenCV.DetailChannelsCompensator","type":"module"},{"doc":"","ref":"OpenCV.DetailChannelsCompensator.html#apply/5","title":"OpenCV.DetailChannelsCompensator.apply/5","type":"function"},{"doc":"","ref":"OpenCV.DetailChannelsCompensator.html#detail_channelscompensator/0","title":"OpenCV.DetailChannelsCompensator.detail_channelscompensator/0","type":"function"},{"doc":"nr_feeds : int Python prototype (for reference): ChannelsCompensator ( [ , nr_feeds ] ) -&gt; &lt; detail_ChannelsCompensator object &gt;","ref":"OpenCV.DetailChannelsCompensator.html#detail_channelscompensator/1","title":"OpenCV.DetailChannelsCompensator.detail_channelscompensator/1","type":"function"},{"doc":"","ref":"OpenCV.DetailChannelsCompensator.html#getmatgains/1","title":"OpenCV.DetailChannelsCompensator.getmatgains/1","type":"function"},{"doc":"","ref":"OpenCV.DetailChannelsCompensator.html#getnrfeeds/1","title":"OpenCV.DetailChannelsCompensator.getnrfeeds/1","type":"function"},{"doc":"","ref":"OpenCV.DetailChannelsCompensator.html#getsimilaritythreshold/1","title":"OpenCV.DetailChannelsCompensator.getsimilaritythreshold/1","type":"function"},{"doc":"","ref":"OpenCV.DetailChannelsCompensator.html#setmatgains/2","title":"OpenCV.DetailChannelsCompensator.setmatgains/2","type":"function"},{"doc":"","ref":"OpenCV.DetailChannelsCompensator.html#setnrfeeds/2","title":"OpenCV.DetailChannelsCompensator.setnrfeeds/2","type":"function"},{"doc":"","ref":"OpenCV.DetailChannelsCompensator.html#setsimilaritythreshold/2","title":"OpenCV.DetailChannelsCompensator.setsimilaritythreshold/2","type":"function"},{"doc":"","ref":"OpenCV.DetailDpSeamFinder.html","title":"OpenCV.DetailDpSeamFinder","type":"module"},{"doc":"","ref":"OpenCV.DetailDpSeamFinder.html#detail_dpseamfinder/1","title":"OpenCV.DetailDpSeamFinder.detail_dpseamfinder/1","type":"function"},{"doc":"","ref":"OpenCV.DetailDpSeamFinder.html#setcostfunction/2","title":"OpenCV.DetailDpSeamFinder.setcostfunction/2","type":"function"},{"doc":"","ref":"OpenCV.DetailEstimator.html","title":"OpenCV.DetailEstimator","type":"module"},{"doc":"","ref":"OpenCV.DetailEstimator.html#apply/4","title":"OpenCV.DetailEstimator.apply/4","type":"function"},{"doc":"","ref":"OpenCV.DetailExposureCompensator.html","title":"OpenCV.DetailExposureCompensator","type":"module"},{"doc":"","ref":"OpenCV.DetailExposureCompensator.html#apply/5","title":"OpenCV.DetailExposureCompensator.apply/5","type":"function"},{"doc":"","ref":"OpenCV.DetailExposureCompensator.html#createdefault/1","title":"OpenCV.DetailExposureCompensator.createdefault/1","type":"function"},{"doc":"","ref":"OpenCV.DetailExposureCompensator.html#feed/4","title":"OpenCV.DetailExposureCompensator.feed/4","type":"function"},{"doc":"","ref":"OpenCV.DetailExposureCompensator.html#getmatgains/1","title":"OpenCV.DetailExposureCompensator.getmatgains/1","type":"function"},{"doc":"","ref":"OpenCV.DetailExposureCompensator.html#getupdategain/1","title":"OpenCV.DetailExposureCompensator.getupdategain/1","type":"function"},{"doc":"","ref":"OpenCV.DetailExposureCompensator.html#setmatgains/2","title":"OpenCV.DetailExposureCompensator.setmatgains/2","type":"function"},{"doc":"","ref":"OpenCV.DetailExposureCompensator.html#setupdategain/2","title":"OpenCV.DetailExposureCompensator.setupdategain/2","type":"function"},{"doc":"","ref":"OpenCV.DetailFeatherBlender.html","title":"OpenCV.DetailFeatherBlender","type":"module"},{"doc":"","ref":"OpenCV.DetailFeatherBlender.html#blend/3","title":"OpenCV.DetailFeatherBlender.blend/3","type":"function"},{"doc":"","ref":"OpenCV.DetailFeatherBlender.html#createweightmaps/4","title":"OpenCV.DetailFeatherBlender.createweightmaps/4","type":"function"},{"doc":"","ref":"OpenCV.DetailFeatherBlender.html#detail_featherblender/0","title":"OpenCV.DetailFeatherBlender.detail_featherblender/0","type":"function"},{"doc":"sharpness : float Python prototype (for reference): FeatherBlender ( [ , sharpness ] ) -&gt; &lt; detail_FeatherBlender object &gt;","ref":"OpenCV.DetailFeatherBlender.html#detail_featherblender/1","title":"OpenCV.DetailFeatherBlender.detail_featherblender/1","type":"function"},{"doc":"","ref":"OpenCV.DetailFeatherBlender.html#feed/4","title":"OpenCV.DetailFeatherBlender.feed/4","type":"function"},{"doc":"","ref":"OpenCV.DetailFeatherBlender.html#prepare/2","title":"OpenCV.DetailFeatherBlender.prepare/2","type":"function"},{"doc":"","ref":"OpenCV.DetailFeatherBlender.html#setsharpness/2","title":"OpenCV.DetailFeatherBlender.setsharpness/2","type":"function"},{"doc":"","ref":"OpenCV.DetailFeatherBlender.html#sharpness/1","title":"OpenCV.DetailFeatherBlender.sharpness/1","type":"function"},{"doc":"","ref":"OpenCV.DetailFeaturesMatcher.html","title":"OpenCV.DetailFeaturesMatcher","type":"module"},{"doc":"","ref":"OpenCV.DetailFeaturesMatcher.html#apply/3","title":"OpenCV.DetailFeaturesMatcher.apply/3","type":"function"},{"doc":"","ref":"OpenCV.DetailFeaturesMatcher.html#apply2/2","title":"OpenCV.DetailFeaturesMatcher.apply2/2","type":"function"},{"doc":"Performs images matching. features . pairwise_matches . mask . The function is parallelized with the TBB library. @sa detail::MatchesInfo mask : UMat Python prototype (for reference): apply2 ( features [ , mask ] ) -&gt; pairwise_matches","ref":"OpenCV.DetailFeaturesMatcher.html#apply2/3","title":"OpenCV.DetailFeaturesMatcher.apply2/3","type":"function"},{"doc":"","ref":"OpenCV.DetailFeaturesMatcher.html#collectgarbage/1","title":"OpenCV.DetailFeaturesMatcher.collectgarbage/1","type":"function"},{"doc":"","ref":"OpenCV.DetailFeaturesMatcher.html#isthreadsafe/1","title":"OpenCV.DetailFeaturesMatcher.isthreadsafe/1","type":"function"},{"doc":"","ref":"OpenCV.DetailGainCompensator.html","title":"OpenCV.DetailGainCompensator","type":"module"},{"doc":"","ref":"OpenCV.DetailGainCompensator.html#apply/5","title":"OpenCV.DetailGainCompensator.apply/5","type":"function"},{"doc":"","ref":"OpenCV.DetailGainCompensator.html#detail_gaincompensator/0","title":"OpenCV.DetailGainCompensator.detail_gaincompensator/0","type":"function"},{"doc":"","ref":"OpenCV.DetailGainCompensator.html#detail_gaincompensator/1","title":"OpenCV.DetailGainCompensator.detail_gaincompensator/1","type":"function"},{"doc":"","ref":"OpenCV.DetailGainCompensator.html#getmatgains/1","title":"OpenCV.DetailGainCompensator.getmatgains/1","type":"function"},{"doc":"","ref":"OpenCV.DetailGainCompensator.html#getnrfeeds/1","title":"OpenCV.DetailGainCompensator.getnrfeeds/1","type":"function"},{"doc":"","ref":"OpenCV.DetailGainCompensator.html#getsimilaritythreshold/1","title":"OpenCV.DetailGainCompensator.getsimilaritythreshold/1","type":"function"},{"doc":"","ref":"OpenCV.DetailGainCompensator.html#setmatgains/2","title":"OpenCV.DetailGainCompensator.setmatgains/2","type":"function"},{"doc":"","ref":"OpenCV.DetailGainCompensator.html#setnrfeeds/2","title":"OpenCV.DetailGainCompensator.setnrfeeds/2","type":"function"},{"doc":"","ref":"OpenCV.DetailGainCompensator.html#setsimilaritythreshold/2","title":"OpenCV.DetailGainCompensator.setsimilaritythreshold/2","type":"function"},{"doc":"","ref":"OpenCV.DetailGraphCutSeamFinder.html","title":"OpenCV.DetailGraphCutSeamFinder","type":"module"},{"doc":"","ref":"OpenCV.DetailGraphCutSeamFinder.html#detail_graphcutseamfinder/1","title":"OpenCV.DetailGraphCutSeamFinder.detail_graphcutseamfinder/1","type":"function"},{"doc":"terminal_cost : float bad_region_penalty : float Python prototype (for reference): GraphCutSeamFinder ( cost_type [ , terminal_cost [ , bad_region_penalty ] ] ) -&gt; &lt; detail_GraphCutSeamFinder object &gt;","ref":"OpenCV.DetailGraphCutSeamFinder.html#detail_graphcutseamfinder/2","title":"OpenCV.DetailGraphCutSeamFinder.detail_graphcutseamfinder/2","type":"function"},{"doc":"","ref":"OpenCV.DetailGraphCutSeamFinder.html#find/4","title":"OpenCV.DetailGraphCutSeamFinder.find/4","type":"function"},{"doc":"","ref":"OpenCV.DetailHomographyBasedEstimator.html","title":"OpenCV.DetailHomographyBasedEstimator","type":"module"},{"doc":"","ref":"OpenCV.DetailHomographyBasedEstimator.html#detail_homographybasedestimator/0","title":"OpenCV.DetailHomographyBasedEstimator.detail_homographybasedestimator/0","type":"function"},{"doc":"is_focals_estimated : bool Python prototype (for reference): HomographyBasedEstimator ( [ , is_focals_estimated ] ) -&gt; &lt; detail_HomographyBasedEstimator object &gt;","ref":"OpenCV.DetailHomographyBasedEstimator.html#detail_homographybasedestimator/1","title":"OpenCV.DetailHomographyBasedEstimator.detail_homographybasedestimator/1","type":"function"},{"doc":"","ref":"OpenCV.DetailImageFeatures.html","title":"OpenCV.DetailImageFeatures","type":"module"},{"doc":"","ref":"OpenCV.DetailImageFeatures.html#descriptors/1","title":"OpenCV.DetailImageFeatures.descriptors/1","type":"function"},{"doc":"","ref":"OpenCV.DetailImageFeatures.html#getkeypoints/1","title":"OpenCV.DetailImageFeatures.getkeypoints/1","type":"function"},{"doc":"","ref":"OpenCV.DetailImageFeatures.html#img_idx/1","title":"OpenCV.DetailImageFeatures.img_idx/1","type":"function"},{"doc":"","ref":"OpenCV.DetailImageFeatures.html#img_size/1","title":"OpenCV.DetailImageFeatures.img_size/1","type":"function"},{"doc":"","ref":"OpenCV.DetailImageFeatures.html#keypoints/1","title":"OpenCV.DetailImageFeatures.keypoints/1","type":"function"},{"doc":"","ref":"OpenCV.DetailImageFeatures.html#set_descriptors/2","title":"OpenCV.DetailImageFeatures.set_descriptors/2","type":"function"},{"doc":"","ref":"OpenCV.DetailImageFeatures.html#set_img_idx/2","title":"OpenCV.DetailImageFeatures.set_img_idx/2","type":"function"},{"doc":"","ref":"OpenCV.DetailImageFeatures.html#set_img_size/2","title":"OpenCV.DetailImageFeatures.set_img_size/2","type":"function"},{"doc":"","ref":"OpenCV.DetailImageFeatures.html#set_keypoints/2","title":"OpenCV.DetailImageFeatures.set_keypoints/2","type":"function"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html","title":"OpenCV.DetailMatchesInfo","type":"module"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html#confidence/1","title":"OpenCV.DetailMatchesInfo.confidence/1","type":"function"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html#dst_img_idx/1","title":"OpenCV.DetailMatchesInfo.dst_img_idx/1","type":"function"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html#getinliers/1","title":"OpenCV.DetailMatchesInfo.getinliers/1","type":"function"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html#getmatches/1","title":"OpenCV.DetailMatchesInfo.getmatches/1","type":"function"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html#h/1","title":"OpenCV.DetailMatchesInfo.h/1","type":"function"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html#num_inliers/1","title":"OpenCV.DetailMatchesInfo.num_inliers/1","type":"function"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html#set_confidence/2","title":"OpenCV.DetailMatchesInfo.set_confidence/2","type":"function"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html#set_dst_img_idx/2","title":"OpenCV.DetailMatchesInfo.set_dst_img_idx/2","type":"function"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html#set_h/2","title":"OpenCV.DetailMatchesInfo.set_h/2","type":"function"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html#set_num_inliers/2","title":"OpenCV.DetailMatchesInfo.set_num_inliers/2","type":"function"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html#set_src_img_idx/2","title":"OpenCV.DetailMatchesInfo.set_src_img_idx/2","type":"function"},{"doc":"","ref":"OpenCV.DetailMatchesInfo.html#src_img_idx/1","title":"OpenCV.DetailMatchesInfo.src_img_idx/1","type":"function"},{"doc":"","ref":"OpenCV.DetailMultiBandBlender.html","title":"OpenCV.DetailMultiBandBlender","type":"module"},{"doc":"","ref":"OpenCV.DetailMultiBandBlender.html#blend/3","title":"OpenCV.DetailMultiBandBlender.blend/3","type":"function"},{"doc":"","ref":"OpenCV.DetailMultiBandBlender.html#detail_multibandblender/0","title":"OpenCV.DetailMultiBandBlender.detail_multibandblender/0","type":"function"},{"doc":"try_gpu : int num_bands : int weight_type : int Python prototype (for reference): MultiBandBlender ( [ , try_gpu [ , num_bands [ , weight_type ] ] ] ) -&gt; &lt; detail_MultiBandBlender object &gt;","ref":"OpenCV.DetailMultiBandBlender.html#detail_multibandblender/1","title":"OpenCV.DetailMultiBandBlender.detail_multibandblender/1","type":"function"},{"doc":"","ref":"OpenCV.DetailMultiBandBlender.html#feed/4","title":"OpenCV.DetailMultiBandBlender.feed/4","type":"function"},{"doc":"","ref":"OpenCV.DetailMultiBandBlender.html#numbands/1","title":"OpenCV.DetailMultiBandBlender.numbands/1","type":"function"},{"doc":"","ref":"OpenCV.DetailMultiBandBlender.html#prepare/2","title":"OpenCV.DetailMultiBandBlender.prepare/2","type":"function"},{"doc":"","ref":"OpenCV.DetailMultiBandBlender.html#setnumbands/2","title":"OpenCV.DetailMultiBandBlender.setnumbands/2","type":"function"},{"doc":"","ref":"OpenCV.DetailNoBundleAdjuster.html","title":"OpenCV.DetailNoBundleAdjuster","type":"module"},{"doc":"","ref":"OpenCV.DetailNoBundleAdjuster.html#detail_nobundleadjuster/0","title":"OpenCV.DetailNoBundleAdjuster.detail_nobundleadjuster/0","type":"function"},{"doc":"","ref":"OpenCV.DetailNoExposureCompensator.html","title":"OpenCV.DetailNoExposureCompensator","type":"module"},{"doc":"","ref":"OpenCV.DetailNoExposureCompensator.html#apply/5","title":"OpenCV.DetailNoExposureCompensator.apply/5","type":"function"},{"doc":"","ref":"OpenCV.DetailNoExposureCompensator.html#getmatgains/1","title":"OpenCV.DetailNoExposureCompensator.getmatgains/1","type":"function"},{"doc":"","ref":"OpenCV.DetailNoExposureCompensator.html#setmatgains/2","title":"OpenCV.DetailNoExposureCompensator.setmatgains/2","type":"function"},{"doc":"","ref":"OpenCV.DetailNoSeamFinder.html","title":"OpenCV.DetailNoSeamFinder","type":"module"},{"doc":"","ref":"OpenCV.DetailNoSeamFinder.html#find/4","title":"OpenCV.DetailNoSeamFinder.find/4","type":"function"},{"doc":"","ref":"OpenCV.DetailPairwiseSeamFinder.html","title":"OpenCV.DetailPairwiseSeamFinder","type":"module"},{"doc":"","ref":"OpenCV.DetailPairwiseSeamFinder.html#find/4","title":"OpenCV.DetailPairwiseSeamFinder.find/4","type":"function"},{"doc":"","ref":"OpenCV.DetailProjectorBase.html","title":"OpenCV.DetailProjectorBase","type":"module"},{"doc":"","ref":"OpenCV.DetailSeamFinder.html","title":"OpenCV.DetailSeamFinder","type":"module"},{"doc":"","ref":"OpenCV.DetailSeamFinder.html#createdefault/1","title":"OpenCV.DetailSeamFinder.createdefault/1","type":"function"},{"doc":"","ref":"OpenCV.DetailSeamFinder.html#find/4","title":"OpenCV.DetailSeamFinder.find/4","type":"function"},{"doc":"","ref":"OpenCV.DetailSphericalProjector.html","title":"OpenCV.DetailSphericalProjector","type":"module"},{"doc":"","ref":"OpenCV.DetailSphericalProjector.html#mapbackward/5","title":"OpenCV.DetailSphericalProjector.mapbackward/5","type":"function"},{"doc":"","ref":"OpenCV.DetailSphericalProjector.html#mapforward/5","title":"OpenCV.DetailSphericalProjector.mapforward/5","type":"function"},{"doc":"","ref":"OpenCV.DetailTimelapser.html","title":"OpenCV.DetailTimelapser","type":"module"},{"doc":"","ref":"OpenCV.DetailTimelapser.html#createdefault/1","title":"OpenCV.DetailTimelapser.createdefault/1","type":"function"},{"doc":"","ref":"OpenCV.DetailTimelapser.html#getdst/1","title":"OpenCV.DetailTimelapser.getdst/1","type":"function"},{"doc":"","ref":"OpenCV.DetailTimelapser.html#initialize/3","title":"OpenCV.DetailTimelapser.initialize/3","type":"function"},{"doc":"","ref":"OpenCV.DetailTimelapser.html#process/4","title":"OpenCV.DetailTimelapser.process/4","type":"function"},{"doc":"","ref":"OpenCV.DetailTimelapserCrop.html","title":"OpenCV.DetailTimelapserCrop","type":"module"},{"doc":"","ref":"OpenCV.DetailVoronoiSeamFinder.html","title":"OpenCV.DetailVoronoiSeamFinder","type":"module"},{"doc":"","ref":"OpenCV.DetailVoronoiSeamFinder.html#find/4","title":"OpenCV.DetailVoronoiSeamFinder.find/4","type":"function"},{"doc":"","ref":"OpenCV.DnnClassificationModel.html","title":"OpenCV.DnnClassificationModel","type":"module"},{"doc":"","ref":"OpenCV.DnnClassificationModel.html#classify/2","title":"OpenCV.DnnClassificationModel.classify/2","type":"function"},{"doc":"","ref":"OpenCV.DnnClassificationModel.html#dnn_classificationmodel/1","title":"OpenCV.DnnClassificationModel.dnn_classificationmodel/1","type":"function"},{"doc":"Create classification model from network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : String Python prototype (for reference): ClassificationModel ( model [ , config ] ) -&gt; &lt; dnn_ClassificationModel object &gt;","ref":"OpenCV.DnnClassificationModel.html#dnn_classificationmodel/2","title":"OpenCV.DnnClassificationModel.dnn_classificationmodel/2","type":"function"},{"doc":"","ref":"OpenCV.DnnDetectionModel.html","title":"OpenCV.DnnDetectionModel","type":"module"},{"doc":"","ref":"OpenCV.DnnDetectionModel.html#detect/2","title":"OpenCV.DnnDetectionModel.detect/2","type":"function"},{"doc":"Given the @p input frame, create input blob, run net and return result detections. ** . classIds . confidences . boxes . confThreshold . nmsThreshold . confThreshold : float nmsThreshold : float Python prototype (for reference): detect ( frame [ , confThreshold [ , nmsThreshold ] ] ) -&gt; classIds , confidences , boxes","ref":"OpenCV.DnnDetectionModel.html#detect/3","title":"OpenCV.DnnDetectionModel.detect/3","type":"function"},{"doc":"","ref":"OpenCV.DnnDetectionModel.html#dnn_detectionmodel/1","title":"OpenCV.DnnDetectionModel.dnn_detectionmodel/1","type":"function"},{"doc":"Create detection model from network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : String Python prototype (for reference): DetectionModel ( model [ , config ] ) -&gt; &lt; dnn_DetectionModel object &gt;","ref":"OpenCV.DnnDetectionModel.html#dnn_detectionmodel/2","title":"OpenCV.DnnDetectionModel.dnn_detectionmodel/2","type":"function"},{"doc":"","ref":"OpenCV.DnnDetectionModel.html#getnmsacrossclasses/1","title":"OpenCV.DnnDetectionModel.getnmsacrossclasses/1","type":"function"},{"doc":"","ref":"OpenCV.DnnDetectionModel.html#setnmsacrossclasses/2","title":"OpenCV.DnnDetectionModel.setnmsacrossclasses/2","type":"function"},{"doc":"","ref":"OpenCV.DnnDictValue.html","title":"OpenCV.DnnDictValue","type":"module"},{"doc":"","ref":"OpenCV.DnnDictValue.html#dnn_dictvalue/1","title":"OpenCV.DnnDictValue.dnn_dictvalue/1","type":"function"},{"doc":"","ref":"OpenCV.DnnDictValue.html#getintvalue/1","title":"OpenCV.DnnDictValue.getintvalue/1","type":"function"},{"doc":"","ref":"OpenCV.DnnDictValue.html#getrealvalue/1","title":"OpenCV.DnnDictValue.getrealvalue/1","type":"function"},{"doc":"","ref":"OpenCV.DnnDictValue.html#getstringvalue/1","title":"OpenCV.DnnDictValue.getstringvalue/1","type":"function"},{"doc":"","ref":"OpenCV.DnnDictValue.html#isint/1","title":"OpenCV.DnnDictValue.isint/1","type":"function"},{"doc":"","ref":"OpenCV.DnnDictValue.html#isreal/1","title":"OpenCV.DnnDictValue.isreal/1","type":"function"},{"doc":"","ref":"OpenCV.DnnDictValue.html#isstring/1","title":"OpenCV.DnnDictValue.isstring/1","type":"function"},{"doc":"","ref":"OpenCV.DnnKeypointsModel.html","title":"OpenCV.DnnKeypointsModel","type":"module"},{"doc":"","ref":"OpenCV.DnnKeypointsModel.html#dnn_keypointsmodel/1","title":"OpenCV.DnnKeypointsModel.dnn_keypointsmodel/1","type":"function"},{"doc":"Create keypoints model from network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : String Python prototype (for reference): KeypointsModel ( model [ , config ] ) -&gt; &lt; dnn_KeypointsModel object &gt;","ref":"OpenCV.DnnKeypointsModel.html#dnn_keypointsmodel/2","title":"OpenCV.DnnKeypointsModel.dnn_keypointsmodel/2","type":"function"},{"doc":"","ref":"OpenCV.DnnKeypointsModel.html#estimate/2","title":"OpenCV.DnnKeypointsModel.estimate/2","type":"function"},{"doc":"Given the @p input frame, create input blob, run net ** . thresh . @returns a vector holding the x and y coordinates of each detected keypoint thresh : float Python prototype (for reference): estimate ( frame [ , thresh ] ) -&gt; retval","ref":"OpenCV.DnnKeypointsModel.html#estimate/3","title":"OpenCV.DnnKeypointsModel.estimate/3","type":"function"},{"doc":"","ref":"OpenCV.DnnLayer.html","title":"OpenCV.DnnLayer","type":"module"},{"doc":"","ref":"OpenCV.DnnLayer.html#blobs/1","title":"OpenCV.DnnLayer.blobs/1","type":"function"},{"doc":"","ref":"OpenCV.DnnLayer.html#finalize/2","title":"OpenCV.DnnLayer.finalize/2","type":"function"},{"doc":"Computes and sets internal parameters according to inputs, outputs and blobs. ** . outputs . If this method is called after network has allocated all memory for input and output blobs and before inferencing. outputs : vector_UMat Python prototype (for reference): finalize ( inputs [ , outputs ] ) -&gt; outputs","ref":"OpenCV.DnnLayer.html#finalize/3","title":"OpenCV.DnnLayer.finalize/3","type":"function"},{"doc":"","ref":"OpenCV.DnnLayer.html#name/1","title":"OpenCV.DnnLayer.name/1","type":"function"},{"doc":"","ref":"OpenCV.DnnLayer.html#outputnametoindex/2","title":"OpenCV.DnnLayer.outputnametoindex/2","type":"function"},{"doc":"","ref":"OpenCV.DnnLayer.html#preferabletarget/1","title":"OpenCV.DnnLayer.preferabletarget/1","type":"function"},{"doc":"","ref":"OpenCV.DnnLayer.html#run/3","title":"OpenCV.DnnLayer.run/3","type":"function"},{"doc":"Allocates layer and computes output. @deprecated This method will be removed in the future release. outputs : vector_Mat Python prototype (for reference): run ( inputs , internals [ , outputs ] ) -&gt; outputs , internals","ref":"OpenCV.DnnLayer.html#run/4","title":"OpenCV.DnnLayer.run/4","type":"function"},{"doc":"","ref":"OpenCV.DnnLayer.html#set_blobs/2","title":"OpenCV.DnnLayer.set_blobs/2","type":"function"},{"doc":"","ref":"OpenCV.DnnLayer.html#type/1","title":"OpenCV.DnnLayer.type/1","type":"function"},{"doc":"","ref":"OpenCV.DnnModel.html","title":"OpenCV.DnnModel","type":"module"},{"doc":"","ref":"OpenCV.DnnModel.html#dnn_model/1","title":"OpenCV.DnnModel.dnn_model/1","type":"function"},{"doc":"Create model from deep learning network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : String Python prototype (for reference): Model ( model [ , config ] ) -&gt; &lt; dnn_Model object &gt;","ref":"OpenCV.DnnModel.html#dnn_model/2","title":"OpenCV.DnnModel.dnn_model/2","type":"function"},{"doc":"","ref":"OpenCV.DnnModel.html#predict/2","title":"OpenCV.DnnModel.predict/2","type":"function"},{"doc":"Given the @p input frame, create input blob, run net and return the output @p blobs. ** . outs . outs : vector_UMat Python prototype (for reference): predict ( frame [ , outs ] ) -&gt; outs","ref":"OpenCV.DnnModel.html#predict/3","title":"OpenCV.DnnModel.predict/3","type":"function"},{"doc":"","ref":"OpenCV.DnnModel.html#setinputcrop/2","title":"OpenCV.DnnModel.setinputcrop/2","type":"function"},{"doc":"","ref":"OpenCV.DnnModel.html#setinputmean/2","title":"OpenCV.DnnModel.setinputmean/2","type":"function"},{"doc":"","ref":"OpenCV.DnnModel.html#setinputparams/1","title":"OpenCV.DnnModel.setinputparams/1","type":"function"},{"doc":"","ref":"OpenCV.DnnModel.html#setinputscale/2","title":"OpenCV.DnnModel.setinputscale/2","type":"function"},{"doc":"","ref":"OpenCV.DnnModel.html#setinputsize/2","title":"OpenCV.DnnModel.setinputsize/2","type":"function"},{"doc":"","ref":"OpenCV.DnnModel.html#setinputsize/3","title":"OpenCV.DnnModel.setinputsize/3","type":"function"},{"doc":"","ref":"OpenCV.DnnModel.html#setinputswaprb/2","title":"OpenCV.DnnModel.setinputswaprb/2","type":"function"},{"doc":"","ref":"OpenCV.DnnModel.html#setpreferablebackend/2","title":"OpenCV.DnnModel.setpreferablebackend/2","type":"function"},{"doc":"","ref":"OpenCV.DnnModel.html#setpreferabletarget/2","title":"OpenCV.DnnModel.setpreferabletarget/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html","title":"OpenCV.DnnNet","type":"module"},{"doc":"","ref":"OpenCV.DnnNet.html#connect/3","title":"OpenCV.DnnNet.connect/3","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#dnn_net/0","title":"OpenCV.DnnNet.dnn_net/0","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#dump/1","title":"OpenCV.DnnNet.dump/1","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#dumptofile/2","title":"OpenCV.DnnNet.dumptofile/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#empty/1","title":"OpenCV.DnnNet.empty/1","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#enablefusion/2","title":"OpenCV.DnnNet.enablefusion/2","type":"function"},{"doc":"Runs forward pass to compute outputs of layers listed in @p outBlobNames. outputBlobs . outBlobNames . outputBlobs : vector_UMat Python prototype (for reference): forward ( outBlobNames [ , outputBlobs ] ) -&gt; outputBlobs","ref":"OpenCV.DnnNet.html#forward/2","title":"OpenCV.DnnNet.forward/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#forwardandretrieve/2","title":"OpenCV.DnnNet.forwardandretrieve/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#forwardasync/1","title":"OpenCV.DnnNet.forwardasync/1","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getflops/2","title":"OpenCV.DnnNet.getflops/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getflops/3","title":"OpenCV.DnnNet.getflops/3","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getinputdetails/1","title":"OpenCV.DnnNet.getinputdetails/1","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getlayer/2","title":"OpenCV.DnnNet.getlayer/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getlayerid/2","title":"OpenCV.DnnNet.getlayerid/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getlayernames/1","title":"OpenCV.DnnNet.getlayernames/1","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getlayerscount/2","title":"OpenCV.DnnNet.getlayerscount/2","type":"function"},{"doc":"Has overloading in C++ Python prototype (for reference): getLayerShapes ( netInputShapes , layerId ) -&gt; inLayerShapes , outLayerShapes","ref":"OpenCV.DnnNet.html#getlayershapes/2","title":"OpenCV.DnnNet.getlayershapes/2","type":"function"},{"doc":"Returns input and output shapes for all layers in loaded model; preliminary inferencing isn &#39; t necessary . netInputShapes . layersIds . inLayersShapes . order is the same as in layersIds outLayersShapes . order is the same as in layersIds Python prototype (for reference): getLayersShapes ( netInputShapes ) -&gt; layersIds , inLayersShapes , outLayersShapes","ref":"OpenCV.DnnNet.html#getlayersshapes/2","title":"OpenCV.DnnNet.getlayersshapes/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getlayertypes/1","title":"OpenCV.DnnNet.getlayertypes/1","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getmemoryconsumption/2","title":"OpenCV.DnnNet.getmemoryconsumption/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getmemoryconsumption/3","title":"OpenCV.DnnNet.getmemoryconsumption/3","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getoutputdetails/1","title":"OpenCV.DnnNet.getoutputdetails/1","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getparam/2","title":"OpenCV.DnnNet.getparam/2","type":"function"},{"doc":"Returns parameter blob of the layer. layer . numParam . @see Layer::blobs numParam : int Python prototype (for reference): getParam ( layer [ , numParam ] ) -&gt; retval","ref":"OpenCV.DnnNet.html#getparam/3","title":"OpenCV.DnnNet.getparam/3","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getperfprofile/1","title":"OpenCV.DnnNet.getperfprofile/1","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getunconnectedoutlayers/1","title":"OpenCV.DnnNet.getunconnectedoutlayers/1","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#getunconnectedoutlayersnames/1","title":"OpenCV.DnnNet.getunconnectedoutlayersnames/1","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#quantize/4","title":"OpenCV.DnnNet.quantize/4","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#readfrommodeloptimizer/2","title":"OpenCV.DnnNet.readfrommodeloptimizer/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#sethalidescheduler/2","title":"OpenCV.DnnNet.sethalidescheduler/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#setinput/2","title":"OpenCV.DnnNet.setinput/2","type":"function"},{"doc":"Sets the new input value for the network blob . name . scalefactor . mean . @see connect(String, String) to know format of the descriptor. If scale or mean values are specified, a final input blob is computed as: \\f[input(n,c,h,w) = scalefactor \\times (blob(n,c,h,w) - mean_c)\\f] name : String scalefactor : double mean : Scalar Python prototype (for reference): setInput ( blob [ , name [ , scalefactor [ , mean ] ] ] ) -&gt; None","ref":"OpenCV.DnnNet.html#setinput/3","title":"OpenCV.DnnNet.setinput/3","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#setinputshape/3","title":"OpenCV.DnnNet.setinputshape/3","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#setinputsnames/2","title":"OpenCV.DnnNet.setinputsnames/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#setparam/4","title":"OpenCV.DnnNet.setparam/4","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#setpreferablebackend/2","title":"OpenCV.DnnNet.setpreferablebackend/2","type":"function"},{"doc":"","ref":"OpenCV.DnnNet.html#setpreferabletarget/2","title":"OpenCV.DnnNet.setpreferabletarget/2","type":"function"},{"doc":"","ref":"OpenCV.DnnSegmentationModel.html","title":"OpenCV.DnnSegmentationModel","type":"module"},{"doc":"","ref":"OpenCV.DnnSegmentationModel.html#dnn_segmentationmodel/1","title":"OpenCV.DnnSegmentationModel.dnn_segmentationmodel/1","type":"function"},{"doc":"Create segmentation model from network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : String Python prototype (for reference): SegmentationModel ( model [ , config ] ) -&gt; &lt; dnn_SegmentationModel object &gt;","ref":"OpenCV.DnnSegmentationModel.html#dnn_segmentationmodel/2","title":"OpenCV.DnnSegmentationModel.dnn_segmentationmodel/2","type":"function"},{"doc":"","ref":"OpenCV.DnnSegmentationModel.html#segment/2","title":"OpenCV.DnnSegmentationModel.segment/2","type":"function"},{"doc":"Given the @p input frame, create input blob, run net ** . mask . mask : UMat Python prototype (for reference): segment ( frame [ , mask ] ) -&gt; mask","ref":"OpenCV.DnnSegmentationModel.html#segment/3","title":"OpenCV.DnnSegmentationModel.segment/3","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModel.html","title":"OpenCV.DnnTextDetectionModel","type":"module"},{"doc":"","ref":"OpenCV.DnnTextDetectionModel.html#detect/2","title":"OpenCV.DnnTextDetectionModel.detect/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModel.html#detecttextrectangles/2","title":"OpenCV.DnnTextDetectionModel.detecttextrectangles/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelDB.html","title":"OpenCV.DnnTextDetectionModelDB","type":"module"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelDB.html#dnn_textdetectionmodel_db/1","title":"OpenCV.DnnTextDetectionModelDB.dnn_textdetectionmodel_db/1","type":"function"},{"doc":"Create text detection model from network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : string Python prototype (for reference): TextDetectionModel_DB ( model [ , config ] ) -&gt; &lt; dnn_TextDetectionModel_DB object &gt;","ref":"OpenCV.DnnTextDetectionModelDB.html#dnn_textdetectionmodel_db/2","title":"OpenCV.DnnTextDetectionModelDB.dnn_textdetectionmodel_db/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelDB.html#getbinarythreshold/1","title":"OpenCV.DnnTextDetectionModelDB.getbinarythreshold/1","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelDB.html#getmaxcandidates/1","title":"OpenCV.DnnTextDetectionModelDB.getmaxcandidates/1","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelDB.html#getpolygonthreshold/1","title":"OpenCV.DnnTextDetectionModelDB.getpolygonthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelDB.html#getunclipratio/1","title":"OpenCV.DnnTextDetectionModelDB.getunclipratio/1","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelDB.html#setbinarythreshold/2","title":"OpenCV.DnnTextDetectionModelDB.setbinarythreshold/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelDB.html#setmaxcandidates/2","title":"OpenCV.DnnTextDetectionModelDB.setmaxcandidates/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelDB.html#setpolygonthreshold/2","title":"OpenCV.DnnTextDetectionModelDB.setpolygonthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelDB.html#setunclipratio/2","title":"OpenCV.DnnTextDetectionModelDB.setunclipratio/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelEAST.html","title":"OpenCV.DnnTextDetectionModelEAST","type":"module"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelEAST.html#dnn_textdetectionmodel_east/1","title":"OpenCV.DnnTextDetectionModelEAST.dnn_textdetectionmodel_east/1","type":"function"},{"doc":"Create text detection model from network represented in one of the supported formats. An order of @p model and @p config arguments does not matter. model . config . config : string Python prototype (for reference): TextDetectionModel_EAST ( model [ , config ] ) -&gt; &lt; dnn_TextDetectionModel_EAST object &gt;","ref":"OpenCV.DnnTextDetectionModelEAST.html#dnn_textdetectionmodel_east/2","title":"OpenCV.DnnTextDetectionModelEAST.dnn_textdetectionmodel_east/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelEAST.html#getconfidencethreshold/1","title":"OpenCV.DnnTextDetectionModelEAST.getconfidencethreshold/1","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelEAST.html#getnmsthreshold/1","title":"OpenCV.DnnTextDetectionModelEAST.getnmsthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelEAST.html#setconfidencethreshold/2","title":"OpenCV.DnnTextDetectionModelEAST.setconfidencethreshold/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextDetectionModelEAST.html#setnmsthreshold/2","title":"OpenCV.DnnTextDetectionModelEAST.setnmsthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextRecognitionModel.html","title":"OpenCV.DnnTextRecognitionModel","type":"module"},{"doc":"","ref":"OpenCV.DnnTextRecognitionModel.html#dnn_textrecognitionmodel/1","title":"OpenCV.DnnTextRecognitionModel.dnn_textrecognitionmodel/1","type":"function"},{"doc":"Create text recognition model from network represented in one of the supported formats Call setDecodeType() and setVocabulary() after constructor to initialize the decoding method model . config . config : string Python prototype (for reference): TextRecognitionModel ( model [ , config ] ) -&gt; &lt; dnn_TextRecognitionModel object &gt;","ref":"OpenCV.DnnTextRecognitionModel.html#dnn_textrecognitionmodel/2","title":"OpenCV.DnnTextRecognitionModel.dnn_textrecognitionmodel/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextRecognitionModel.html#getdecodetype/1","title":"OpenCV.DnnTextRecognitionModel.getdecodetype/1","type":"function"},{"doc":"","ref":"OpenCV.DnnTextRecognitionModel.html#getvocabulary/1","title":"OpenCV.DnnTextRecognitionModel.getvocabulary/1","type":"function"},{"doc":"","ref":"OpenCV.DnnTextRecognitionModel.html#recognize/2","title":"OpenCV.DnnTextRecognitionModel.recognize/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextRecognitionModel.html#recognize/3","title":"OpenCV.DnnTextRecognitionModel.recognize/3","type":"function"},{"doc":"","ref":"OpenCV.DnnTextRecognitionModel.html#setdecodeoptsctcprefixbeamsearch/2","title":"OpenCV.DnnTextRecognitionModel.setdecodeoptsctcprefixbeamsearch/2","type":"function"},{"doc":"Set the decoding method options for &quot;CTC-prefix-beam-search&quot; decode usage beamSize . vocPruneSize . only take top @p vocPruneSize tokens in each search step, @p vocPruneSize &lt;= 0 stands for disable this prune. vocPruneSize : int Python prototype (for reference): setDecodeOptsCTCPrefixBeamSearch ( beamSize [ , vocPruneSize ] ) -&gt; retval","ref":"OpenCV.DnnTextRecognitionModel.html#setdecodeoptsctcprefixbeamsearch/3","title":"OpenCV.DnnTextRecognitionModel.setdecodeoptsctcprefixbeamsearch/3","type":"function"},{"doc":"","ref":"OpenCV.DnnTextRecognitionModel.html#setdecodetype/2","title":"OpenCV.DnnTextRecognitionModel.setdecodetype/2","type":"function"},{"doc":"","ref":"OpenCV.DnnTextRecognitionModel.html#setvocabulary/2","title":"OpenCV.DnnTextRecognitionModel.setvocabulary/2","type":"function"},{"doc":"","ref":"OpenCV.FaceDetectorYN.html","title":"OpenCV.FaceDetectorYN","type":"module"},{"doc":"","ref":"OpenCV.FaceDetectorYN.html#create/3","title":"OpenCV.FaceDetectorYN.create/3","type":"function"},{"doc":"Creates an instance of this class with given parameters model . config . input_size . score_threshold . nms_threshold . top_k . backend_id . target_id . score_threshold : float nms_threshold : float top_k : int backend_id : int target_id : int Python prototype (for reference): create ( model , config , input_size [ , score_threshold [ , nms_threshold [ , top_k [ , backend_id [ , target_id ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.FaceDetectorYN.html#create/4","title":"OpenCV.FaceDetectorYN.create/4","type":"function"},{"doc":"","ref":"OpenCV.FaceDetectorYN.html#detect/2","title":"OpenCV.FaceDetectorYN.detect/2","type":"function"},{"doc":"A simple interface to detect face from given image image . faces . faces : UMat Python prototype (for reference): detect ( image [ , faces ] ) -&gt; retval , faces","ref":"OpenCV.FaceDetectorYN.html#detect/3","title":"OpenCV.FaceDetectorYN.detect/3","type":"function"},{"doc":"","ref":"OpenCV.FaceDetectorYN.html#getinputsize/1","title":"OpenCV.FaceDetectorYN.getinputsize/1","type":"function"},{"doc":"","ref":"OpenCV.FaceDetectorYN.html#getnmsthreshold/1","title":"OpenCV.FaceDetectorYN.getnmsthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.FaceDetectorYN.html#getscorethreshold/1","title":"OpenCV.FaceDetectorYN.getscorethreshold/1","type":"function"},{"doc":"","ref":"OpenCV.FaceDetectorYN.html#gettopk/1","title":"OpenCV.FaceDetectorYN.gettopk/1","type":"function"},{"doc":"","ref":"OpenCV.FaceDetectorYN.html#setinputsize/2","title":"OpenCV.FaceDetectorYN.setinputsize/2","type":"function"},{"doc":"","ref":"OpenCV.FaceDetectorYN.html#setnmsthreshold/2","title":"OpenCV.FaceDetectorYN.setnmsthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.FaceDetectorYN.html#setscorethreshold/2","title":"OpenCV.FaceDetectorYN.setscorethreshold/2","type":"function"},{"doc":"","ref":"OpenCV.FaceDetectorYN.html#settopk/2","title":"OpenCV.FaceDetectorYN.settopk/2","type":"function"},{"doc":"","ref":"OpenCV.FaceRecognizerSF.html","title":"OpenCV.FaceRecognizerSF","type":"module"},{"doc":"","ref":"OpenCV.FaceRecognizerSF.html#aligncrop/3","title":"OpenCV.FaceRecognizerSF.aligncrop/3","type":"function"},{"doc":"Aligning image to put face on the standard position src_img . face_box . aligned_img . aligned_img : UMat Python prototype (for reference): alignCrop ( src_img , face_box [ , aligned_img ] ) -&gt; aligned_img","ref":"OpenCV.FaceRecognizerSF.html#aligncrop/4","title":"OpenCV.FaceRecognizerSF.aligncrop/4","type":"function"},{"doc":"","ref":"OpenCV.FaceRecognizerSF.html#create/2","title":"OpenCV.FaceRecognizerSF.create/2","type":"function"},{"doc":"Creates an instance of this class with given parameters model . config . backend_id . target_id . backend_id : int target_id : int Python prototype (for reference): create ( model , config [ , backend_id [ , target_id ] ] ) -&gt; retval","ref":"OpenCV.FaceRecognizerSF.html#create/3","title":"OpenCV.FaceRecognizerSF.create/3","type":"function"},{"doc":"","ref":"OpenCV.FaceRecognizerSF.html#feature/2","title":"OpenCV.FaceRecognizerSF.feature/2","type":"function"},{"doc":"Extracting face feature from aligned image aligned_img . face_feature . face_feature : UMat Python prototype (for reference): feature ( aligned_img [ , face_feature ] ) -&gt; face_feature","ref":"OpenCV.FaceRecognizerSF.html#feature/3","title":"OpenCV.FaceRecognizerSF.feature/3","type":"function"},{"doc":"","ref":"OpenCV.FaceRecognizerSF.html#match/3","title":"OpenCV.FaceRecognizerSF.match/3","type":"function"},{"doc":"Calculating the distance between two face features face_feature1 . face_feature2 . dis_type . dis_type : int Python prototype (for reference): match ( _face_feature1 , _face_feature2 [ , dis_type ] ) -&gt; retval","ref":"OpenCV.FaceRecognizerSF.html#match/4","title":"OpenCV.FaceRecognizerSF.match/4","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html","title":"OpenCV.FarnebackOpticalFlow","type":"module"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#create/0","title":"OpenCV.FarnebackOpticalFlow.create/0","type":"function"},{"doc":"numLevels : int pyrScale : double fastPyramids : bool winSize : int numIters : int polyN : int polySigma : double flags : int Python prototype (for reference): create ( [ , numLevels [ , pyrScale [ , fastPyramids [ , winSize [ , numIters [ , polyN [ , polySigma [ , flags ] ] ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.FarnebackOpticalFlow.html#create/1","title":"OpenCV.FarnebackOpticalFlow.create/1","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#getfastpyramids/1","title":"OpenCV.FarnebackOpticalFlow.getfastpyramids/1","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#getflags/1","title":"OpenCV.FarnebackOpticalFlow.getflags/1","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#getnumiters/1","title":"OpenCV.FarnebackOpticalFlow.getnumiters/1","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#getnumlevels/1","title":"OpenCV.FarnebackOpticalFlow.getnumlevels/1","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#getpolyn/1","title":"OpenCV.FarnebackOpticalFlow.getpolyn/1","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#getpolysigma/1","title":"OpenCV.FarnebackOpticalFlow.getpolysigma/1","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#getpyrscale/1","title":"OpenCV.FarnebackOpticalFlow.getpyrscale/1","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#getwinsize/1","title":"OpenCV.FarnebackOpticalFlow.getwinsize/1","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#setfastpyramids/2","title":"OpenCV.FarnebackOpticalFlow.setfastpyramids/2","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#setflags/2","title":"OpenCV.FarnebackOpticalFlow.setflags/2","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#setnumiters/2","title":"OpenCV.FarnebackOpticalFlow.setnumiters/2","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#setnumlevels/2","title":"OpenCV.FarnebackOpticalFlow.setnumlevels/2","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#setpolyn/2","title":"OpenCV.FarnebackOpticalFlow.setpolyn/2","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#setpolysigma/2","title":"OpenCV.FarnebackOpticalFlow.setpolysigma/2","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#setpyrscale/2","title":"OpenCV.FarnebackOpticalFlow.setpyrscale/2","type":"function"},{"doc":"","ref":"OpenCV.FarnebackOpticalFlow.html#setwinsize/2","title":"OpenCV.FarnebackOpticalFlow.setwinsize/2","type":"function"},{"doc":"","ref":"OpenCV.FastFeatureDetector.html","title":"OpenCV.FastFeatureDetector","type":"module"},{"doc":"","ref":"OpenCV.FastFeatureDetector.html#create/0","title":"OpenCV.FastFeatureDetector.create/0","type":"function"},{"doc":"threshold : int nonmaxSuppression : bool type : FastFeatureDetector_DetectorType Python prototype (for reference): create ( [ , threshold [ , nonmaxSuppression [ , type ] ] ] ) -&gt; retval","ref":"OpenCV.FastFeatureDetector.html#create/1","title":"OpenCV.FastFeatureDetector.create/1","type":"function"},{"doc":"","ref":"OpenCV.FastFeatureDetector.html#getdefaultname/1","title":"OpenCV.FastFeatureDetector.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.FastFeatureDetector.html#getnonmaxsuppression/1","title":"OpenCV.FastFeatureDetector.getnonmaxsuppression/1","type":"function"},{"doc":"","ref":"OpenCV.FastFeatureDetector.html#getthreshold/1","title":"OpenCV.FastFeatureDetector.getthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.FastFeatureDetector.html#gettype/1","title":"OpenCV.FastFeatureDetector.gettype/1","type":"function"},{"doc":"","ref":"OpenCV.FastFeatureDetector.html#setnonmaxsuppression/2","title":"OpenCV.FastFeatureDetector.setnonmaxsuppression/2","type":"function"},{"doc":"","ref":"OpenCV.FastFeatureDetector.html#setthreshold/2","title":"OpenCV.FastFeatureDetector.setthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.FastFeatureDetector.html#settype/2","title":"OpenCV.FastFeatureDetector.settype/2","type":"function"},{"doc":"","ref":"OpenCV.Feature2D.html","title":"OpenCV.Feature2D","type":"module"},{"doc":"","ref":"OpenCV.Feature2D.html#compute/3","title":"OpenCV.Feature2D.compute/3","type":"function"},{"doc":"Has overloading in C++ images . keypoints . computed are removed. Sometimes new keypoints can be added, for example: SIFT duplicates keypoint with several dominant orientations (for each orientation). descriptors . descriptors computed for a keypoints[i]. Row j is the keypoints (or keypoints[i]) is the descriptor for keypoint j-th keypoint. descriptors : vector_UMat Python prototype (for reference): compute ( images , keypoints [ , descriptors ] ) -&gt; keypoints , descriptors","ref":"OpenCV.Feature2D.html#compute/4","title":"OpenCV.Feature2D.compute/4","type":"function"},{"doc":"","ref":"OpenCV.Feature2D.html#defaultnorm/1","title":"OpenCV.Feature2D.defaultnorm/1","type":"function"},{"doc":"","ref":"OpenCV.Feature2D.html#descriptorsize/1","title":"OpenCV.Feature2D.descriptorsize/1","type":"function"},{"doc":"","ref":"OpenCV.Feature2D.html#descriptortype/1","title":"OpenCV.Feature2D.descriptortype/1","type":"function"},{"doc":"","ref":"OpenCV.Feature2D.html#detect/2","title":"OpenCV.Feature2D.detect/2","type":"function"},{"doc":"Has overloading in C++ images . keypoints . of keypoints detected in images[i] . masks . masks[i] is a mask for images[i]. masks : vector_UMat Python prototype (for reference): detect ( images [ , masks ] ) -&gt; keypoints","ref":"OpenCV.Feature2D.html#detect/3","title":"OpenCV.Feature2D.detect/3","type":"function"},{"doc":"","ref":"OpenCV.Feature2D.html#detectandcompute/3","title":"OpenCV.Feature2D.detectandcompute/3","type":"function"},{"doc":"Detects keypoints and computes the descriptors descriptors : UMat useProvidedKeypoints : bool Python prototype (for reference): detectAndCompute ( image , mask [ , descriptors [ , useProvidedKeypoints ] ] ) -&gt; keypoints , descriptors","ref":"OpenCV.Feature2D.html#detectandcompute/4","title":"OpenCV.Feature2D.detectandcompute/4","type":"function"},{"doc":"","ref":"OpenCV.Feature2D.html#empty/1","title":"OpenCV.Feature2D.empty/1","type":"function"},{"doc":"","ref":"OpenCV.Feature2D.html#getdefaultname/1","title":"OpenCV.Feature2D.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.Feature2D.html#read/2","title":"OpenCV.Feature2D.read/2","type":"function"},{"doc":"","ref":"OpenCV.Feature2D.html#write/2","title":"OpenCV.Feature2D.write/2","type":"function"},{"doc":"","ref":"OpenCV.Feature2D.html#write/3","title":"OpenCV.Feature2D.write/3","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html","title":"OpenCV.FileNode","type":"module"},{"doc":"","ref":"OpenCV.FileNode.html#at/2","title":"OpenCV.FileNode.at/2","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#empty/1","title":"OpenCV.FileNode.empty/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#filenode/0","title":"OpenCV.FileNode.filenode/0","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#getnode/2","title":"OpenCV.FileNode.getnode/2","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#isint/1","title":"OpenCV.FileNode.isint/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#ismap/1","title":"OpenCV.FileNode.ismap/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#isnamed/1","title":"OpenCV.FileNode.isnamed/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#isnone/1","title":"OpenCV.FileNode.isnone/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#isreal/1","title":"OpenCV.FileNode.isreal/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#isseq/1","title":"OpenCV.FileNode.isseq/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#isstring/1","title":"OpenCV.FileNode.isstring/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#keys/1","title":"OpenCV.FileNode.keys/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#mat/1","title":"OpenCV.FileNode.mat/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#name/1","title":"OpenCV.FileNode.name/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#rawsize/1","title":"OpenCV.FileNode.rawsize/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#real/1","title":"OpenCV.FileNode.real/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#size/1","title":"OpenCV.FileNode.size/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#string/1","title":"OpenCV.FileNode.string/1","type":"function"},{"doc":"","ref":"OpenCV.FileNode.html#type/1","title":"OpenCV.FileNode.type/1","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html","title":"OpenCV.FileStorage","type":"module"},{"doc":"","ref":"OpenCV.FileStorage.html#endwritestruct/1","title":"OpenCV.FileStorage.endwritestruct/1","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#filestorage/0","title":"OpenCV.FileStorage.filestorage/0","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#filestorage/2","title":"OpenCV.FileStorage.filestorage/2","type":"function"},{"doc":"Has overloading in C++ @copydoc open() encoding : String Python prototype (for reference): FileStorage ( filename , flags [ , encoding ] ) -&gt; &lt; FileStorage object &gt;","ref":"OpenCV.FileStorage.html#filestorage/3","title":"OpenCV.FileStorage.filestorage/3","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#getfirsttoplevelnode/1","title":"OpenCV.FileStorage.getfirsttoplevelnode/1","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#getformat/1","title":"OpenCV.FileStorage.getformat/1","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#getnode/2","title":"OpenCV.FileStorage.getnode/2","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#isopened/1","title":"OpenCV.FileStorage.isopened/1","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#open/3","title":"OpenCV.FileStorage.open/3","type":"function"},{"doc":"Opens a file. See description of parameters in FileStorage::FileStorage. The method calls FileStorage::release before opening the file. filename . Extension of the file (.xml, .yml/.yaml or .json) determines its format (XML, YAML or JSON respectively). Also you can append .gz to work with compressed files, for example myHugeMatrix.xml.gz. If both FileStorage::WRITE and FileStorage::MEMORY flags are specified, source is used just to specify the output file format (e.g. mydata.xml, .yml etc.). A file name can also contain parameters. You can use this format, &quot;*?base64&quot; (e.g. &quot;file.json?base64&quot; (case sensitive)), as an alternative to FileStorage::BASE64 flag. flags . encoding . you should use 8-bit encoding instead of it. encoding : String Python prototype (for reference): open ( filename , flags [ , encoding ] ) -&gt; retval","ref":"OpenCV.FileStorage.html#open/4","title":"OpenCV.FileStorage.open/4","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#release/1","title":"OpenCV.FileStorage.release/1","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#releaseandgetstring/1","title":"OpenCV.FileStorage.releaseandgetstring/1","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#root/1","title":"OpenCV.FileStorage.root/1","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#startwritestruct/3","title":"OpenCV.FileStorage.startwritestruct/3","type":"function"},{"doc":"Starts to write a nested structure (sequence or a mapping). name . flags . typeName . I.e. if the format has a specification for storing type information, this parameter is used. typeName : String Python prototype (for reference): startWriteStruct ( name , flags [ , typeName ] ) -&gt; None","ref":"OpenCV.FileStorage.html#startwritestruct/4","title":"OpenCV.FileStorage.startwritestruct/4","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#write/3","title":"OpenCV.FileStorage.write/3","type":"function"},{"doc":"","ref":"OpenCV.FileStorage.html#writecomment/2","title":"OpenCV.FileStorage.writecomment/2","type":"function"},{"doc":"Writes a comment. The function writes a comment into file storage. The comments are skipped when the storage is read. comment . append . Else if the comment is multi-line, or if it does not fit at the end of the current line, the comment starts a new line. append : bool Python prototype (for reference): writeComment ( comment [ , append ] ) -&gt; None","ref":"OpenCV.FileStorage.html#writecomment/3","title":"OpenCV.FileStorage.writecomment/3","type":"function"},{"doc":"","ref":"OpenCV.FlannBasedMatcher.html","title":"OpenCV.FlannBasedMatcher","type":"module"},{"doc":"","ref":"OpenCV.FlannBasedMatcher.html#create/0","title":"OpenCV.FlannBasedMatcher.create/0","type":"function"},{"doc":"","ref":"OpenCV.FlannBasedMatcher.html#flannbasedmatcher/0","title":"OpenCV.FlannBasedMatcher.flannbasedmatcher/0","type":"function"},{"doc":"indexParams : Ptr&lt;flann::IndexParams&gt; searchParams : Ptr&lt;flann::SearchParams&gt; Python prototype (for reference): FlannBasedMatcher ( [ , indexParams [ , searchParams ] ] ) -&gt; &lt; FlannBasedMatcher object &gt;","ref":"OpenCV.FlannBasedMatcher.html#flannbasedmatcher/1","title":"OpenCV.FlannBasedMatcher.flannbasedmatcher/1","type":"function"},{"doc":"","ref":"OpenCV.FlannIndex.html","title":"OpenCV.FlannIndex","type":"module"},{"doc":"","ref":"OpenCV.FlannIndex.html#build/3","title":"OpenCV.FlannIndex.build/3","type":"function"},{"doc":"distType : cvflann_flann_distance_t Python prototype (for reference): build ( features , params [ , distType ] ) -&gt; None","ref":"OpenCV.FlannIndex.html#build/4","title":"OpenCV.FlannIndex.build/4","type":"function"},{"doc":"","ref":"OpenCV.FlannIndex.html#flann_index/2","title":"OpenCV.FlannIndex.flann_index/2","type":"function"},{"doc":"distType : cvflann_flann_distance_t Python prototype (for reference): Index ( features , params [ , distType ] ) -&gt; &lt; flann_Index object &gt;","ref":"OpenCV.FlannIndex.html#flann_index/3","title":"OpenCV.FlannIndex.flann_index/3","type":"function"},{"doc":"","ref":"OpenCV.FlannIndex.html#getalgorithm/1","title":"OpenCV.FlannIndex.getalgorithm/1","type":"function"},{"doc":"","ref":"OpenCV.FlannIndex.html#getdistance/1","title":"OpenCV.FlannIndex.getdistance/1","type":"function"},{"doc":"","ref":"OpenCV.FlannIndex.html#knnsearch/3","title":"OpenCV.FlannIndex.knnsearch/3","type":"function"},{"doc":"indices : UMat dists : UMat params : SearchParams Python prototype (for reference): knnSearch ( query , knn [ , indices [ , dists [ , params ] ] ] ) -&gt; indices , dists","ref":"OpenCV.FlannIndex.html#knnsearch/4","title":"OpenCV.FlannIndex.knnsearch/4","type":"function"},{"doc":"","ref":"OpenCV.FlannIndex.html#load/3","title":"OpenCV.FlannIndex.load/3","type":"function"},{"doc":"","ref":"OpenCV.FlannIndex.html#radiussearch/4","title":"OpenCV.FlannIndex.radiussearch/4","type":"function"},{"doc":"indices : UMat dists : UMat params : SearchParams Python prototype (for reference): radiusSearch ( query , radius , maxResults [ , indices [ , dists [ , params ] ] ] ) -&gt; retval , indices , dists","ref":"OpenCV.FlannIndex.html#radiussearch/5","title":"OpenCV.FlannIndex.radiussearch/5","type":"function"},{"doc":"","ref":"OpenCV.FlannIndex.html#release/1","title":"OpenCV.FlannIndex.release/1","type":"function"},{"doc":"","ref":"OpenCV.FlannIndex.html#save/2","title":"OpenCV.FlannIndex.save/2","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html","title":"OpenCV.GFTTDetector","type":"module"},{"doc":"","ref":"OpenCV.GFTTDetector.html#create/0","title":"OpenCV.GFTTDetector.create/0","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#create/1","title":"OpenCV.GFTTDetector.create/1","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#create/5","title":"OpenCV.GFTTDetector.create/5","type":"function"},{"doc":"useHarrisDetector : bool k : double Python prototype (for reference): create ( maxCorners , qualityLevel , minDistance , blockSize , gradiantSize [ , useHarrisDetector [ , k ] ] ) -&gt; retval","ref":"OpenCV.GFTTDetector.html#create/6","title":"OpenCV.GFTTDetector.create/6","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#getblocksize/1","title":"OpenCV.GFTTDetector.getblocksize/1","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#getdefaultname/1","title":"OpenCV.GFTTDetector.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#getharrisdetector/1","title":"OpenCV.GFTTDetector.getharrisdetector/1","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#getk/1","title":"OpenCV.GFTTDetector.getk/1","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#getmaxfeatures/1","title":"OpenCV.GFTTDetector.getmaxfeatures/1","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#getmindistance/1","title":"OpenCV.GFTTDetector.getmindistance/1","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#getqualitylevel/1","title":"OpenCV.GFTTDetector.getqualitylevel/1","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#setblocksize/2","title":"OpenCV.GFTTDetector.setblocksize/2","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#setharrisdetector/2","title":"OpenCV.GFTTDetector.setharrisdetector/2","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#setk/2","title":"OpenCV.GFTTDetector.setk/2","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#setmaxfeatures/2","title":"OpenCV.GFTTDetector.setmaxfeatures/2","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#setmindistance/2","title":"OpenCV.GFTTDetector.setmindistance/2","type":"function"},{"doc":"","ref":"OpenCV.GFTTDetector.html#setqualitylevel/2","title":"OpenCV.GFTTDetector.setqualitylevel/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHough.html","title":"OpenCV.GeneralizedHough","type":"module"},{"doc":"","ref":"OpenCV.GeneralizedHough.html#detect/4","title":"OpenCV.GeneralizedHough.detect/4","type":"function"},{"doc":"positions : UMat votes : UMat Python prototype (for reference): detect ( edges , dx , dy [ , positions [ , votes ] ] ) -&gt; positions , votes","ref":"OpenCV.GeneralizedHough.html#detect/5","title":"OpenCV.GeneralizedHough.detect/5","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHough.html#getcannyhighthresh/1","title":"OpenCV.GeneralizedHough.getcannyhighthresh/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHough.html#getcannylowthresh/1","title":"OpenCV.GeneralizedHough.getcannylowthresh/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHough.html#getdp/1","title":"OpenCV.GeneralizedHough.getdp/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHough.html#getmaxbuffersize/1","title":"OpenCV.GeneralizedHough.getmaxbuffersize/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHough.html#getmindist/1","title":"OpenCV.GeneralizedHough.getmindist/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHough.html#setcannyhighthresh/2","title":"OpenCV.GeneralizedHough.setcannyhighthresh/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHough.html#setcannylowthresh/2","title":"OpenCV.GeneralizedHough.setcannylowthresh/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHough.html#setdp/2","title":"OpenCV.GeneralizedHough.setdp/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHough.html#setmaxbuffersize/2","title":"OpenCV.GeneralizedHough.setmaxbuffersize/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHough.html#setmindist/2","title":"OpenCV.GeneralizedHough.setmindist/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHough.html#settemplate/4","title":"OpenCV.GeneralizedHough.settemplate/4","type":"function"},{"doc":"templCenter : Point Python prototype (for reference): setTemplate ( edges , dx , dy [ , templCenter ] ) -&gt; None","ref":"OpenCV.GeneralizedHough.html#settemplate/5","title":"OpenCV.GeneralizedHough.settemplate/5","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughBallard.html","title":"OpenCV.GeneralizedHoughBallard","type":"module"},{"doc":"","ref":"OpenCV.GeneralizedHoughBallard.html#getlevels/1","title":"OpenCV.GeneralizedHoughBallard.getlevels/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughBallard.html#getvotesthreshold/1","title":"OpenCV.GeneralizedHoughBallard.getvotesthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughBallard.html#setlevels/2","title":"OpenCV.GeneralizedHoughBallard.setlevels/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughBallard.html#setvotesthreshold/2","title":"OpenCV.GeneralizedHoughBallard.setvotesthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html","title":"OpenCV.GeneralizedHoughGuil","type":"module"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#getangleepsilon/1","title":"OpenCV.GeneralizedHoughGuil.getangleepsilon/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#getanglestep/1","title":"OpenCV.GeneralizedHoughGuil.getanglestep/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#getanglethresh/1","title":"OpenCV.GeneralizedHoughGuil.getanglethresh/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#getlevels/1","title":"OpenCV.GeneralizedHoughGuil.getlevels/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#getmaxangle/1","title":"OpenCV.GeneralizedHoughGuil.getmaxangle/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#getmaxscale/1","title":"OpenCV.GeneralizedHoughGuil.getmaxscale/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#getminangle/1","title":"OpenCV.GeneralizedHoughGuil.getminangle/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#getminscale/1","title":"OpenCV.GeneralizedHoughGuil.getminscale/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#getposthresh/1","title":"OpenCV.GeneralizedHoughGuil.getposthresh/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#getscalestep/1","title":"OpenCV.GeneralizedHoughGuil.getscalestep/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#getscalethresh/1","title":"OpenCV.GeneralizedHoughGuil.getscalethresh/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#getxi/1","title":"OpenCV.GeneralizedHoughGuil.getxi/1","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#setangleepsilon/2","title":"OpenCV.GeneralizedHoughGuil.setangleepsilon/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#setanglestep/2","title":"OpenCV.GeneralizedHoughGuil.setanglestep/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#setanglethresh/2","title":"OpenCV.GeneralizedHoughGuil.setanglethresh/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#setlevels/2","title":"OpenCV.GeneralizedHoughGuil.setlevels/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#setmaxangle/2","title":"OpenCV.GeneralizedHoughGuil.setmaxangle/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#setmaxscale/2","title":"OpenCV.GeneralizedHoughGuil.setmaxscale/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#setminangle/2","title":"OpenCV.GeneralizedHoughGuil.setminangle/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#setminscale/2","title":"OpenCV.GeneralizedHoughGuil.setminscale/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#setposthresh/2","title":"OpenCV.GeneralizedHoughGuil.setposthresh/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#setscalestep/2","title":"OpenCV.GeneralizedHoughGuil.setscalestep/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#setscalethresh/2","title":"OpenCV.GeneralizedHoughGuil.setscalethresh/2","type":"function"},{"doc":"","ref":"OpenCV.GeneralizedHoughGuil.html#setxi/2","title":"OpenCV.GeneralizedHoughGuil.setxi/2","type":"function"},{"doc":"OpenCV High-level Graphical User Interface","ref":"OpenCV.Gui.html","title":"OpenCV.Gui","type":"module"},{"doc":"close all windows","ref":"OpenCV.Gui.html#destroy_all_windows/0","title":"OpenCV.Gui.destroy_all_windows/0","type":"function"},{"doc":"close a named window","ref":"OpenCV.Gui.html#destroy_window/1","title":"OpenCV.Gui.destroy_window/1","type":"function"},{"doc":"Show a mat in a named window winname . The name of the window. mat . The image. Example { :ok , mat } = OpenCV . imread ( &quot;example.jpg&quot; ) OpenCV . imshow ( &quot;OpenCV&quot; , mat ) # the following line may be necessary on your system # will try to improve this later OpenCV . waitkey ( 0 )","ref":"OpenCV.Gui.html#imshow/2","title":"OpenCV.Gui.imshow/2","type":"function"},{"doc":"wait for user keyboard event for a delay amount of time (ms)","ref":"OpenCV.Gui.html#waitkey/1","title":"OpenCV.Gui.waitkey/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html","title":"OpenCV.HOGDescriptor","type":"module"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#blocksize/1","title":"OpenCV.HOGDescriptor.blocksize/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#blockstride/1","title":"OpenCV.HOGDescriptor.blockstride/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#cellsize/1","title":"OpenCV.HOGDescriptor.cellsize/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#checkdetectorsize/1","title":"OpenCV.HOGDescriptor.checkdetectorsize/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#compute/2","title":"OpenCV.HOGDescriptor.compute/2","type":"function"},{"doc":"Computes HOG descriptors of given image. img . descriptors . winStride . padding : Padding locations . winStride : Size padding : Size locations : vector_Point Python prototype (for reference): compute ( img [ , winStride [ , padding [ , locations ] ] ] ) -&gt; descriptors","ref":"OpenCV.HOGDescriptor.html#compute/3","title":"OpenCV.HOGDescriptor.compute/3","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#computegradient/4","title":"OpenCV.HOGDescriptor.computegradient/4","type":"function"},{"doc":"Computes gradients and quantized gradient orientations. img . grad . angleOfs . paddingTL . paddingBR . paddingTL : Size paddingBR : Size Python prototype (for reference): computeGradient ( img , grad , angleOfs [ , paddingTL [ , paddingBR ] ] ) -&gt; grad , angleOfs","ref":"OpenCV.HOGDescriptor.html#computegradient/5","title":"OpenCV.HOGDescriptor.computegradient/5","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#derivaperture/1","title":"OpenCV.HOGDescriptor.derivaperture/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#detect/2","title":"OpenCV.HOGDescriptor.detect/2","type":"function"},{"doc":"Performs object detection without a multi-scale window. img . foundLocations . weights . hitThreshold . Usually it is 0 and should be specified in the detector coefficients (as the last free coefficient). But if the free coefficient is omitted (which is allowed), you can specify it manually here. winStride . padding : Padding searchLocations . hitThreshold : double winStride : Size padding : Size searchLocations : vector_Point Python prototype (for reference): detect ( img [ , hitThreshold [ , winStride [ , padding [ , searchLocations ] ] ] ] ) -&gt; foundLocations , weights","ref":"OpenCV.HOGDescriptor.html#detect/3","title":"OpenCV.HOGDescriptor.detect/3","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#detectmultiscale/2","title":"OpenCV.HOGDescriptor.detectmultiscale/2","type":"function"},{"doc":"Detects objects of different sizes in the input image. The detected objects are returned as a list of rectangles. img . foundLocations . foundWeights . hitThreshold . Usually it is 0 and should be specified in the detector coefficients (as the last free coefficient). But if the free coefficient is omitted (which is allowed), you can specify it manually here. winStride . padding : Padding scale . finalThreshold . useMeanshiftGrouping . hitThreshold : double winStride : Size padding : Size scale : double finalThreshold : double useMeanshiftGrouping : bool Python prototype (for reference): detectMultiScale ( img [ , hitThreshold [ , winStride [ , padding [ , scale [ , finalThreshold [ , useMeanshiftGrouping ] ] ] ] ] ] ) -&gt; foundLocations , foundWeights","ref":"OpenCV.HOGDescriptor.html#detectmultiscale/3","title":"OpenCV.HOGDescriptor.detectmultiscale/3","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#gammacorrection/1","title":"OpenCV.HOGDescriptor.gammacorrection/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#getdaimlerpeopledetector/0","title":"OpenCV.HOGDescriptor.getdaimlerpeopledetector/0","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#getdefaultpeopledetector/0","title":"OpenCV.HOGDescriptor.getdefaultpeopledetector/0","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#getdescriptorsize/1","title":"OpenCV.HOGDescriptor.getdescriptorsize/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#getwinsigma/1","title":"OpenCV.HOGDescriptor.getwinsigma/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#histogramnormtype/1","title":"OpenCV.HOGDescriptor.histogramnormtype/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#hogdescriptor/0","title":"OpenCV.HOGDescriptor.hogdescriptor/0","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#hogdescriptor/1","title":"OpenCV.HOGDescriptor.hogdescriptor/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#hogdescriptor/5","title":"OpenCV.HOGDescriptor.hogdescriptor/5","type":"function"},{"doc":"Has overloading in C++ winSize . blockSize . blockStride . cellSize . nbins . derivAperture . winSigma . histogramNormType . l2HysThreshold . gammaCorrection . nlevels . signedGradient . derivAperture : int winSigma : double histogramNormType : HOGDescriptor_HistogramNormType l2HysThreshold : double gammaCorrection : bool nlevels : int signedGradient : bool Python prototype (for reference): HOGDescriptor ( _winSize , _blockSize , _blockStride , _cellSize , _nbins [ , _derivAperture [ , _winSigma [ , _histogramNormType [ , _L2HysThreshold [ , _gammaCorrection [ , _nlevels [ , _signedGradient ] ] ] ] ] ] ] ) -&gt; &lt; HOGDescriptor object &gt;","ref":"OpenCV.HOGDescriptor.html#hogdescriptor/6","title":"OpenCV.HOGDescriptor.hogdescriptor/6","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#l2hysthreshold/1","title":"OpenCV.HOGDescriptor.l2hysthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#load/2","title":"OpenCV.HOGDescriptor.load/2","type":"function"},{"doc":"loads HOGDescriptor parameters and coefficients for the linear SVM classifier from a file. filename . objname . objname : String Python prototype (for reference): load ( filename [ , objname ] ) -&gt; retval","ref":"OpenCV.HOGDescriptor.html#load/3","title":"OpenCV.HOGDescriptor.load/3","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#nbins/1","title":"OpenCV.HOGDescriptor.nbins/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#nlevels/1","title":"OpenCV.HOGDescriptor.nlevels/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#save/2","title":"OpenCV.HOGDescriptor.save/2","type":"function"},{"doc":"saves HOGDescriptor parameters and coefficients for the linear SVM classifier to a file filename . objname . objname : String Python prototype (for reference): save ( filename [ , objname ] ) -&gt; None","ref":"OpenCV.HOGDescriptor.html#save/3","title":"OpenCV.HOGDescriptor.save/3","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#setsvmdetector/2","title":"OpenCV.HOGDescriptor.setsvmdetector/2","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#signedgradient/1","title":"OpenCV.HOGDescriptor.signedgradient/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#svmdetector/1","title":"OpenCV.HOGDescriptor.svmdetector/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#winsigma/1","title":"OpenCV.HOGDescriptor.winsigma/1","type":"function"},{"doc":"","ref":"OpenCV.HOGDescriptor.html#winsize/1","title":"OpenCV.HOGDescriptor.winsize/1","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html","title":"OpenCV.KAZE","type":"module"},{"doc":"","ref":"OpenCV.KAZE.html#create/0","title":"OpenCV.KAZE.create/0","type":"function"},{"doc":"The KAZE constructor extended . upright . threshold . nOctaves . nOctaveLayers . diffusivity . DIFF_CHARBONNIER extended : bool upright : bool threshold : float nOctaves : int nOctaveLayers : int diffusivity : KAZE_DiffusivityType Python prototype (for reference): create ( [ , extended [ , upright [ , threshold [ , nOctaves [ , nOctaveLayers [ , diffusivity ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.KAZE.html#create/1","title":"OpenCV.KAZE.create/1","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#getdefaultname/1","title":"OpenCV.KAZE.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#getdiffusivity/1","title":"OpenCV.KAZE.getdiffusivity/1","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#getextended/1","title":"OpenCV.KAZE.getextended/1","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#getnoctavelayers/1","title":"OpenCV.KAZE.getnoctavelayers/1","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#getnoctaves/1","title":"OpenCV.KAZE.getnoctaves/1","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#getthreshold/1","title":"OpenCV.KAZE.getthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#getupright/1","title":"OpenCV.KAZE.getupright/1","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#setdiffusivity/2","title":"OpenCV.KAZE.setdiffusivity/2","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#setextended/2","title":"OpenCV.KAZE.setextended/2","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#setnoctavelayers/2","title":"OpenCV.KAZE.setnoctavelayers/2","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#setnoctaves/2","title":"OpenCV.KAZE.setnoctaves/2","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#setthreshold/2","title":"OpenCV.KAZE.setthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.KAZE.html#setupright/2","title":"OpenCV.KAZE.setupright/2","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html","title":"OpenCV.KalmanFilter","type":"module"},{"doc":"","ref":"OpenCV.KalmanFilter.html#controlmatrix/1","title":"OpenCV.KalmanFilter.controlmatrix/1","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#correct/2","title":"OpenCV.KalmanFilter.correct/2","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#errorcovpost/1","title":"OpenCV.KalmanFilter.errorcovpost/1","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#errorcovpre/1","title":"OpenCV.KalmanFilter.errorcovpre/1","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#gain/1","title":"OpenCV.KalmanFilter.gain/1","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#kalmanfilter/0","title":"OpenCV.KalmanFilter.kalmanfilter/0","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#kalmanfilter/2","title":"OpenCV.KalmanFilter.kalmanfilter/2","type":"function"},{"doc":"Has overloading in C++ dynamParams . measureParams . controlParams . type . controlParams : int type : int Python prototype (for reference): KalmanFilter ( dynamParams , measureParams [ , controlParams [ , type ] ] ) -&gt; &lt; KalmanFilter object &gt;","ref":"OpenCV.KalmanFilter.html#kalmanfilter/3","title":"OpenCV.KalmanFilter.kalmanfilter/3","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#measurementmatrix/1","title":"OpenCV.KalmanFilter.measurementmatrix/1","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#measurementnoisecov/1","title":"OpenCV.KalmanFilter.measurementnoisecov/1","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#predict/1","title":"OpenCV.KalmanFilter.predict/1","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#processnoisecov/1","title":"OpenCV.KalmanFilter.processnoisecov/1","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#set_controlmatrix/2","title":"OpenCV.KalmanFilter.set_controlmatrix/2","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#set_errorcovpost/2","title":"OpenCV.KalmanFilter.set_errorcovpost/2","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#set_errorcovpre/2","title":"OpenCV.KalmanFilter.set_errorcovpre/2","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#set_gain/2","title":"OpenCV.KalmanFilter.set_gain/2","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#set_measurementmatrix/2","title":"OpenCV.KalmanFilter.set_measurementmatrix/2","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#set_measurementnoisecov/2","title":"OpenCV.KalmanFilter.set_measurementnoisecov/2","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#set_processnoisecov/2","title":"OpenCV.KalmanFilter.set_processnoisecov/2","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#set_statepost/2","title":"OpenCV.KalmanFilter.set_statepost/2","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#set_statepre/2","title":"OpenCV.KalmanFilter.set_statepre/2","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#set_transitionmatrix/2","title":"OpenCV.KalmanFilter.set_transitionmatrix/2","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#statepost/1","title":"OpenCV.KalmanFilter.statepost/1","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#statepre/1","title":"OpenCV.KalmanFilter.statepre/1","type":"function"},{"doc":"","ref":"OpenCV.KalmanFilter.html#transitionmatrix/1","title":"OpenCV.KalmanFilter.transitionmatrix/1","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html","title":"OpenCV.KeyPoint","type":"module"},{"doc":"","ref":"OpenCV.KeyPoint.html#angle/1","title":"OpenCV.KeyPoint.angle/1","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#class_id/1","title":"OpenCV.KeyPoint.class_id/1","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#convert/1","title":"OpenCV.KeyPoint.convert/1","type":"function"},{"doc":"Has overloading in C++ points2f . keypoints . size . response . octave . class_id . size : float response : float octave : int class_id : int Python prototype (for reference): convert ( points2f [ , size [ , response [ , octave [ , class_id ] ] ] ] ) -&gt; keypoints","ref":"OpenCV.KeyPoint.html#convert/2","title":"OpenCV.KeyPoint.convert/2","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#keypoint/0","title":"OpenCV.KeyPoint.keypoint/0","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#keypoint/3","title":"OpenCV.KeyPoint.keypoint/3","type":"function"},{"doc":"x . y . size . angle . response . octave . class_id . angle : float response : float octave : int class_id : int Python prototype (for reference): KeyPoint ( x , y , size [ , angle [ , response [ , octave [ , class_id ] ] ] ] ) -&gt; &lt; KeyPoint object &gt;","ref":"OpenCV.KeyPoint.html#keypoint/4","title":"OpenCV.KeyPoint.keypoint/4","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#octave/1","title":"OpenCV.KeyPoint.octave/1","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#overlap/2","title":"OpenCV.KeyPoint.overlap/2","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#pt/1","title":"OpenCV.KeyPoint.pt/1","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#response/1","title":"OpenCV.KeyPoint.response/1","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#set_angle/2","title":"OpenCV.KeyPoint.set_angle/2","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#set_class_id/2","title":"OpenCV.KeyPoint.set_class_id/2","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#set_octave/2","title":"OpenCV.KeyPoint.set_octave/2","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#set_pt/2","title":"OpenCV.KeyPoint.set_pt/2","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#set_response/2","title":"OpenCV.KeyPoint.set_response/2","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#set_size/2","title":"OpenCV.KeyPoint.set_size/2","type":"function"},{"doc":"","ref":"OpenCV.KeyPoint.html#size/1","title":"OpenCV.KeyPoint.size/1","type":"function"},{"doc":"","ref":"OpenCV.LineSegmentDetector.html","title":"OpenCV.LineSegmentDetector","type":"module"},{"doc":"","ref":"OpenCV.LineSegmentDetector.html#comparesegments/4","title":"OpenCV.LineSegmentDetector.comparesegments/4","type":"function"},{"doc":"Draws two groups of lines in blue and red, counting the non overlapping (mismatching) pixels. size . lines1 . lines2 . image . in order for lines1 and lines2 to be drawn in the above mentioned colors. image : UMat Python prototype (for reference): compareSegments ( size , lines1 , lines2 [ , image ] ) -&gt; retval , image","ref":"OpenCV.LineSegmentDetector.html#comparesegments/5","title":"OpenCV.LineSegmentDetector.comparesegments/5","type":"function"},{"doc":"","ref":"OpenCV.LineSegmentDetector.html#detect/2","title":"OpenCV.LineSegmentDetector.detect/2","type":"function"},{"doc":"Finds lines in the input image. This is the output of the default parameters of the algorithm on the above shown image. image . lsd_ptr-\\&gt;detect(image(roi), lines, ...); lines += Scalar(roi.x, roi.y, roi.x, roi.y); lines . Vec4f is (x1, y1, x2, y2), point 1 is the start, point 2 - end. Returned lines are strictly oriented depending on the gradient. width . prec . nfa . bigger the value, logarithmically better the detection. -1 corresponds to 10 mean false alarms 0 corresponds to 1 mean false alarm 1 corresponds to 0.1 mean false alarms This vector will be calculated only when the objects type is #LSD_REFINE_ADV. lines : UMat width : UMat prec : UMat nfa : UMat Python prototype (for reference): detect ( image [ , lines [ , width [ , prec [ , nfa ] ] ] ] ) -&gt; lines , width , prec , nfa","ref":"OpenCV.LineSegmentDetector.html#detect/3","title":"OpenCV.LineSegmentDetector.detect/3","type":"function"},{"doc":"","ref":"OpenCV.LineSegmentDetector.html#drawsegments/3","title":"OpenCV.LineSegmentDetector.drawsegments/3","type":"function"},{"doc":"","ref":"OpenCV.MSER.html","title":"OpenCV.MSER","type":"module"},{"doc":"","ref":"OpenCV.MSER.html#create/0","title":"OpenCV.MSER.create/0","type":"function"},{"doc":"Full constructor for %MSER detector delta . min_area . max_area . max_variation . min_diversity . max_evolution . area_threshold . min_margin . edge_blur_size . delta : int min_area : int max_area : int max_variation : double min_diversity : double max_evolution : int area_threshold : double min_margin : double edge_blur_size : int Python prototype (for reference): create ( [ , delta [ , min_area [ , max_area [ , max_variation [ , min_diversity [ , max_evolution [ , area_threshold [ , min_margin [ , edge_blur_size ] ] ] ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.MSER.html#create/1","title":"OpenCV.MSER.create/1","type":"function"},{"doc":"","ref":"OpenCV.MSER.html#detectregions/2","title":"OpenCV.MSER.detectregions/2","type":"function"},{"doc":"","ref":"OpenCV.MSER.html#getdefaultname/1","title":"OpenCV.MSER.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.MSER.html#getdelta/1","title":"OpenCV.MSER.getdelta/1","type":"function"},{"doc":"","ref":"OpenCV.MSER.html#getmaxarea/1","title":"OpenCV.MSER.getmaxarea/1","type":"function"},{"doc":"","ref":"OpenCV.MSER.html#getminarea/1","title":"OpenCV.MSER.getminarea/1","type":"function"},{"doc":"","ref":"OpenCV.MSER.html#getpass2only/1","title":"OpenCV.MSER.getpass2only/1","type":"function"},{"doc":"","ref":"OpenCV.MSER.html#setdelta/2","title":"OpenCV.MSER.setdelta/2","type":"function"},{"doc":"","ref":"OpenCV.MSER.html#setmaxarea/2","title":"OpenCV.MSER.setmaxarea/2","type":"function"},{"doc":"","ref":"OpenCV.MSER.html#setminarea/2","title":"OpenCV.MSER.setminarea/2","type":"function"},{"doc":"","ref":"OpenCV.MSER.html#setpass2only/2","title":"OpenCV.MSER.setpass2only/2","type":"function"},{"doc":"OpenCV Mat","ref":"OpenCV.Mat.html","title":"OpenCV.Mat","type":"module"},{"doc":"","ref":"OpenCV.Mat.html#clone/1","title":"OpenCV.Mat.clone/1","type":"function"},{"doc":"Create Mat from binary (pixel) data @param binary, the binary pixel data @param type={t, l}, type is one of [{:u, 8}, {:s, 8}, {:u, 16}, {:s, 16}, {:s, 32}, {:f, 32}, {:f, 64}] @param cols, number of cols @param rows, number of rows @param channels, number of channels, only valid if in [1, 3, 4]","ref":"OpenCV.Mat.html#from_binary/5","title":"OpenCV.Mat.from_binary/5","type":"function"},{"doc":"","ref":"OpenCV.Mat.html#shape/1","title":"OpenCV.Mat.shape/1","type":"function"},{"doc":"","ref":"OpenCV.Mat.html#to_binary/1","title":"OpenCV.Mat.to_binary/1","type":"function"},{"doc":"","ref":"OpenCV.Mat.html#type/1","title":"OpenCV.Mat.type/1","type":"function"},{"doc":"","ref":"OpenCV.MergeDebevec.html","title":"OpenCV.MergeDebevec","type":"module"},{"doc":"","ref":"OpenCV.MergeDebevec.html#process/3","title":"OpenCV.MergeDebevec.process/3","type":"function"},{"doc":"dst : UMat Python prototype (for reference): process ( src , times [ , dst ] ) -&gt; dst","ref":"OpenCV.MergeDebevec.html#process/4","title":"OpenCV.MergeDebevec.process/4","type":"function"},{"doc":"","ref":"OpenCV.MergeExposures.html","title":"OpenCV.MergeExposures","type":"module"},{"doc":"","ref":"OpenCV.MergeExposures.html#process/4","title":"OpenCV.MergeExposures.process/4","type":"function"},{"doc":"Merges images. src . dst . times . response . have the same number of channels as images. dst : UMat Python prototype (for reference): process ( src , times , response [ , dst ] ) -&gt; dst","ref":"OpenCV.MergeExposures.html#process/5","title":"OpenCV.MergeExposures.process/5","type":"function"},{"doc":"","ref":"OpenCV.MergeMertens.html","title":"OpenCV.MergeMertens","type":"module"},{"doc":"","ref":"OpenCV.MergeMertens.html#getcontrastweight/1","title":"OpenCV.MergeMertens.getcontrastweight/1","type":"function"},{"doc":"","ref":"OpenCV.MergeMertens.html#getexposureweight/1","title":"OpenCV.MergeMertens.getexposureweight/1","type":"function"},{"doc":"","ref":"OpenCV.MergeMertens.html#getsaturationweight/1","title":"OpenCV.MergeMertens.getsaturationweight/1","type":"function"},{"doc":"","ref":"OpenCV.MergeMertens.html#process/2","title":"OpenCV.MergeMertens.process/2","type":"function"},{"doc":"Short version of process, that doesn't take extra arguments. src . dst . dst : UMat Python prototype (for reference): process ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.MergeMertens.html#process/3","title":"OpenCV.MergeMertens.process/3","type":"function"},{"doc":"","ref":"OpenCV.MergeMertens.html#setcontrastweight/2","title":"OpenCV.MergeMertens.setcontrastweight/2","type":"function"},{"doc":"","ref":"OpenCV.MergeMertens.html#setexposureweight/2","title":"OpenCV.MergeMertens.setexposureweight/2","type":"function"},{"doc":"","ref":"OpenCV.MergeMertens.html#setsaturationweight/2","title":"OpenCV.MergeMertens.setsaturationweight/2","type":"function"},{"doc":"","ref":"OpenCV.MergeRobertson.html","title":"OpenCV.MergeRobertson","type":"module"},{"doc":"","ref":"OpenCV.MergeRobertson.html#process/3","title":"OpenCV.MergeRobertson.process/3","type":"function"},{"doc":"dst : UMat Python prototype (for reference): process ( src , times [ , dst ] ) -&gt; dst","ref":"OpenCV.MergeRobertson.html#process/4","title":"OpenCV.MergeRobertson.process/4","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html","title":"OpenCV.MlANNMLP","type":"module"},{"doc":"","ref":"OpenCV.MlANNMLP.html#create/0","title":"OpenCV.MlANNMLP.create/0","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getannealcoolingratio/1","title":"OpenCV.MlANNMLP.getannealcoolingratio/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getannealfinalt/1","title":"OpenCV.MlANNMLP.getannealfinalt/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getannealinitialt/1","title":"OpenCV.MlANNMLP.getannealinitialt/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getannealiteperstep/1","title":"OpenCV.MlANNMLP.getannealiteperstep/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getbackpropmomentumscale/1","title":"OpenCV.MlANNMLP.getbackpropmomentumscale/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getbackpropweightscale/1","title":"OpenCV.MlANNMLP.getbackpropweightscale/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getlayersizes/1","title":"OpenCV.MlANNMLP.getlayersizes/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getrpropdw0/1","title":"OpenCV.MlANNMLP.getrpropdw0/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getrpropdwmax/1","title":"OpenCV.MlANNMLP.getrpropdwmax/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getrpropdwmin/1","title":"OpenCV.MlANNMLP.getrpropdwmin/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getrpropdwminus/1","title":"OpenCV.MlANNMLP.getrpropdwminus/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getrpropdwplus/1","title":"OpenCV.MlANNMLP.getrpropdwplus/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#gettermcriteria/1","title":"OpenCV.MlANNMLP.gettermcriteria/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#gettrainmethod/1","title":"OpenCV.MlANNMLP.gettrainmethod/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#getweights/2","title":"OpenCV.MlANNMLP.getweights/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#load/1","title":"OpenCV.MlANNMLP.load/1","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setactivationfunction/2","title":"OpenCV.MlANNMLP.setactivationfunction/2","type":"function"},{"doc":"Initialize the activation function for each neuron. Currently the default and the only fully supported activation function is ANN_MLP::SIGMOID_SYM. type . param1 . param2 . param1 : double param2 : double Python prototype (for reference): setActivationFunction ( type [ , param1 [ , param2 ] ] ) -&gt; None","ref":"OpenCV.MlANNMLP.html#setactivationfunction/3","title":"OpenCV.MlANNMLP.setactivationfunction/3","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setannealcoolingratio/2","title":"OpenCV.MlANNMLP.setannealcoolingratio/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setannealfinalt/2","title":"OpenCV.MlANNMLP.setannealfinalt/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setannealinitialt/2","title":"OpenCV.MlANNMLP.setannealinitialt/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setannealiteperstep/2","title":"OpenCV.MlANNMLP.setannealiteperstep/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setbackpropmomentumscale/2","title":"OpenCV.MlANNMLP.setbackpropmomentumscale/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setbackpropweightscale/2","title":"OpenCV.MlANNMLP.setbackpropweightscale/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setlayersizes/2","title":"OpenCV.MlANNMLP.setlayersizes/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setrpropdw0/2","title":"OpenCV.MlANNMLP.setrpropdw0/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setrpropdwmax/2","title":"OpenCV.MlANNMLP.setrpropdwmax/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setrpropdwmin/2","title":"OpenCV.MlANNMLP.setrpropdwmin/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setrpropdwminus/2","title":"OpenCV.MlANNMLP.setrpropdwminus/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#setrpropdwplus/2","title":"OpenCV.MlANNMLP.setrpropdwplus/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#settermcriteria/2","title":"OpenCV.MlANNMLP.settermcriteria/2","type":"function"},{"doc":"","ref":"OpenCV.MlANNMLP.html#settrainmethod/2","title":"OpenCV.MlANNMLP.settrainmethod/2","type":"function"},{"doc":"Sets training method and common parameters. method . param1 . param2 . param1 : double param2 : double Python prototype (for reference): setTrainMethod ( method [ , param1 [ , param2 ] ] ) -&gt; None","ref":"OpenCV.MlANNMLP.html#settrainmethod/3","title":"OpenCV.MlANNMLP.settrainmethod/3","type":"function"},{"doc":"","ref":"OpenCV.MlBoost.html","title":"OpenCV.MlBoost","type":"module"},{"doc":"","ref":"OpenCV.MlBoost.html#create/0","title":"OpenCV.MlBoost.create/0","type":"function"},{"doc":"","ref":"OpenCV.MlBoost.html#getboosttype/1","title":"OpenCV.MlBoost.getboosttype/1","type":"function"},{"doc":"","ref":"OpenCV.MlBoost.html#getweakcount/1","title":"OpenCV.MlBoost.getweakcount/1","type":"function"},{"doc":"","ref":"OpenCV.MlBoost.html#getweighttrimrate/1","title":"OpenCV.MlBoost.getweighttrimrate/1","type":"function"},{"doc":"","ref":"OpenCV.MlBoost.html#load/1","title":"OpenCV.MlBoost.load/1","type":"function"},{"doc":"Loads and creates a serialized Boost from a file Use Boost::save to serialize and store an RTree to disk. Load the Boost from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.MlBoost.html#load/2","title":"OpenCV.MlBoost.load/2","type":"function"},{"doc":"","ref":"OpenCV.MlBoost.html#setboosttype/2","title":"OpenCV.MlBoost.setboosttype/2","type":"function"},{"doc":"","ref":"OpenCV.MlBoost.html#setweakcount/2","title":"OpenCV.MlBoost.setweakcount/2","type":"function"},{"doc":"","ref":"OpenCV.MlBoost.html#setweighttrimrate/2","title":"OpenCV.MlBoost.setweighttrimrate/2","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html","title":"OpenCV.MlDTrees","type":"module"},{"doc":"","ref":"OpenCV.MlDTrees.html#create/0","title":"OpenCV.MlDTrees.create/0","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#getcvfolds/1","title":"OpenCV.MlDTrees.getcvfolds/1","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#getmaxcategories/1","title":"OpenCV.MlDTrees.getmaxcategories/1","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#getmaxdepth/1","title":"OpenCV.MlDTrees.getmaxdepth/1","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#getminsamplecount/1","title":"OpenCV.MlDTrees.getminsamplecount/1","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#getpriors/1","title":"OpenCV.MlDTrees.getpriors/1","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#getregressionaccuracy/1","title":"OpenCV.MlDTrees.getregressionaccuracy/1","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#gettruncateprunedtree/1","title":"OpenCV.MlDTrees.gettruncateprunedtree/1","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#getuse1serule/1","title":"OpenCV.MlDTrees.getuse1serule/1","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#getusesurrogates/1","title":"OpenCV.MlDTrees.getusesurrogates/1","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#load/1","title":"OpenCV.MlDTrees.load/1","type":"function"},{"doc":"Loads and creates a serialized DTrees from a file Use DTree::save to serialize and store an DTree to disk. Load the DTree from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.MlDTrees.html#load/2","title":"OpenCV.MlDTrees.load/2","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#setcvfolds/2","title":"OpenCV.MlDTrees.setcvfolds/2","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#setmaxcategories/2","title":"OpenCV.MlDTrees.setmaxcategories/2","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#setmaxdepth/2","title":"OpenCV.MlDTrees.setmaxdepth/2","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#setminsamplecount/2","title":"OpenCV.MlDTrees.setminsamplecount/2","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#setpriors/2","title":"OpenCV.MlDTrees.setpriors/2","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#setregressionaccuracy/2","title":"OpenCV.MlDTrees.setregressionaccuracy/2","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#settruncateprunedtree/2","title":"OpenCV.MlDTrees.settruncateprunedtree/2","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#setuse1serule/2","title":"OpenCV.MlDTrees.setuse1serule/2","type":"function"},{"doc":"","ref":"OpenCV.MlDTrees.html#setusesurrogates/2","title":"OpenCV.MlDTrees.setusesurrogates/2","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html","title":"OpenCV.MlEM","type":"module"},{"doc":"","ref":"OpenCV.MlEM.html#create/0","title":"OpenCV.MlEM.create/0","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#getclustersnumber/1","title":"OpenCV.MlEM.getclustersnumber/1","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#getcovariancematrixtype/1","title":"OpenCV.MlEM.getcovariancematrixtype/1","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#getcovs/1","title":"OpenCV.MlEM.getcovs/1","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#getmeans/1","title":"OpenCV.MlEM.getmeans/1","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#gettermcriteria/1","title":"OpenCV.MlEM.gettermcriteria/1","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#getweights/1","title":"OpenCV.MlEM.getweights/1","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#load/1","title":"OpenCV.MlEM.load/1","type":"function"},{"doc":"Loads and creates a serialized EM from a file Use EM::save to serialize and store an EM to disk. Load the EM from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.MlEM.html#load/2","title":"OpenCV.MlEM.load/2","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#predict/2","title":"OpenCV.MlEM.predict/2","type":"function"},{"doc":"Returns posterior probabilities for the provided samples samples . results . posterior probabilities for each sample from the input flags . results : UMat flags : int Python prototype (for reference): predict ( samples [ , results [ , flags ] ] ) -&gt; retval , results","ref":"OpenCV.MlEM.html#predict/3","title":"OpenCV.MlEM.predict/3","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#predict2/2","title":"OpenCV.MlEM.predict2/2","type":"function"},{"doc":"Returns a likelihood logarithm value and an index of the most probable mixture component for the given sample. sample . \\f$1 \\times dims\\f$ or \\f$dims \\times 1\\f$ size. probs . given the sample. It has \\f$1 \\times nclusters\\f$ size and CV_64FC1 type. The method returns a two-element double vector. Zero element is a likelihood logarithm value for the sample. First element is an index of the most probable mixture component for the given sample. probs : UMat Python prototype (for reference): predict2 ( sample [ , probs ] ) -&gt; retval , probs","ref":"OpenCV.MlEM.html#predict2/3","title":"OpenCV.MlEM.predict2/3","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#setclustersnumber/2","title":"OpenCV.MlEM.setclustersnumber/2","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#setcovariancematrixtype/2","title":"OpenCV.MlEM.setcovariancematrixtype/2","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#settermcriteria/2","title":"OpenCV.MlEM.settermcriteria/2","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#traine/3","title":"OpenCV.MlEM.traine/3","type":"function"},{"doc":"Estimate the Gaussian mixture parameters from a samples set. This variation starts with Expectation step. You need to provide initial means \\f$a_k\\f$ of mixture components. Optionally you can pass initial weights \\f$\\pi_k\\f$ and covariance matrices \\f$S_k\\f$ of mixture components. samples . one-channel matrix, each row of which is a sample. If the matrix does not have CV_64F type it will be converted to the inner matrix of such type for the further computing. means0 . \\f$nclusters \\times dims\\f$ size. If the matrix does not have CV_64F type it will be converted to the inner matrix of such type for the further computing. covs0 . covariance matrices is a one-channel matrix of \\f$dims \\times dims\\f$ size. If the matrices do not have CV_64F type they will be converted to the inner matrices of such type for the further computing. weights0 . floating-point matrix with \\f$1 \\times nclusters\\f$ or \\f$nclusters \\times 1\\f$ size. logLikelihoods . each sample. It has \\f$nsamples \\times 1\\f$ size and CV_64FC1 type. labels . \\f$\\texttt{labels}_i=\\texttt{arg max}_k(p_{i,k}), i=1..N\\f$ (indices of the most probable mixture component for each sample). It has \\f$nsamples \\times 1\\f$ size and CV_32SC1 type. probs . mixture component given the each sample. It has \\f$nsamples \\times nclusters\\f$ size and CV_64FC1 type. covs0 : UMat weights0 : UMat logLikelihoods : UMat labels : UMat probs : UMat Python prototype (for reference): trainE ( samples , means0 [ , covs0 [ , weights0 [ , logLikelihoods [ , labels [ , probs ] ] ] ] ] ) -&gt; retval , logLikelihoods , labels , probs","ref":"OpenCV.MlEM.html#traine/4","title":"OpenCV.MlEM.traine/4","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#trainem/2","title":"OpenCV.MlEM.trainem/2","type":"function"},{"doc":"Estimate the Gaussian mixture parameters from a samples set. This variation starts with Expectation step. Initial values of the model parameters will be estimated by the k-means algorithm. Unlike many of the ML models, %EM is an unsupervised learning algorithm and it does not take responses (class labels or function values) as input. Instead, it computes the Maximum Likelihood Estimate of the Gaussian mixture parameters from an input sample set, stores all the parameters inside the structure: \\f$p_{i,k}\\f$ in probs, \\f$a_k\\f$ in means , \\f$S_k\\f$ in covs[k], \\f$\\pi_k\\f$ in weights , and optionally computes the output &quot;class label&quot; for each sample: \\f$\\texttt{labels}_i=\\texttt{arg max}_k(p_{i,k}), i=1..N\\f$ (indices of the most probable mixture component for each sample). The trained model can be used further for prediction, just like any other classifier. The trained model is similar to the NormalBayesClassifier. samples . one-channel matrix, each row of which is a sample. If the matrix does not have CV_64F type it will be converted to the inner matrix of such type for the further computing. logLikelihoods . each sample. It has \\f$nsamples \\times 1\\f$ size and CV_64FC1 type. labels . \\f$\\texttt{labels}_i=\\texttt{arg max}_k(p_{i,k}), i=1..N\\f$ (indices of the most probable mixture component for each sample). It has \\f$nsamples \\times 1\\f$ size and CV_32SC1 type. probs . mixture component given the each sample. It has \\f$nsamples \\times nclusters\\f$ size and CV_64FC1 type. logLikelihoods : UMat labels : UMat probs : UMat Python prototype (for reference): trainEM ( samples [ , logLikelihoods [ , labels [ , probs ] ] ] ) -&gt; retval , logLikelihoods , labels , probs","ref":"OpenCV.MlEM.html#trainem/3","title":"OpenCV.MlEM.trainem/3","type":"function"},{"doc":"","ref":"OpenCV.MlEM.html#trainm/3","title":"OpenCV.MlEM.trainm/3","type":"function"},{"doc":"Estimate the Gaussian mixture parameters from a samples set. This variation starts with Maximization step. You need to provide initial probabilities \\f$p_{i,k}\\f$ to use this option. samples . one-channel matrix, each row of which is a sample. If the matrix does not have CV_64F type it will be converted to the inner matrix of such type for the further computing. probs0 . logLikelihoods . each sample. It has \\f$nsamples \\times 1\\f$ size and CV_64FC1 type. labels . \\f$\\texttt{labels}_i=\\texttt{arg max}_k(p_{i,k}), i=1..N\\f$ (indices of the most probable mixture component for each sample). It has \\f$nsamples \\times 1\\f$ size and CV_32SC1 type. probs . mixture component given the each sample. It has \\f$nsamples \\times nclusters\\f$ size and CV_64FC1 type. logLikelihoods : UMat labels : UMat probs : UMat Python prototype (for reference): trainM ( samples , probs0 [ , logLikelihoods [ , labels [ , probs ] ] ] ) -&gt; retval , logLikelihoods , labels , probs","ref":"OpenCV.MlEM.html#trainm/4","title":"OpenCV.MlEM.trainm/4","type":"function"},{"doc":"","ref":"OpenCV.MlKNearest.html","title":"OpenCV.MlKNearest","type":"module"},{"doc":"","ref":"OpenCV.MlKNearest.html#create/0","title":"OpenCV.MlKNearest.create/0","type":"function"},{"doc":"","ref":"OpenCV.MlKNearest.html#findnearest/3","title":"OpenCV.MlKNearest.findnearest/3","type":"function"},{"doc":"Finds the neighbors and predicts responses for input vectors. samples . &lt;number_of_samples&gt; * k size. k . results . sample. It is a single-precision floating-point vector with &lt;number_of_samples&gt; elements. neighborResponses . precision floating-point matrix of &lt;number_of_samples&gt; * k size. dist . is a single-precision floating-point matrix of &lt;number_of_samples&gt; * k size. For each input vector (a row of the matrix samples), the method finds the k nearest neighbors. In case of regression, the predicted result is a mean value of the particular vector's neighbor responses. In case of classification, the class is determined by voting. For each input vector, the neighbors are sorted by their distances to the vector. In case of C++ interface you can use output pointers to empty matrices and the function will allocate memory itself. If only a single input vector is passed, all output matrices are optional and the predicted value is returned by the method. The function is parallelized with the TBB library. results : UMat neighborResponses : UMat dist : UMat Python prototype (for reference): findNearest ( samples , k [ , results [ , neighborResponses [ , dist ] ] ] ) -&gt; retval , results , neighborResponses , dist","ref":"OpenCV.MlKNearest.html#findnearest/4","title":"OpenCV.MlKNearest.findnearest/4","type":"function"},{"doc":"","ref":"OpenCV.MlKNearest.html#getalgorithmtype/1","title":"OpenCV.MlKNearest.getalgorithmtype/1","type":"function"},{"doc":"","ref":"OpenCV.MlKNearest.html#getdefaultk/1","title":"OpenCV.MlKNearest.getdefaultk/1","type":"function"},{"doc":"","ref":"OpenCV.MlKNearest.html#getemax/1","title":"OpenCV.MlKNearest.getemax/1","type":"function"},{"doc":"","ref":"OpenCV.MlKNearest.html#getisclassifier/1","title":"OpenCV.MlKNearest.getisclassifier/1","type":"function"},{"doc":"","ref":"OpenCV.MlKNearest.html#load/1","title":"OpenCV.MlKNearest.load/1","type":"function"},{"doc":"","ref":"OpenCV.MlKNearest.html#setalgorithmtype/2","title":"OpenCV.MlKNearest.setalgorithmtype/2","type":"function"},{"doc":"","ref":"OpenCV.MlKNearest.html#setdefaultk/2","title":"OpenCV.MlKNearest.setdefaultk/2","type":"function"},{"doc":"","ref":"OpenCV.MlKNearest.html#setemax/2","title":"OpenCV.MlKNearest.setemax/2","type":"function"},{"doc":"","ref":"OpenCV.MlKNearest.html#setisclassifier/2","title":"OpenCV.MlKNearest.setisclassifier/2","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html","title":"OpenCV.MlLogisticRegression","type":"module"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#create/0","title":"OpenCV.MlLogisticRegression.create/0","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#get_learnt_thetas/1","title":"OpenCV.MlLogisticRegression.get_learnt_thetas/1","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#getiterations/1","title":"OpenCV.MlLogisticRegression.getiterations/1","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#getlearningrate/1","title":"OpenCV.MlLogisticRegression.getlearningrate/1","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#getminibatchsize/1","title":"OpenCV.MlLogisticRegression.getminibatchsize/1","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#getregularization/1","title":"OpenCV.MlLogisticRegression.getregularization/1","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#gettermcriteria/1","title":"OpenCV.MlLogisticRegression.gettermcriteria/1","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#gettrainmethod/1","title":"OpenCV.MlLogisticRegression.gettrainmethod/1","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#load/1","title":"OpenCV.MlLogisticRegression.load/1","type":"function"},{"doc":"Loads and creates a serialized LogisticRegression from a file Use LogisticRegression::save to serialize and store an LogisticRegression to disk. Load the LogisticRegression from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.MlLogisticRegression.html#load/2","title":"OpenCV.MlLogisticRegression.load/2","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#predict/2","title":"OpenCV.MlLogisticRegression.predict/2","type":"function"},{"doc":"Predicts responses for input samples and returns a float type. samples . contains variables (features) of one object being classified. Should have data type CV_32F. results . flags . results : UMat flags : int Python prototype (for reference): predict ( samples [ , results [ , flags ] ] ) -&gt; retval , results","ref":"OpenCV.MlLogisticRegression.html#predict/3","title":"OpenCV.MlLogisticRegression.predict/3","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#setiterations/2","title":"OpenCV.MlLogisticRegression.setiterations/2","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#setlearningrate/2","title":"OpenCV.MlLogisticRegression.setlearningrate/2","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#setminibatchsize/2","title":"OpenCV.MlLogisticRegression.setminibatchsize/2","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#setregularization/2","title":"OpenCV.MlLogisticRegression.setregularization/2","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#settermcriteria/2","title":"OpenCV.MlLogisticRegression.settermcriteria/2","type":"function"},{"doc":"","ref":"OpenCV.MlLogisticRegression.html#settrainmethod/2","title":"OpenCV.MlLogisticRegression.settrainmethod/2","type":"function"},{"doc":"","ref":"OpenCV.MlNormalBayesClassifier.html","title":"OpenCV.MlNormalBayesClassifier","type":"module"},{"doc":"","ref":"OpenCV.MlNormalBayesClassifier.html#create/0","title":"OpenCV.MlNormalBayesClassifier.create/0","type":"function"},{"doc":"","ref":"OpenCV.MlNormalBayesClassifier.html#load/1","title":"OpenCV.MlNormalBayesClassifier.load/1","type":"function"},{"doc":"Loads and creates a serialized NormalBayesClassifier from a file Use NormalBayesClassifier::save to serialize and store an NormalBayesClassifier to disk. Load the NormalBayesClassifier from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.MlNormalBayesClassifier.html#load/2","title":"OpenCV.MlNormalBayesClassifier.load/2","type":"function"},{"doc":"","ref":"OpenCV.MlNormalBayesClassifier.html#predictprob/2","title":"OpenCV.MlNormalBayesClassifier.predictprob/2","type":"function"},{"doc":"Predicts the response for sample(s). The method estimates the most probable classes for input vectors. Input vectors (one or more) are stored as rows of the matrix inputs. In case of multiple input vectors, there should be one output vector outputs. The predicted class for a single input vector is returned by the method. The vector outputProbs contains the output probabilities corresponding to each element of result. outputs : UMat outputProbs : UMat flags : int Python prototype (for reference): predictProb ( inputs [ , outputs [ , outputProbs [ , flags ] ] ] ) -&gt; retval , outputs , outputProbs","ref":"OpenCV.MlNormalBayesClassifier.html#predictprob/3","title":"OpenCV.MlNormalBayesClassifier.predictprob/3","type":"function"},{"doc":"","ref":"OpenCV.MlParamGrid.html","title":"OpenCV.MlParamGrid","type":"module"},{"doc":"","ref":"OpenCV.MlParamGrid.html#create/0","title":"OpenCV.MlParamGrid.create/0","type":"function"},{"doc":"Creates a ParamGrid Ptr that can be given to the %SVM::trainAuto method minVal . maxVal . logstep . minVal : double maxVal : double logstep : double Python prototype (for reference): create ( [ , minVal [ , maxVal [ , logstep ] ] ] ) -&gt; retval","ref":"OpenCV.MlParamGrid.html#create/1","title":"OpenCV.MlParamGrid.create/1","type":"function"},{"doc":"","ref":"OpenCV.MlParamGrid.html#logstep/1","title":"OpenCV.MlParamGrid.logstep/1","type":"function"},{"doc":"","ref":"OpenCV.MlParamGrid.html#maxval/1","title":"OpenCV.MlParamGrid.maxval/1","type":"function"},{"doc":"","ref":"OpenCV.MlParamGrid.html#minval/1","title":"OpenCV.MlParamGrid.minval/1","type":"function"},{"doc":"","ref":"OpenCV.MlParamGrid.html#set_logstep/2","title":"OpenCV.MlParamGrid.set_logstep/2","type":"function"},{"doc":"","ref":"OpenCV.MlParamGrid.html#set_maxval/2","title":"OpenCV.MlParamGrid.set_maxval/2","type":"function"},{"doc":"","ref":"OpenCV.MlParamGrid.html#set_minval/2","title":"OpenCV.MlParamGrid.set_minval/2","type":"function"},{"doc":"","ref":"OpenCV.MlRTrees.html","title":"OpenCV.MlRTrees","type":"module"},{"doc":"","ref":"OpenCV.MlRTrees.html#create/0","title":"OpenCV.MlRTrees.create/0","type":"function"},{"doc":"","ref":"OpenCV.MlRTrees.html#getactivevarcount/1","title":"OpenCV.MlRTrees.getactivevarcount/1","type":"function"},{"doc":"","ref":"OpenCV.MlRTrees.html#getcalculatevarimportance/1","title":"OpenCV.MlRTrees.getcalculatevarimportance/1","type":"function"},{"doc":"","ref":"OpenCV.MlRTrees.html#getooberror/1","title":"OpenCV.MlRTrees.getooberror/1","type":"function"},{"doc":"","ref":"OpenCV.MlRTrees.html#gettermcriteria/1","title":"OpenCV.MlRTrees.gettermcriteria/1","type":"function"},{"doc":"","ref":"OpenCV.MlRTrees.html#getvarimportance/1","title":"OpenCV.MlRTrees.getvarimportance/1","type":"function"},{"doc":"","ref":"OpenCV.MlRTrees.html#getvotes/3","title":"OpenCV.MlRTrees.getvotes/3","type":"function"},{"doc":"Returns the result of each individual tree in the forest. In case the model is a regression problem, the method will return each of the trees' results for each of the sample cases. If the model is a classifier, it will return a Mat with samples + 1 rows, where the first row gives the class number and the following rows return the votes each class had for each sample. samples . results . flags . results : UMat Python prototype (for reference): getVotes ( samples , flags [ , results ] ) -&gt; results","ref":"OpenCV.MlRTrees.html#getvotes/4","title":"OpenCV.MlRTrees.getvotes/4","type":"function"},{"doc":"","ref":"OpenCV.MlRTrees.html#load/1","title":"OpenCV.MlRTrees.load/1","type":"function"},{"doc":"Loads and creates a serialized RTree from a file Use RTree::save to serialize and store an RTree to disk. Load the RTree from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.MlRTrees.html#load/2","title":"OpenCV.MlRTrees.load/2","type":"function"},{"doc":"","ref":"OpenCV.MlRTrees.html#setactivevarcount/2","title":"OpenCV.MlRTrees.setactivevarcount/2","type":"function"},{"doc":"","ref":"OpenCV.MlRTrees.html#setcalculatevarimportance/2","title":"OpenCV.MlRTrees.setcalculatevarimportance/2","type":"function"},{"doc":"","ref":"OpenCV.MlRTrees.html#settermcriteria/2","title":"OpenCV.MlRTrees.settermcriteria/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html","title":"OpenCV.MlSVM","type":"module"},{"doc":"","ref":"OpenCV.MlSVM.html#create/0","title":"OpenCV.MlSVM.create/0","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#getc/1","title":"OpenCV.MlSVM.getc/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#getclassweights/1","title":"OpenCV.MlSVM.getclassweights/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#getcoef0/1","title":"OpenCV.MlSVM.getcoef0/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#getdecisionfunction/2","title":"OpenCV.MlSVM.getdecisionfunction/2","type":"function"},{"doc":"Retrieves the decision function i . 2-class classification, then there will be just one decision function and the index should always be 0. Otherwise, in the case of N-class classification, there will be \\f$N(N-1)/2\\f$ decision functions. alpha . In the case of linear %SVM all the alpha's will be 1's. svidx . support vectors (which can be retrieved by SVM::getSupportVectors). In the case of linear %SVM each decision function consists of a single &quot;compressed&quot; support vector. The method returns rho parameter of the decision function, a scalar subtracted from the weighted sum of kernel responses. alpha : UMat svidx : UMat Python prototype (for reference): getDecisionFunction ( i [ , alpha [ , svidx ] ] ) -&gt; retval , alpha , svidx","ref":"OpenCV.MlSVM.html#getdecisionfunction/3","title":"OpenCV.MlSVM.getdecisionfunction/3","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#getdefaultgridptr/1","title":"OpenCV.MlSVM.getdefaultgridptr/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#getdegree/1","title":"OpenCV.MlSVM.getdegree/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#getgamma/1","title":"OpenCV.MlSVM.getgamma/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#getkerneltype/1","title":"OpenCV.MlSVM.getkerneltype/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#getnu/1","title":"OpenCV.MlSVM.getnu/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#getp/1","title":"OpenCV.MlSVM.getp/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#getsupportvectors/1","title":"OpenCV.MlSVM.getsupportvectors/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#gettermcriteria/1","title":"OpenCV.MlSVM.gettermcriteria/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#gettype/1","title":"OpenCV.MlSVM.gettype/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#getuncompressedsupportvectors/1","title":"OpenCV.MlSVM.getuncompressedsupportvectors/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#load/1","title":"OpenCV.MlSVM.load/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#setc/2","title":"OpenCV.MlSVM.setc/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#setclassweights/2","title":"OpenCV.MlSVM.setclassweights/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#setcoef0/2","title":"OpenCV.MlSVM.setcoef0/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#setdegree/2","title":"OpenCV.MlSVM.setdegree/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#setgamma/2","title":"OpenCV.MlSVM.setgamma/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#setkernel/2","title":"OpenCV.MlSVM.setkernel/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#setnu/2","title":"OpenCV.MlSVM.setnu/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#setp/2","title":"OpenCV.MlSVM.setp/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#settermcriteria/2","title":"OpenCV.MlSVM.settermcriteria/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#settype/2","title":"OpenCV.MlSVM.settype/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVM.html#trainauto/4","title":"OpenCV.MlSVM.trainauto/4","type":"function"},{"doc":"Trains an %SVM with optimal parameters samples . layout . responses . kFold . subset is used to test the model, the others form the train set. So, the %SVM algorithm is cgrid . gammaGrid . pGrid . nuGrid . coeffGrid . degreeGrid . balanced . balanced cross-validation subsets that is proportions between classes in subsets are close to such proportion in the whole train dataset. The method trains the %SVM model automatically by choosing the optimal parameters C, gamma, p, nu, coef0, degree. Parameters are considered optimal when the cross-validation estimate of the test set error is minimal. This function only makes use of SVM::getDefaultGrid for parameter optimization and thus only offers rudimentary parameter options. This function works for the classification (SVM::C_SVC or SVM::NU_SVC) as well as for the regression (SVM::EPS_SVR or SVM::NU_SVR). If it is SVM::ONE_CLASS, no optimization is made and the usual %SVM with parameters specified in params is executed. kFold : int cgrid : Ptr&lt;ParamGrid&gt; gammaGrid : Ptr&lt;ParamGrid&gt; pGrid : Ptr&lt;ParamGrid&gt; nuGrid : Ptr&lt;ParamGrid&gt; coeffGrid : Ptr&lt;ParamGrid&gt; degreeGrid : Ptr&lt;ParamGrid&gt; balanced : bool Python prototype (for reference): trainAuto ( samples , layout , responses [ , kFold [ , Cgrid [ , gammaGrid [ , pGrid [ , nuGrid [ , coeffGrid [ , degreeGrid [ , balanced ] ] ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.MlSVM.html#trainauto/5","title":"OpenCV.MlSVM.trainauto/5","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html","title":"OpenCV.MlSVMSGD","type":"module"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#create/0","title":"OpenCV.MlSVMSGD.create/0","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#getinitialstepsize/1","title":"OpenCV.MlSVMSGD.getinitialstepsize/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#getmarginregularization/1","title":"OpenCV.MlSVMSGD.getmarginregularization/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#getmargintype/1","title":"OpenCV.MlSVMSGD.getmargintype/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#getshift/1","title":"OpenCV.MlSVMSGD.getshift/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#getstepdecreasingpower/1","title":"OpenCV.MlSVMSGD.getstepdecreasingpower/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#getsvmsgdtype/1","title":"OpenCV.MlSVMSGD.getsvmsgdtype/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#gettermcriteria/1","title":"OpenCV.MlSVMSGD.gettermcriteria/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#getweights/1","title":"OpenCV.MlSVMSGD.getweights/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#load/1","title":"OpenCV.MlSVMSGD.load/1","type":"function"},{"doc":"Loads and creates a serialized SVMSGD from a file Use SVMSGD::save to serialize and store an SVMSGD to disk. Load the SVMSGD from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier filepath . nodeName . nodeName : String Python prototype (for reference): load ( filepath [ , nodeName ] ) -&gt; retval","ref":"OpenCV.MlSVMSGD.html#load/2","title":"OpenCV.MlSVMSGD.load/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#setinitialstepsize/2","title":"OpenCV.MlSVMSGD.setinitialstepsize/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#setmarginregularization/2","title":"OpenCV.MlSVMSGD.setmarginregularization/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#setmargintype/2","title":"OpenCV.MlSVMSGD.setmargintype/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#setoptimalparameters/1","title":"OpenCV.MlSVMSGD.setoptimalparameters/1","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#setstepdecreasingpower/2","title":"OpenCV.MlSVMSGD.setstepdecreasingpower/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#setsvmsgdtype/2","title":"OpenCV.MlSVMSGD.setsvmsgdtype/2","type":"function"},{"doc":"","ref":"OpenCV.MlSVMSGD.html#settermcriteria/2","title":"OpenCV.MlSVMSGD.settermcriteria/2","type":"function"},{"doc":"","ref":"OpenCV.MlStatModel.html","title":"OpenCV.MlStatModel","type":"module"},{"doc":"","ref":"OpenCV.MlStatModel.html#calcerror/3","title":"OpenCV.MlStatModel.calcerror/3","type":"function"},{"doc":"Computes error on the training or test dataset data . test . computed over the training subset of the data. Please note that if you loaded a completely different dataset to evaluate already trained classifier, you will probably want not to set the test subset at all with TrainData::setTrainTestSplitRatio and specify test=false, so that the error is computed for the whole new set. Yes, this sounds a bit confusing. resp . The method uses StatModel::predict to compute the error. For regression models the error is computed as RMS, for classifiers - as a percent of missclassified samples (0%-100%). resp : UMat Python prototype (for reference): calcError ( data , test [ , resp ] ) -&gt; retval , resp","ref":"OpenCV.MlStatModel.html#calcerror/4","title":"OpenCV.MlStatModel.calcerror/4","type":"function"},{"doc":"","ref":"OpenCV.MlStatModel.html#empty/1","title":"OpenCV.MlStatModel.empty/1","type":"function"},{"doc":"","ref":"OpenCV.MlStatModel.html#getvarcount/1","title":"OpenCV.MlStatModel.getvarcount/1","type":"function"},{"doc":"","ref":"OpenCV.MlStatModel.html#isclassifier/1","title":"OpenCV.MlStatModel.isclassifier/1","type":"function"},{"doc":"","ref":"OpenCV.MlStatModel.html#istrained/1","title":"OpenCV.MlStatModel.istrained/1","type":"function"},{"doc":"","ref":"OpenCV.MlStatModel.html#predict/2","title":"OpenCV.MlStatModel.predict/2","type":"function"},{"doc":"Predicts response(s) for the provided sample(s) samples . results . flags . results : UMat flags : int Python prototype (for reference): predict ( samples [ , results [ , flags ] ] ) -&gt; retval , results","ref":"OpenCV.MlStatModel.html#predict/3","title":"OpenCV.MlStatModel.predict/3","type":"function"},{"doc":"","ref":"OpenCV.MlStatModel.html#train/2","title":"OpenCV.MlStatModel.train/2","type":"function"},{"doc":"","ref":"OpenCV.MlStatModel.html#train/3","title":"OpenCV.MlStatModel.train/3","type":"function"},{"doc":"","ref":"OpenCV.MlStatModel.html#train/4","title":"OpenCV.MlStatModel.train/4","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html","title":"OpenCV.MlTrainData","type":"module"},{"doc":"","ref":"OpenCV.MlTrainData.html#create/3","title":"OpenCV.MlTrainData.create/3","type":"function"},{"doc":"Creates training data from in-memory arrays. samples . layout . responses . single row or as a single column. The matrix should have type CV_32F or CV_32S (in the former case the responses are considered as ordered by default; in the latter case - as categorical) varIdx . (CV_32S) containing 0-based variable indices or byte vector (CV_8U) containing a mask of active variables. sampleIdx . vector (CV_32S) containing 0-based sample indices or byte vector (CV_8U) containing a mask of training samples. sampleWeights . varType . &lt;number_of_variables_in_responses&gt;`, containing types of each input and output variable. See ml::VariableTypes. varIdx : UMat sampleIdx : UMat sampleWeights : UMat varType : UMat Python prototype (for reference): create ( samples , layout , responses [ , varIdx [ , sampleIdx [ , sampleWeights [ , varType ] ] ] ] ) -&gt; retval","ref":"OpenCV.MlTrainData.html#create/4","title":"OpenCV.MlTrainData.create/4","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getcatcount/2","title":"OpenCV.MlTrainData.getcatcount/2","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getcatmap/1","title":"OpenCV.MlTrainData.getcatmap/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getcatofs/1","title":"OpenCV.MlTrainData.getcatofs/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getclasslabels/1","title":"OpenCV.MlTrainData.getclasslabels/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getdefaultsubstvalues/1","title":"OpenCV.MlTrainData.getdefaultsubstvalues/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getlayout/1","title":"OpenCV.MlTrainData.getlayout/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getmissing/1","title":"OpenCV.MlTrainData.getmissing/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getnallvars/1","title":"OpenCV.MlTrainData.getnallvars/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getnames/2","title":"OpenCV.MlTrainData.getnames/2","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getnormcatresponses/1","title":"OpenCV.MlTrainData.getnormcatresponses/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getnsamples/1","title":"OpenCV.MlTrainData.getnsamples/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getntestsamples/1","title":"OpenCV.MlTrainData.getntestsamples/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getntrainsamples/1","title":"OpenCV.MlTrainData.getntrainsamples/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getnvars/1","title":"OpenCV.MlTrainData.getnvars/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getresponses/1","title":"OpenCV.MlTrainData.getresponses/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getresponsetype/1","title":"OpenCV.MlTrainData.getresponsetype/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getsample/4","title":"OpenCV.MlTrainData.getsample/4","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getsamples/1","title":"OpenCV.MlTrainData.getsamples/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getsampleweights/1","title":"OpenCV.MlTrainData.getsampleweights/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getsubmatrix/3","title":"OpenCV.MlTrainData.getsubmatrix/3","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getsubvector/2","title":"OpenCV.MlTrainData.getsubvector/2","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#gettestnormcatresponses/1","title":"OpenCV.MlTrainData.gettestnormcatresponses/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#gettestresponses/1","title":"OpenCV.MlTrainData.gettestresponses/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#gettestsampleidx/1","title":"OpenCV.MlTrainData.gettestsampleidx/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#gettestsamples/1","title":"OpenCV.MlTrainData.gettestsamples/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#gettestsampleweights/1","title":"OpenCV.MlTrainData.gettestsampleweights/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#gettrainnormcatresponses/1","title":"OpenCV.MlTrainData.gettrainnormcatresponses/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#gettrainresponses/1","title":"OpenCV.MlTrainData.gettrainresponses/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#gettrainsampleidx/1","title":"OpenCV.MlTrainData.gettrainsampleidx/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#gettrainsamples/1","title":"OpenCV.MlTrainData.gettrainsamples/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#gettrainsampleweights/1","title":"OpenCV.MlTrainData.gettrainsampleweights/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getvalues/4","title":"OpenCV.MlTrainData.getvalues/4","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getvaridx/1","title":"OpenCV.MlTrainData.getvaridx/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getvarsymbolflags/1","title":"OpenCV.MlTrainData.getvarsymbolflags/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#getvartype/1","title":"OpenCV.MlTrainData.getvartype/1","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#settraintestsplit/2","title":"OpenCV.MlTrainData.settraintestsplit/2","type":"function"},{"doc":"Splits the training data into the training and test parts @sa TrainData::setTrainTestSplitRatio shuffle : bool Python prototype (for reference): setTrainTestSplit ( count [ , shuffle ] ) -&gt; None","ref":"OpenCV.MlTrainData.html#settraintestsplit/3","title":"OpenCV.MlTrainData.settraintestsplit/3","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#settraintestsplitratio/2","title":"OpenCV.MlTrainData.settraintestsplitratio/2","type":"function"},{"doc":"Splits the training data into the training and test parts The function selects a subset of specified relative size and then returns it as the training set. If the function is not called, all the data is used for training. Please, note that for each of TrainData::getTrain* there is corresponding TrainData::getTest*, so that the test subset can be retrieved and processed as well. @sa TrainData::setTrainTestSplit shuffle : bool Python prototype (for reference): setTrainTestSplitRatio ( ratio [ , shuffle ] ) -&gt; None","ref":"OpenCV.MlTrainData.html#settraintestsplitratio/3","title":"OpenCV.MlTrainData.settraintestsplitratio/3","type":"function"},{"doc":"","ref":"OpenCV.MlTrainData.html#shuffletraintest/1","title":"OpenCV.MlTrainData.shuffletraintest/1","type":"function"},{"doc":"OpenCV mat to Nx tensor. :nx is an optional dependency, so if you want to use OpenCV.Nx.to_nx/1 , you need to add it to the dependency list.","ref":"OpenCV.Nx.html","title":"OpenCV.Nx","type":"module"},{"doc":"Transform an OpenCV.Mat #Reference to #Nx.tensor Example { :ok , mat } = OpenCV . imread ( &quot;/path/to/exist/img.png&quot; ) nx_tensor = OpenCV.Nx . to_nx ( mat ) # Nx.Tensor &lt; u8 [ 1080 ] [ 1920 ] [ 3 ] [ [ ... pixel data ... ] ] &gt;","ref":"OpenCV.Nx.html#to_nx/1","title":"OpenCV.Nx.to_nx/1","type":"function"},{"doc":"","ref":"OpenCV.ORB.html","title":"OpenCV.ORB","type":"module"},{"doc":"","ref":"OpenCV.ORB.html#create/0","title":"OpenCV.ORB.create/0","type":"function"},{"doc":"The ORB constructor nfeatures . scaleFactor . pyramid, where each next level has 4x less pixels than the previous, but such a big scale factor will degrade feature matching scores dramatically. On the other hand, too close to 1 scale factor will mean that to cover certain scale range you will need more pyramid levels and so the speed will suffer. nlevels . input_image_linear_size/pow(scaleFactor, nlevels - firstLevel). edgeThreshold . roughly match the patchSize parameter. firstLevel . with upscaled source image. wTA_K . default value 2 means the BRIEF where we take a random point pair and compare their brightnesses, so we get 0/1 response. Other possible values are 3 and 4. For example, 3 means that we take 3 random points (of course, those point coordinates are random, but they are generated from the pre-defined seed, so each element of BRIEF descriptor is computed deterministically from the pixel rectangle), find point of maximum brightness and output index of the winner (0, 1 or 2). Such output will occupy 2 bits, and therefore it will need a special variant of Hamming distance, denoted as NORM_HAMMING2 (2 bits per bin). When WTA_K=4, we take 4 random points to compute each bin (that will also occupy 2 bits with possible values 0, 1, 2 or 3). scoreType . (the score is written to KeyPoint::score and is used to retain best nfeatures features); FAST_SCORE is alternative value of the parameter that produces slightly less stable keypoints, but it is a little faster to compute. patchSize . pyramid layers the perceived image area covered by a feature will be larger. fastThreshold . nfeatures : int scaleFactor : float nlevels : int edgeThreshold : int firstLevel : int wTA_K : int scoreType : ORB_ScoreType patchSize : int fastThreshold : int Python prototype (for reference): create ( [ , nfeatures [ , scaleFactor [ , nlevels [ , edgeThreshold [ , firstLevel [ , WTA_K [ , scoreType [ , patchSize [ , fastThreshold ] ] ] ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.ORB.html#create/1","title":"OpenCV.ORB.create/1","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#getdefaultname/1","title":"OpenCV.ORB.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#getedgethreshold/1","title":"OpenCV.ORB.getedgethreshold/1","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#getfastthreshold/1","title":"OpenCV.ORB.getfastthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#getfirstlevel/1","title":"OpenCV.ORB.getfirstlevel/1","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#getmaxfeatures/1","title":"OpenCV.ORB.getmaxfeatures/1","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#getnlevels/1","title":"OpenCV.ORB.getnlevels/1","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#getpatchsize/1","title":"OpenCV.ORB.getpatchsize/1","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#getscalefactor/1","title":"OpenCV.ORB.getscalefactor/1","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#getscoretype/1","title":"OpenCV.ORB.getscoretype/1","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#getwta_k/1","title":"OpenCV.ORB.getwta_k/1","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#setedgethreshold/2","title":"OpenCV.ORB.setedgethreshold/2","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#setfastthreshold/2","title":"OpenCV.ORB.setfastthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#setfirstlevel/2","title":"OpenCV.ORB.setfirstlevel/2","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#setmaxfeatures/2","title":"OpenCV.ORB.setmaxfeatures/2","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#setnlevels/2","title":"OpenCV.ORB.setnlevels/2","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#setpatchsize/2","title":"OpenCV.ORB.setpatchsize/2","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#setscalefactor/2","title":"OpenCV.ORB.setscalefactor/2","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#setscoretype/2","title":"OpenCV.ORB.setscoretype/2","type":"function"},{"doc":"","ref":"OpenCV.ORB.html#setwta_k/2","title":"OpenCV.ORB.setwta_k/2","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html","title":"OpenCV.OclDevice","type":"module"},{"doc":"","ref":"OpenCV.OclDevice.html#addressbits/1","title":"OpenCV.OclDevice.addressbits/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#available/1","title":"OpenCV.OclDevice.available/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#compileravailable/1","title":"OpenCV.OclDevice.compileravailable/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#deviceversionmajor/1","title":"OpenCV.OclDevice.deviceversionmajor/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#deviceversionminor/1","title":"OpenCV.OclDevice.deviceversionminor/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#doublefpconfig/1","title":"OpenCV.OclDevice.doublefpconfig/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#driverversion/1","title":"OpenCV.OclDevice.driverversion/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#endianlittle/1","title":"OpenCV.OclDevice.endianlittle/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#errorcorrectionsupport/1","title":"OpenCV.OclDevice.errorcorrectionsupport/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#executioncapabilities/1","title":"OpenCV.OclDevice.executioncapabilities/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#extensions/1","title":"OpenCV.OclDevice.extensions/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#getdefault/0","title":"OpenCV.OclDevice.getdefault/0","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#globalmemcachelinesize/1","title":"OpenCV.OclDevice.globalmemcachelinesize/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#globalmemcachesize/1","title":"OpenCV.OclDevice.globalmemcachesize/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#globalmemcachetype/1","title":"OpenCV.OclDevice.globalmemcachetype/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#globalmemsize/1","title":"OpenCV.OclDevice.globalmemsize/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#halffpconfig/1","title":"OpenCV.OclDevice.halffpconfig/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#hostunifiedmemory/1","title":"OpenCV.OclDevice.hostunifiedmemory/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#image2dmaxheight/1","title":"OpenCV.OclDevice.image2dmaxheight/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#image2dmaxwidth/1","title":"OpenCV.OclDevice.image2dmaxwidth/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#image3dmaxdepth/1","title":"OpenCV.OclDevice.image3dmaxdepth/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#image3dmaxheight/1","title":"OpenCV.OclDevice.image3dmaxheight/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#image3dmaxwidth/1","title":"OpenCV.OclDevice.image3dmaxwidth/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#imagefrombuffersupport/1","title":"OpenCV.OclDevice.imagefrombuffersupport/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#imagemaxarraysize/1","title":"OpenCV.OclDevice.imagemaxarraysize/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#imagemaxbuffersize/1","title":"OpenCV.OclDevice.imagemaxbuffersize/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#imagesupport/1","title":"OpenCV.OclDevice.imagesupport/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#intelsubgroupssupport/1","title":"OpenCV.OclDevice.intelsubgroupssupport/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#isamd/1","title":"OpenCV.OclDevice.isamd/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#isextensionsupported/2","title":"OpenCV.OclDevice.isextensionsupported/2","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#isintel/1","title":"OpenCV.OclDevice.isintel/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#isnvidia/1","title":"OpenCV.OclDevice.isnvidia/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#linkeravailable/1","title":"OpenCV.OclDevice.linkeravailable/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#localmemsize/1","title":"OpenCV.OclDevice.localmemsize/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#localmemtype/1","title":"OpenCV.OclDevice.localmemtype/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#maxclockfrequency/1","title":"OpenCV.OclDevice.maxclockfrequency/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#maxcomputeunits/1","title":"OpenCV.OclDevice.maxcomputeunits/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#maxconstantargs/1","title":"OpenCV.OclDevice.maxconstantargs/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#maxconstantbuffersize/1","title":"OpenCV.OclDevice.maxconstantbuffersize/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#maxmemallocsize/1","title":"OpenCV.OclDevice.maxmemallocsize/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#maxparametersize/1","title":"OpenCV.OclDevice.maxparametersize/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#maxreadimageargs/1","title":"OpenCV.OclDevice.maxreadimageargs/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#maxsamplers/1","title":"OpenCV.OclDevice.maxsamplers/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#maxworkgroupsize/1","title":"OpenCV.OclDevice.maxworkgroupsize/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#maxworkitemdims/1","title":"OpenCV.OclDevice.maxworkitemdims/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#maxwriteimageargs/1","title":"OpenCV.OclDevice.maxwriteimageargs/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#membaseaddralign/1","title":"OpenCV.OclDevice.membaseaddralign/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#name/1","title":"OpenCV.OclDevice.name/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#nativevectorwidthchar/1","title":"OpenCV.OclDevice.nativevectorwidthchar/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#nativevectorwidthdouble/1","title":"OpenCV.OclDevice.nativevectorwidthdouble/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#nativevectorwidthfloat/1","title":"OpenCV.OclDevice.nativevectorwidthfloat/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#nativevectorwidthhalf/1","title":"OpenCV.OclDevice.nativevectorwidthhalf/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#nativevectorwidthint/1","title":"OpenCV.OclDevice.nativevectorwidthint/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#nativevectorwidthlong/1","title":"OpenCV.OclDevice.nativevectorwidthlong/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#nativevectorwidthshort/1","title":"OpenCV.OclDevice.nativevectorwidthshort/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#ocl_device/0","title":"OpenCV.OclDevice.ocl_device/0","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#opencl_c_version/1","title":"OpenCV.OclDevice.opencl_c_version/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#openclversion/1","title":"OpenCV.OclDevice.openclversion/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#preferredvectorwidthchar/1","title":"OpenCV.OclDevice.preferredvectorwidthchar/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#preferredvectorwidthdouble/1","title":"OpenCV.OclDevice.preferredvectorwidthdouble/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#preferredvectorwidthfloat/1","title":"OpenCV.OclDevice.preferredvectorwidthfloat/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#preferredvectorwidthhalf/1","title":"OpenCV.OclDevice.preferredvectorwidthhalf/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#preferredvectorwidthint/1","title":"OpenCV.OclDevice.preferredvectorwidthint/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#preferredvectorwidthlong/1","title":"OpenCV.OclDevice.preferredvectorwidthlong/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#preferredvectorwidthshort/1","title":"OpenCV.OclDevice.preferredvectorwidthshort/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#printfbuffersize/1","title":"OpenCV.OclDevice.printfbuffersize/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#profilingtimerresolution/1","title":"OpenCV.OclDevice.profilingtimerresolution/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#singlefpconfig/1","title":"OpenCV.OclDevice.singlefpconfig/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#type/1","title":"OpenCV.OclDevice.type/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#vendorid/1","title":"OpenCV.OclDevice.vendorid/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#vendorname/1","title":"OpenCV.OclDevice.vendorname/1","type":"function"},{"doc":"","ref":"OpenCV.OclDevice.html#version/1","title":"OpenCV.OclDevice.version/1","type":"function"},{"doc":"","ref":"OpenCV.OclOpenCLExecutionContext.html","title":"OpenCV.OclOpenCLExecutionContext","type":"module"},{"doc":"","ref":"OpenCV.PyRotationWarper.html","title":"OpenCV.PyRotationWarper","type":"module"},{"doc":"","ref":"OpenCV.PyRotationWarper.html#buildmaps/4","title":"OpenCV.PyRotationWarper.buildmaps/4","type":"function"},{"doc":"Builds the projection maps according to the given camera data. src_size . k . r . xmap . ymap . @return Projected image minimum bounding box xmap : UMat ymap : UMat Python prototype (for reference): buildMaps ( src_size , K , R [ , xmap [ , ymap ] ] ) -&gt; retval , xmap , ymap","ref":"OpenCV.PyRotationWarper.html#buildmaps/5","title":"OpenCV.PyRotationWarper.buildmaps/5","type":"function"},{"doc":"","ref":"OpenCV.PyRotationWarper.html#getscale/1","title":"OpenCV.PyRotationWarper.getscale/1","type":"function"},{"doc":"","ref":"OpenCV.PyRotationWarper.html#pyrotationwarper/0","title":"OpenCV.PyRotationWarper.pyrotationwarper/0","type":"function"},{"doc":"","ref":"OpenCV.PyRotationWarper.html#pyrotationwarper/2","title":"OpenCV.PyRotationWarper.pyrotationwarper/2","type":"function"},{"doc":"","ref":"OpenCV.PyRotationWarper.html#setscale/2","title":"OpenCV.PyRotationWarper.setscale/2","type":"function"},{"doc":"","ref":"OpenCV.PyRotationWarper.html#warp/6","title":"OpenCV.PyRotationWarper.warp/6","type":"function"},{"doc":"Projects the image. src . k . r . interp_mode . border_mode . dst . @return Project image top-left corner dst : UMat Python prototype (for reference): warp ( src , K , R , interp_mode , border_mode [ , dst ] ) -&gt; retval , dst","ref":"OpenCV.PyRotationWarper.html#warp/7","title":"OpenCV.PyRotationWarper.warp/7","type":"function"},{"doc":"","ref":"OpenCV.PyRotationWarper.html#warpbackward/7","title":"OpenCV.PyRotationWarper.warpbackward/7","type":"function"},{"doc":"Projects the image backward. src . k . r . interp_mode . border_mode . dst_size . dst . dst : UMat Python prototype (for reference): warpBackward ( src , K , R , interp_mode , border_mode , dst_size [ , dst ] ) -&gt; dst","ref":"OpenCV.PyRotationWarper.html#warpbackward/8","title":"OpenCV.PyRotationWarper.warpbackward/8","type":"function"},{"doc":"","ref":"OpenCV.PyRotationWarper.html#warppoint/4","title":"OpenCV.PyRotationWarper.warppoint/4","type":"function"},{"doc":"","ref":"OpenCV.PyRotationWarper.html#warppointbackward/4","title":"OpenCV.PyRotationWarper.warppointbackward/4","type":"function"},{"doc":"","ref":"OpenCV.PyRotationWarper.html#warproi/4","title":"OpenCV.PyRotationWarper.warproi/4","type":"function"},{"doc":"","ref":"OpenCV.QRCodeDetector.html","title":"OpenCV.QRCodeDetector","type":"module"},{"doc":"","ref":"OpenCV.QRCodeDetector.html#decode/3","title":"OpenCV.QRCodeDetector.decode/3","type":"function"},{"doc":"Decodes QR code in image once it's found by the detect() method. Returns UTF8-encoded output string or empty string if the code cannot be decoded. img . points . straight_qrcode . straight_qrcode : UMat Python prototype (for reference): decode ( img , points [ , straight_qrcode ] ) -&gt; retval , straight_qrcode","ref":"OpenCV.QRCodeDetector.html#decode/4","title":"OpenCV.QRCodeDetector.decode/4","type":"function"},{"doc":"","ref":"OpenCV.QRCodeDetector.html#decodecurved/3","title":"OpenCV.QRCodeDetector.decodecurved/3","type":"function"},{"doc":"Decodes QR code on a curved surface in image once it's found by the detect() method. Returns UTF8-encoded output string or empty string if the code cannot be decoded. img . points . straight_qrcode . straight_qrcode : UMat Python prototype (for reference): decodeCurved ( img , points [ , straight_qrcode ] ) -&gt; retval , straight_qrcode","ref":"OpenCV.QRCodeDetector.html#decodecurved/4","title":"OpenCV.QRCodeDetector.decodecurved/4","type":"function"},{"doc":"","ref":"OpenCV.QRCodeDetector.html#decodemulti/3","title":"OpenCV.QRCodeDetector.decodemulti/3","type":"function"},{"doc":"Decodes QR codes in image once it's found by the detect() method. img . decoded_info . points . straight_qrcode . straight_qrcode : vector_UMat Python prototype (for reference): decodeMulti ( img , points [ , straight_qrcode ] ) -&gt; retval , decoded_info , straight_qrcode","ref":"OpenCV.QRCodeDetector.html#decodemulti/4","title":"OpenCV.QRCodeDetector.decodemulti/4","type":"function"},{"doc":"","ref":"OpenCV.QRCodeDetector.html#detect/2","title":"OpenCV.QRCodeDetector.detect/2","type":"function"},{"doc":"Detects QR code in image and returns the quadrangle containing the code. img . points . points : UMat Python prototype (for reference): detect ( img [ , points ] ) -&gt; retval , points","ref":"OpenCV.QRCodeDetector.html#detect/3","title":"OpenCV.QRCodeDetector.detect/3","type":"function"},{"doc":"","ref":"OpenCV.QRCodeDetector.html#detectanddecode/2","title":"OpenCV.QRCodeDetector.detectanddecode/2","type":"function"},{"doc":"Both detects and decodes QR code img . points . straight_qrcode . points : UMat straight_qrcode : UMat Python prototype (for reference): detectAndDecode ( img [ , points [ , straight_qrcode ] ] ) -&gt; retval , points , straight_qrcode","ref":"OpenCV.QRCodeDetector.html#detectanddecode/3","title":"OpenCV.QRCodeDetector.detectanddecode/3","type":"function"},{"doc":"","ref":"OpenCV.QRCodeDetector.html#detectanddecodecurved/2","title":"OpenCV.QRCodeDetector.detectanddecodecurved/2","type":"function"},{"doc":"Both detects and decodes QR code on a curved surface img . points . straight_qrcode . points : UMat straight_qrcode : UMat Python prototype (for reference): detectAndDecodeCurved ( img [ , points [ , straight_qrcode ] ] ) -&gt; retval , points , straight_qrcode","ref":"OpenCV.QRCodeDetector.html#detectanddecodecurved/3","title":"OpenCV.QRCodeDetector.detectanddecodecurved/3","type":"function"},{"doc":"","ref":"OpenCV.QRCodeDetector.html#detectanddecodemulti/2","title":"OpenCV.QRCodeDetector.detectanddecodemulti/2","type":"function"},{"doc":"Both detects and decodes QR codes img . decoded_info . points . straight_qrcode . points : UMat straight_qrcode : vector_UMat Python prototype (for reference): detectAndDecodeMulti ( img [ , points [ , straight_qrcode ] ] ) -&gt; retval , decoded_info , points , straight_qrcode","ref":"OpenCV.QRCodeDetector.html#detectanddecodemulti/3","title":"OpenCV.QRCodeDetector.detectanddecodemulti/3","type":"function"},{"doc":"","ref":"OpenCV.QRCodeDetector.html#detectmulti/2","title":"OpenCV.QRCodeDetector.detectmulti/2","type":"function"},{"doc":"Detects QR codes in image and returns the vector of the quadrangles containing the codes. img . points . points : UMat Python prototype (for reference): detectMulti ( img [ , points ] ) -&gt; retval , points","ref":"OpenCV.QRCodeDetector.html#detectmulti/3","title":"OpenCV.QRCodeDetector.detectmulti/3","type":"function"},{"doc":"","ref":"OpenCV.QRCodeDetector.html#qrcodedetector/0","title":"OpenCV.QRCodeDetector.qrcodedetector/0","type":"function"},{"doc":"","ref":"OpenCV.QRCodeDetector.html#setepsx/2","title":"OpenCV.QRCodeDetector.setepsx/2","type":"function"},{"doc":"","ref":"OpenCV.QRCodeDetector.html#setepsy/2","title":"OpenCV.QRCodeDetector.setepsy/2","type":"function"},{"doc":"","ref":"OpenCV.QRCodeEncoder.html","title":"OpenCV.QRCodeEncoder","type":"module"},{"doc":"","ref":"OpenCV.QRCodeEncoder.html#create/0","title":"OpenCV.QRCodeEncoder.create/0","type":"function"},{"doc":"Constructor parameters . parameters : QRCodeEncoder_Params Python prototype (for reference): create ( [ , parameters ] ) -&gt; retval","ref":"OpenCV.QRCodeEncoder.html#create/1","title":"OpenCV.QRCodeEncoder.create/1","type":"function"},{"doc":"","ref":"OpenCV.QRCodeEncoder.html#encode/2","title":"OpenCV.QRCodeEncoder.encode/2","type":"function"},{"doc":"Generates QR code from input string. encoded_info . qrcode . qrcode : UMat Python prototype (for reference): encode ( encoded_info [ , qrcode ] ) -&gt; qrcode","ref":"OpenCV.QRCodeEncoder.html#encode/3","title":"OpenCV.QRCodeEncoder.encode/3","type":"function"},{"doc":"","ref":"OpenCV.QRCodeEncoder.html#encodestructuredappend/2","title":"OpenCV.QRCodeEncoder.encodestructuredappend/2","type":"function"},{"doc":"Generates QR code from input string in Structured Append mode. The encoded message is splitting over a number of QR codes. encoded_info . qrcodes . qrcodes : vector_UMat Python prototype (for reference): encodeStructuredAppend ( encoded_info [ , qrcodes ] ) -&gt; qrcodes","ref":"OpenCV.QRCodeEncoder.html#encodestructuredappend/3","title":"OpenCV.QRCodeEncoder.encodestructuredappend/3","type":"function"},{"doc":"","ref":"OpenCV.QRCodeEncoderParams.html","title":"OpenCV.QRCodeEncoderParams","type":"module"},{"doc":"","ref":"OpenCV.QRCodeEncoderParams.html#correction_level/1","title":"OpenCV.QRCodeEncoderParams.correction_level/1","type":"function"},{"doc":"","ref":"OpenCV.QRCodeEncoderParams.html#mode/1","title":"OpenCV.QRCodeEncoderParams.mode/1","type":"function"},{"doc":"","ref":"OpenCV.QRCodeEncoderParams.html#qrcodeencoder_params/0","title":"OpenCV.QRCodeEncoderParams.qrcodeencoder_params/0","type":"function"},{"doc":"","ref":"OpenCV.QRCodeEncoderParams.html#set_correction_level/2","title":"OpenCV.QRCodeEncoderParams.set_correction_level/2","type":"function"},{"doc":"","ref":"OpenCV.QRCodeEncoderParams.html#set_mode/2","title":"OpenCV.QRCodeEncoderParams.set_mode/2","type":"function"},{"doc":"","ref":"OpenCV.QRCodeEncoderParams.html#set_structure_number/2","title":"OpenCV.QRCodeEncoderParams.set_structure_number/2","type":"function"},{"doc":"","ref":"OpenCV.QRCodeEncoderParams.html#set_version/2","title":"OpenCV.QRCodeEncoderParams.set_version/2","type":"function"},{"doc":"","ref":"OpenCV.QRCodeEncoderParams.html#structure_number/1","title":"OpenCV.QRCodeEncoderParams.structure_number/1","type":"function"},{"doc":"","ref":"OpenCV.QRCodeEncoderParams.html#version/1","title":"OpenCV.QRCodeEncoderParams.version/1","type":"function"},{"doc":"","ref":"OpenCV.SIFT.html","title":"OpenCV.SIFT","type":"module"},{"doc":"","ref":"OpenCV.SIFT.html#create/0","title":"OpenCV.SIFT.create/0","type":"function"},{"doc":"","ref":"OpenCV.SIFT.html#create/1","title":"OpenCV.SIFT.create/1","type":"function"},{"doc":"","ref":"OpenCV.SIFT.html#create/6","title":"OpenCV.SIFT.create/6","type":"function"},{"doc":"","ref":"OpenCV.SIFT.html#getdefaultname/1","title":"OpenCV.SIFT.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.SegmentationIntelligentScissorsMB.html","title":"OpenCV.SegmentationIntelligentScissorsMB","type":"module"},{"doc":"","ref":"OpenCV.SegmentationIntelligentScissorsMB.html#applyimage/2","title":"OpenCV.SegmentationIntelligentScissorsMB.applyimage/2","type":"function"},{"doc":"","ref":"OpenCV.SegmentationIntelligentScissorsMB.html#applyimagefeatures/4","title":"OpenCV.SegmentationIntelligentScissorsMB.applyimagefeatures/4","type":"function"},{"doc":"Specify custom features of imput image Customized advanced variant of applyImage() call. non_edge . gradient_direction . gradient_magnitude . image . image : UMat Python prototype (for reference): applyImageFeatures ( non_edge , gradient_direction , gradient_magnitude [ , image ] ) -&gt; retval","ref":"OpenCV.SegmentationIntelligentScissorsMB.html#applyimagefeatures/5","title":"OpenCV.SegmentationIntelligentScissorsMB.applyimagefeatures/5","type":"function"},{"doc":"","ref":"OpenCV.SegmentationIntelligentScissorsMB.html#buildmap/2","title":"OpenCV.SegmentationIntelligentScissorsMB.buildmap/2","type":"function"},{"doc":"","ref":"OpenCV.SegmentationIntelligentScissorsMB.html#getcontour/2","title":"OpenCV.SegmentationIntelligentScissorsMB.getcontour/2","type":"function"},{"doc":"Extracts optimal contour for the given target point on the image Note : buildMap() must be called before this call targetPt . contour . backward . contour : UMat backward : bool Python prototype (for reference): getContour ( targetPt [ , contour [ , backward ] ] ) -&gt; contour","ref":"OpenCV.SegmentationIntelligentScissorsMB.html#getcontour/3","title":"OpenCV.SegmentationIntelligentScissorsMB.getcontour/3","type":"function"},{"doc":"","ref":"OpenCV.SegmentationIntelligentScissorsMB.html#segmentation_intelligentscissorsmb/0","title":"OpenCV.SegmentationIntelligentScissorsMB.segmentation_intelligentscissorsmb/0","type":"function"},{"doc":"","ref":"OpenCV.SegmentationIntelligentScissorsMB.html#setedgefeaturecannyparameters/3","title":"OpenCV.SegmentationIntelligentScissorsMB.setedgefeaturecannyparameters/3","type":"function"},{"doc":"Switch edge feature extractor to use Canny edge detector Note : &quot;Laplacian Zero-Crossing&quot; feature extractor is used by default (following to original article) @sa Canny apertureSize : int l2gradient : bool Python prototype (for reference): setEdgeFeatureCannyParameters ( threshold1 , threshold2 [ , apertureSize [ , L2gradient ] ] ) -&gt; retval","ref":"OpenCV.SegmentationIntelligentScissorsMB.html#setedgefeaturecannyparameters/4","title":"OpenCV.SegmentationIntelligentScissorsMB.setedgefeaturecannyparameters/4","type":"function"},{"doc":"","ref":"OpenCV.SegmentationIntelligentScissorsMB.html#setedgefeaturezerocrossingparameters/1","title":"OpenCV.SegmentationIntelligentScissorsMB.setedgefeaturezerocrossingparameters/1","type":"function"},{"doc":"","ref":"OpenCV.SegmentationIntelligentScissorsMB.html#setgradientmagnitudemaxlimit/1","title":"OpenCV.SegmentationIntelligentScissorsMB.setgradientmagnitudemaxlimit/1","type":"function"},{"doc":"","ref":"OpenCV.SegmentationIntelligentScissorsMB.html#setweights/4","title":"OpenCV.SegmentationIntelligentScissorsMB.setweights/4","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetector.html","title":"OpenCV.SimpleBlobDetector","type":"module"},{"doc":"","ref":"OpenCV.SimpleBlobDetector.html#create/0","title":"OpenCV.SimpleBlobDetector.create/0","type":"function"},{"doc":"parameters : SimpleBlobDetector_Params Python prototype (for reference): create ( [ , parameters ] ) -&gt; retval","ref":"OpenCV.SimpleBlobDetector.html#create/1","title":"OpenCV.SimpleBlobDetector.create/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetector.html#getdefaultname/1","title":"OpenCV.SimpleBlobDetector.getdefaultname/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html","title":"OpenCV.SimpleBlobDetectorParams","type":"module"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#blobcolor/1","title":"OpenCV.SimpleBlobDetectorParams.blobcolor/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#filterbyarea/1","title":"OpenCV.SimpleBlobDetectorParams.filterbyarea/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#filterbycircularity/1","title":"OpenCV.SimpleBlobDetectorParams.filterbycircularity/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#filterbycolor/1","title":"OpenCV.SimpleBlobDetectorParams.filterbycolor/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#filterbyconvexity/1","title":"OpenCV.SimpleBlobDetectorParams.filterbyconvexity/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#filterbyinertia/1","title":"OpenCV.SimpleBlobDetectorParams.filterbyinertia/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#maxarea/1","title":"OpenCV.SimpleBlobDetectorParams.maxarea/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#maxcircularity/1","title":"OpenCV.SimpleBlobDetectorParams.maxcircularity/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#maxconvexity/1","title":"OpenCV.SimpleBlobDetectorParams.maxconvexity/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#maxinertiaratio/1","title":"OpenCV.SimpleBlobDetectorParams.maxinertiaratio/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#maxthreshold/1","title":"OpenCV.SimpleBlobDetectorParams.maxthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#minarea/1","title":"OpenCV.SimpleBlobDetectorParams.minarea/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#mincircularity/1","title":"OpenCV.SimpleBlobDetectorParams.mincircularity/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#minconvexity/1","title":"OpenCV.SimpleBlobDetectorParams.minconvexity/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#mindistbetweenblobs/1","title":"OpenCV.SimpleBlobDetectorParams.mindistbetweenblobs/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#mininertiaratio/1","title":"OpenCV.SimpleBlobDetectorParams.mininertiaratio/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#minrepeatability/1","title":"OpenCV.SimpleBlobDetectorParams.minrepeatability/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#minthreshold/1","title":"OpenCV.SimpleBlobDetectorParams.minthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_blobcolor/2","title":"OpenCV.SimpleBlobDetectorParams.set_blobcolor/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_filterbyarea/2","title":"OpenCV.SimpleBlobDetectorParams.set_filterbyarea/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_filterbycircularity/2","title":"OpenCV.SimpleBlobDetectorParams.set_filterbycircularity/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_filterbycolor/2","title":"OpenCV.SimpleBlobDetectorParams.set_filterbycolor/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_filterbyconvexity/2","title":"OpenCV.SimpleBlobDetectorParams.set_filterbyconvexity/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_filterbyinertia/2","title":"OpenCV.SimpleBlobDetectorParams.set_filterbyinertia/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_maxarea/2","title":"OpenCV.SimpleBlobDetectorParams.set_maxarea/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_maxcircularity/2","title":"OpenCV.SimpleBlobDetectorParams.set_maxcircularity/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_maxconvexity/2","title":"OpenCV.SimpleBlobDetectorParams.set_maxconvexity/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_maxinertiaratio/2","title":"OpenCV.SimpleBlobDetectorParams.set_maxinertiaratio/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_maxthreshold/2","title":"OpenCV.SimpleBlobDetectorParams.set_maxthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_minarea/2","title":"OpenCV.SimpleBlobDetectorParams.set_minarea/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_mincircularity/2","title":"OpenCV.SimpleBlobDetectorParams.set_mincircularity/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_minconvexity/2","title":"OpenCV.SimpleBlobDetectorParams.set_minconvexity/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_mindistbetweenblobs/2","title":"OpenCV.SimpleBlobDetectorParams.set_mindistbetweenblobs/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_mininertiaratio/2","title":"OpenCV.SimpleBlobDetectorParams.set_mininertiaratio/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_minrepeatability/2","title":"OpenCV.SimpleBlobDetectorParams.set_minrepeatability/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_minthreshold/2","title":"OpenCV.SimpleBlobDetectorParams.set_minthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#set_thresholdstep/2","title":"OpenCV.SimpleBlobDetectorParams.set_thresholdstep/2","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#simpleblobdetector_params/0","title":"OpenCV.SimpleBlobDetectorParams.simpleblobdetector_params/0","type":"function"},{"doc":"","ref":"OpenCV.SimpleBlobDetectorParams.html#thresholdstep/1","title":"OpenCV.SimpleBlobDetectorParams.thresholdstep/1","type":"function"},{"doc":"","ref":"OpenCV.SparseOpticalFlow.html","title":"OpenCV.SparseOpticalFlow","type":"module"},{"doc":"","ref":"OpenCV.SparseOpticalFlow.html#calc/5","title":"OpenCV.SparseOpticalFlow.calc/5","type":"function"},{"doc":"Calculates a sparse optical flow. prevImg . nextImg . prevPts . nextPts . status . flow for the corresponding features has been found. Otherwise, it is set to 0. err . status : UMat err : UMat Python prototype (for reference): calc ( prevImg , nextImg , prevPts , nextPts [ , status [ , err ] ] ) -&gt; nextPts , status , err","ref":"OpenCV.SparseOpticalFlow.html#calc/6","title":"OpenCV.SparseOpticalFlow.calc/6","type":"function"},{"doc":"","ref":"OpenCV.SparsePyrLKOpticalFlow.html","title":"OpenCV.SparsePyrLKOpticalFlow","type":"module"},{"doc":"","ref":"OpenCV.SparsePyrLKOpticalFlow.html#create/0","title":"OpenCV.SparsePyrLKOpticalFlow.create/0","type":"function"},{"doc":"winSize : Size maxLevel : int crit : TermCriteria flags : int minEigThreshold : double Python prototype (for reference): create ( [ , winSize [ , maxLevel [ , crit [ , flags [ , minEigThreshold ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.SparsePyrLKOpticalFlow.html#create/1","title":"OpenCV.SparsePyrLKOpticalFlow.create/1","type":"function"},{"doc":"","ref":"OpenCV.SparsePyrLKOpticalFlow.html#getflags/1","title":"OpenCV.SparsePyrLKOpticalFlow.getflags/1","type":"function"},{"doc":"","ref":"OpenCV.SparsePyrLKOpticalFlow.html#getmaxlevel/1","title":"OpenCV.SparsePyrLKOpticalFlow.getmaxlevel/1","type":"function"},{"doc":"","ref":"OpenCV.SparsePyrLKOpticalFlow.html#getmineigthreshold/1","title":"OpenCV.SparsePyrLKOpticalFlow.getmineigthreshold/1","type":"function"},{"doc":"","ref":"OpenCV.SparsePyrLKOpticalFlow.html#gettermcriteria/1","title":"OpenCV.SparsePyrLKOpticalFlow.gettermcriteria/1","type":"function"},{"doc":"","ref":"OpenCV.SparsePyrLKOpticalFlow.html#getwinsize/1","title":"OpenCV.SparsePyrLKOpticalFlow.getwinsize/1","type":"function"},{"doc":"","ref":"OpenCV.SparsePyrLKOpticalFlow.html#setflags/2","title":"OpenCV.SparsePyrLKOpticalFlow.setflags/2","type":"function"},{"doc":"","ref":"OpenCV.SparsePyrLKOpticalFlow.html#setmaxlevel/2","title":"OpenCV.SparsePyrLKOpticalFlow.setmaxlevel/2","type":"function"},{"doc":"","ref":"OpenCV.SparsePyrLKOpticalFlow.html#setmineigthreshold/2","title":"OpenCV.SparsePyrLKOpticalFlow.setmineigthreshold/2","type":"function"},{"doc":"","ref":"OpenCV.SparsePyrLKOpticalFlow.html#settermcriteria/2","title":"OpenCV.SparsePyrLKOpticalFlow.settermcriteria/2","type":"function"},{"doc":"","ref":"OpenCV.SparsePyrLKOpticalFlow.html#setwinsize/2","title":"OpenCV.SparsePyrLKOpticalFlow.setwinsize/2","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html","title":"OpenCV.StereoBM","type":"module"},{"doc":"","ref":"OpenCV.StereoBM.html#create/0","title":"OpenCV.StereoBM.create/0","type":"function"},{"doc":"Creates StereoBM object numDisparities . disparity from 0 (default minimum disparity) to numDisparities. The search range can then be shifted by changing the minimum disparity. blockSize . (as the block is centered at the current pixel). Larger block size implies smoother, though less accurate disparity map. Smaller block size gives more detailed disparity map, but there is higher chance for algorithm to find a wrong correspondence. The function create StereoBM object. You can then call StereoBM::compute() to compute disparity for a specific stereo pair. numDisparities : int blockSize : int Python prototype (for reference): create ( [ , numDisparities [ , blockSize ] ] ) -&gt; retval","ref":"OpenCV.StereoBM.html#create/1","title":"OpenCV.StereoBM.create/1","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#getprefiltercap/1","title":"OpenCV.StereoBM.getprefiltercap/1","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#getprefiltersize/1","title":"OpenCV.StereoBM.getprefiltersize/1","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#getprefiltertype/1","title":"OpenCV.StereoBM.getprefiltertype/1","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#getroi1/1","title":"OpenCV.StereoBM.getroi1/1","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#getroi2/1","title":"OpenCV.StereoBM.getroi2/1","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#getsmallerblocksize/1","title":"OpenCV.StereoBM.getsmallerblocksize/1","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#gettexturethreshold/1","title":"OpenCV.StereoBM.gettexturethreshold/1","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#getuniquenessratio/1","title":"OpenCV.StereoBM.getuniquenessratio/1","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#setprefiltercap/2","title":"OpenCV.StereoBM.setprefiltercap/2","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#setprefiltersize/2","title":"OpenCV.StereoBM.setprefiltersize/2","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#setprefiltertype/2","title":"OpenCV.StereoBM.setprefiltertype/2","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#setroi1/2","title":"OpenCV.StereoBM.setroi1/2","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#setroi2/2","title":"OpenCV.StereoBM.setroi2/2","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#setsmallerblocksize/2","title":"OpenCV.StereoBM.setsmallerblocksize/2","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#settexturethreshold/2","title":"OpenCV.StereoBM.settexturethreshold/2","type":"function"},{"doc":"","ref":"OpenCV.StereoBM.html#setuniquenessratio/2","title":"OpenCV.StereoBM.setuniquenessratio/2","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html","title":"OpenCV.StereoMatcher","type":"module"},{"doc":"","ref":"OpenCV.StereoMatcher.html#compute/3","title":"OpenCV.StereoMatcher.compute/3","type":"function"},{"doc":"Computes disparity map for the specified stereo pair left . right . disparity . like StereoBM or StereoSGBM compute 16-bit fixed-point disparity map (where each disparity value has 4 fractional bits), whereas other algorithms output 32-bit floating-point disparity map. disparity : UMat Python prototype (for reference): compute ( left , right [ , disparity ] ) -&gt; disparity","ref":"OpenCV.StereoMatcher.html#compute/4","title":"OpenCV.StereoMatcher.compute/4","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html#getblocksize/1","title":"OpenCV.StereoMatcher.getblocksize/1","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html#getdisp12maxdiff/1","title":"OpenCV.StereoMatcher.getdisp12maxdiff/1","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html#getmindisparity/1","title":"OpenCV.StereoMatcher.getmindisparity/1","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html#getnumdisparities/1","title":"OpenCV.StereoMatcher.getnumdisparities/1","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html#getspecklerange/1","title":"OpenCV.StereoMatcher.getspecklerange/1","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html#getspecklewindowsize/1","title":"OpenCV.StereoMatcher.getspecklewindowsize/1","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html#setblocksize/2","title":"OpenCV.StereoMatcher.setblocksize/2","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html#setdisp12maxdiff/2","title":"OpenCV.StereoMatcher.setdisp12maxdiff/2","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html#setmindisparity/2","title":"OpenCV.StereoMatcher.setmindisparity/2","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html#setnumdisparities/2","title":"OpenCV.StereoMatcher.setnumdisparities/2","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html#setspecklerange/2","title":"OpenCV.StereoMatcher.setspecklerange/2","type":"function"},{"doc":"","ref":"OpenCV.StereoMatcher.html#setspecklewindowsize/2","title":"OpenCV.StereoMatcher.setspecklewindowsize/2","type":"function"},{"doc":"","ref":"OpenCV.StereoSGBM.html","title":"OpenCV.StereoSGBM","type":"module"},{"doc":"","ref":"OpenCV.StereoSGBM.html#create/0","title":"OpenCV.StereoSGBM.create/0","type":"function"},{"doc":"Creates StereoSGBM object minDisparity . rectification algorithms can shift images, so this parameter needs to be adjusted accordingly. numDisparities . zero. In the current implementation, this parameter must be divisible by 16. blockSize . somewhere in the 3..11 range. p1 . p2 . the smoother the disparity is. P1 is the penalty on the disparity change by plus or minus 1 between neighbor pixels. P2 is the penalty on the disparity change by more than 1 between neighbor pixels. The algorithm requires P2 &gt; P1 . See stereo_match.cpp sample where some reasonably good P1 and P2 values are shown (like 8*number_of_image_channels*blockSize*blockSize and 32*number_of_image_channels*blockSize*blockSize , respectively). disp12MaxDiff . disparity check. Set it to a non-positive value to disable the check. preFilterCap . computes x-derivative at each pixel and clips its value by [-preFilterCap, preFilterCap] interval. The result values are passed to the Birchfield-Tomasi pixel cost function. uniquenessRatio . value should &quot;win&quot; the second best value to consider the found match correct. Normally, a value within the 5-15 range is good enough. speckleWindowSize . and invalidate. Set it to 0 to disable speckle filtering. Otherwise, set it somewhere in the 50-200 range. speckleRange . filtering, set the parameter to a positive value, it will be implicitly multiplied by 16. Normally, 1 or 2 is good enough. mode . algorithm. It will consume O(W*H*numDisparities) bytes, which is large for 640x480 stereo and huge for HD-size pictures. By default, it is set to false . The first constructor initializes StereoSGBM with all the default parameters. So, you only have to set StereoSGBM::numDisparities at minimum. The second constructor enables you to set each parameter to a custom value. minDisparity : int numDisparities : int blockSize : int p1 : int p2 : int disp12MaxDiff : int preFilterCap : int uniquenessRatio : int speckleWindowSize : int speckleRange : int mode : int Python prototype (for reference): create ( [ , minDisparity [ , numDisparities [ , blockSize [ , P1 [ , P2 [ , disp12MaxDiff [ , preFilterCap [ , uniquenessRatio [ , speckleWindowSize [ , speckleRange [ , mode ] ] ] ] ] ] ] ] ] ] ] ) -&gt; retval","ref":"OpenCV.StereoSGBM.html#create/1","title":"OpenCV.StereoSGBM.create/1","type":"function"},{"doc":"","ref":"OpenCV.StereoSGBM.html#getmode/1","title":"OpenCV.StereoSGBM.getmode/1","type":"function"},{"doc":"","ref":"OpenCV.StereoSGBM.html#getp1/1","title":"OpenCV.StereoSGBM.getp1/1","type":"function"},{"doc":"","ref":"OpenCV.StereoSGBM.html#getp2/1","title":"OpenCV.StereoSGBM.getp2/1","type":"function"},{"doc":"","ref":"OpenCV.StereoSGBM.html#getprefiltercap/1","title":"OpenCV.StereoSGBM.getprefiltercap/1","type":"function"},{"doc":"","ref":"OpenCV.StereoSGBM.html#getuniquenessratio/1","title":"OpenCV.StereoSGBM.getuniquenessratio/1","type":"function"},{"doc":"","ref":"OpenCV.StereoSGBM.html#setmode/2","title":"OpenCV.StereoSGBM.setmode/2","type":"function"},{"doc":"","ref":"OpenCV.StereoSGBM.html#setp1/2","title":"OpenCV.StereoSGBM.setp1/2","type":"function"},{"doc":"","ref":"OpenCV.StereoSGBM.html#setp2/2","title":"OpenCV.StereoSGBM.setp2/2","type":"function"},{"doc":"","ref":"OpenCV.StereoSGBM.html#setprefiltercap/2","title":"OpenCV.StereoSGBM.setprefiltercap/2","type":"function"},{"doc":"","ref":"OpenCV.StereoSGBM.html#setuniquenessratio/2","title":"OpenCV.StereoSGBM.setuniquenessratio/2","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html","title":"OpenCV.Stitcher","type":"module"},{"doc":"","ref":"OpenCV.Stitcher.html#composepanorama/1","title":"OpenCV.Stitcher.composepanorama/1","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#composepanorama/2","title":"OpenCV.Stitcher.composepanorama/2","type":"function"},{"doc":"These functions try to compose the given images (or images stored internally from the other function calls) into the final pano under the assumption that the image transformations were estimated before. Note : Use the functions only if you're aware of the stitching pipeline, otherwise use Stitcher::stitch. images . pano . @return Status code. pano : UMat Python prototype (for reference): composePanorama ( images [ , pano ] ) -&gt; retval , pano","ref":"OpenCV.Stitcher.html#composepanorama/3","title":"OpenCV.Stitcher.composepanorama/3","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#compositingresol/1","title":"OpenCV.Stitcher.compositingresol/1","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#create/0","title":"OpenCV.Stitcher.create/0","type":"function"},{"doc":"Creates a Stitcher configured in one of the stitching modes. mode . to stitch and their transformation. Default parameters will be chosen for operation in given scenario. @return Stitcher class instance. mode : Mode Python prototype (for reference): create ( [ , mode ] ) -&gt; retval","ref":"OpenCV.Stitcher.html#create/1","title":"OpenCV.Stitcher.create/1","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#estimatetransform/2","title":"OpenCV.Stitcher.estimatetransform/2","type":"function"},{"doc":"These functions try to match the given images and to estimate rotations of each camera. Note : Use the functions only if you're aware of the stitching pipeline, otherwise use Stitcher::stitch. images . masks . @return Status code. masks : vector_UMat Python prototype (for reference): estimateTransform ( images [ , masks ] ) -&gt; retval","ref":"OpenCV.Stitcher.html#estimatetransform/3","title":"OpenCV.Stitcher.estimatetransform/3","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#interpolationflags/1","title":"OpenCV.Stitcher.interpolationflags/1","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#panoconfidencethresh/1","title":"OpenCV.Stitcher.panoconfidencethresh/1","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#registrationresol/1","title":"OpenCV.Stitcher.registrationresol/1","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#seamestimationresol/1","title":"OpenCV.Stitcher.seamestimationresol/1","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#setcompositingresol/2","title":"OpenCV.Stitcher.setcompositingresol/2","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#setinterpolationflags/2","title":"OpenCV.Stitcher.setinterpolationflags/2","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#setpanoconfidencethresh/2","title":"OpenCV.Stitcher.setpanoconfidencethresh/2","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#setregistrationresol/2","title":"OpenCV.Stitcher.setregistrationresol/2","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#setseamestimationresol/2","title":"OpenCV.Stitcher.setseamestimationresol/2","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#setwavecorrection/2","title":"OpenCV.Stitcher.setwavecorrection/2","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#stitch/2","title":"OpenCV.Stitcher.stitch/2","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#stitch/3","title":"OpenCV.Stitcher.stitch/3","type":"function"},{"doc":"These functions try to stitch the given images. images . masks . pano . @return Status code. pano : UMat Python prototype (for reference): stitch ( images , masks [ , pano ] ) -&gt; retval , pano","ref":"OpenCV.Stitcher.html#stitch/4","title":"OpenCV.Stitcher.stitch/4","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#wavecorrection/1","title":"OpenCV.Stitcher.wavecorrection/1","type":"function"},{"doc":"","ref":"OpenCV.Stitcher.html#workscale/1","title":"OpenCV.Stitcher.workscale/1","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html","title":"OpenCV.Subdiv2D","type":"module"},{"doc":"","ref":"OpenCV.Subdiv2D.html#edgedst/2","title":"OpenCV.Subdiv2D.edgedst/2","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#edgeorg/2","title":"OpenCV.Subdiv2D.edgeorg/2","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#findnearest/2","title":"OpenCV.Subdiv2D.findnearest/2","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#getedge/3","title":"OpenCV.Subdiv2D.getedge/3","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#getedgelist/1","title":"OpenCV.Subdiv2D.getedgelist/1","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#getleadingedgelist/1","title":"OpenCV.Subdiv2D.getleadingedgelist/1","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#gettrianglelist/1","title":"OpenCV.Subdiv2D.gettrianglelist/1","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#getvertex/2","title":"OpenCV.Subdiv2D.getvertex/2","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#getvoronoifacetlist/2","title":"OpenCV.Subdiv2D.getvoronoifacetlist/2","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#initdelaunay/2","title":"OpenCV.Subdiv2D.initdelaunay/2","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#insert/2","title":"OpenCV.Subdiv2D.insert/2","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#locate/2","title":"OpenCV.Subdiv2D.locate/2","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#nextedge/2","title":"OpenCV.Subdiv2D.nextedge/2","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#rotateedge/3","title":"OpenCV.Subdiv2D.rotateedge/3","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#subdiv2d/1","title":"OpenCV.Subdiv2D.subdiv2d/1","type":"function"},{"doc":"","ref":"OpenCV.Subdiv2D.html#symedge/2","title":"OpenCV.Subdiv2D.symedge/2","type":"function"},{"doc":"","ref":"OpenCV.TickMeter.html","title":"OpenCV.TickMeter","type":"module"},{"doc":"","ref":"OpenCV.TickMeter.html#getavgtimemilli/1","title":"OpenCV.TickMeter.getavgtimemilli/1","type":"function"},{"doc":"","ref":"OpenCV.TickMeter.html#getavgtimesec/1","title":"OpenCV.TickMeter.getavgtimesec/1","type":"function"},{"doc":"","ref":"OpenCV.TickMeter.html#getcounter/1","title":"OpenCV.TickMeter.getcounter/1","type":"function"},{"doc":"","ref":"OpenCV.TickMeter.html#getfps/1","title":"OpenCV.TickMeter.getfps/1","type":"function"},{"doc":"","ref":"OpenCV.TickMeter.html#gettimemicro/1","title":"OpenCV.TickMeter.gettimemicro/1","type":"function"},{"doc":"","ref":"OpenCV.TickMeter.html#gettimemilli/1","title":"OpenCV.TickMeter.gettimemilli/1","type":"function"},{"doc":"","ref":"OpenCV.TickMeter.html#gettimesec/1","title":"OpenCV.TickMeter.gettimesec/1","type":"function"},{"doc":"","ref":"OpenCV.TickMeter.html#gettimeticks/1","title":"OpenCV.TickMeter.gettimeticks/1","type":"function"},{"doc":"","ref":"OpenCV.TickMeter.html#reset/1","title":"OpenCV.TickMeter.reset/1","type":"function"},{"doc":"","ref":"OpenCV.TickMeter.html#start/1","title":"OpenCV.TickMeter.start/1","type":"function"},{"doc":"","ref":"OpenCV.TickMeter.html#stop/1","title":"OpenCV.TickMeter.stop/1","type":"function"},{"doc":"","ref":"OpenCV.TickMeter.html#tickmeter/0","title":"OpenCV.TickMeter.tickmeter/0","type":"function"},{"doc":"","ref":"OpenCV.Tonemap.html","title":"OpenCV.Tonemap","type":"module"},{"doc":"","ref":"OpenCV.Tonemap.html#getgamma/1","title":"OpenCV.Tonemap.getgamma/1","type":"function"},{"doc":"","ref":"OpenCV.Tonemap.html#process/2","title":"OpenCV.Tonemap.process/2","type":"function"},{"doc":"Tonemaps image src . dst . dst : UMat Python prototype (for reference): process ( src [ , dst ] ) -&gt; dst","ref":"OpenCV.Tonemap.html#process/3","title":"OpenCV.Tonemap.process/3","type":"function"},{"doc":"","ref":"OpenCV.Tonemap.html#setgamma/2","title":"OpenCV.Tonemap.setgamma/2","type":"function"},{"doc":"","ref":"OpenCV.TonemapDrago.html","title":"OpenCV.TonemapDrago","type":"module"},{"doc":"","ref":"OpenCV.TonemapDrago.html#getbias/1","title":"OpenCV.TonemapDrago.getbias/1","type":"function"},{"doc":"","ref":"OpenCV.TonemapDrago.html#getsaturation/1","title":"OpenCV.TonemapDrago.getsaturation/1","type":"function"},{"doc":"","ref":"OpenCV.TonemapDrago.html#setbias/2","title":"OpenCV.TonemapDrago.setbias/2","type":"function"},{"doc":"","ref":"OpenCV.TonemapDrago.html#setsaturation/2","title":"OpenCV.TonemapDrago.setsaturation/2","type":"function"},{"doc":"","ref":"OpenCV.TonemapMantiuk.html","title":"OpenCV.TonemapMantiuk","type":"module"},{"doc":"","ref":"OpenCV.TonemapMantiuk.html#getsaturation/1","title":"OpenCV.TonemapMantiuk.getsaturation/1","type":"function"},{"doc":"","ref":"OpenCV.TonemapMantiuk.html#getscale/1","title":"OpenCV.TonemapMantiuk.getscale/1","type":"function"},{"doc":"","ref":"OpenCV.TonemapMantiuk.html#setsaturation/2","title":"OpenCV.TonemapMantiuk.setsaturation/2","type":"function"},{"doc":"","ref":"OpenCV.TonemapMantiuk.html#setscale/2","title":"OpenCV.TonemapMantiuk.setscale/2","type":"function"},{"doc":"","ref":"OpenCV.TonemapReinhard.html","title":"OpenCV.TonemapReinhard","type":"module"},{"doc":"","ref":"OpenCV.TonemapReinhard.html#getcoloradaptation/1","title":"OpenCV.TonemapReinhard.getcoloradaptation/1","type":"function"},{"doc":"","ref":"OpenCV.TonemapReinhard.html#getintensity/1","title":"OpenCV.TonemapReinhard.getintensity/1","type":"function"},{"doc":"","ref":"OpenCV.TonemapReinhard.html#getlightadaptation/1","title":"OpenCV.TonemapReinhard.getlightadaptation/1","type":"function"},{"doc":"","ref":"OpenCV.TonemapReinhard.html#setcoloradaptation/2","title":"OpenCV.TonemapReinhard.setcoloradaptation/2","type":"function"},{"doc":"","ref":"OpenCV.TonemapReinhard.html#setintensity/2","title":"OpenCV.TonemapReinhard.setintensity/2","type":"function"},{"doc":"","ref":"OpenCV.TonemapReinhard.html#setlightadaptation/2","title":"OpenCV.TonemapReinhard.setlightadaptation/2","type":"function"},{"doc":"","ref":"OpenCV.Tracker.html","title":"OpenCV.Tracker","type":"module"},{"doc":"","ref":"OpenCV.Tracker.html#init/3","title":"OpenCV.Tracker.init/3","type":"function"},{"doc":"","ref":"OpenCV.Tracker.html#update/2","title":"OpenCV.Tracker.update/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPN.html","title":"OpenCV.TrackerDaSiamRPN","type":"module"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPN.html#create/0","title":"OpenCV.TrackerDaSiamRPN.create/0","type":"function"},{"doc":"Constructor parameters . parameters : TrackerDaSiamRPN_Params Python prototype (for reference): create ( [ , parameters ] ) -&gt; retval","ref":"OpenCV.TrackerDaSiamRPN.html#create/1","title":"OpenCV.TrackerDaSiamRPN.create/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPN.html#gettrackingscore/1","title":"OpenCV.TrackerDaSiamRPN.gettrackingscore/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPNParams.html","title":"OpenCV.TrackerDaSiamRPNParams","type":"module"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPNParams.html#backend/1","title":"OpenCV.TrackerDaSiamRPNParams.backend/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPNParams.html#kernel_cls1/1","title":"OpenCV.TrackerDaSiamRPNParams.kernel_cls1/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPNParams.html#kernel_r1/1","title":"OpenCV.TrackerDaSiamRPNParams.kernel_r1/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPNParams.html#model/1","title":"OpenCV.TrackerDaSiamRPNParams.model/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPNParams.html#set_backend/2","title":"OpenCV.TrackerDaSiamRPNParams.set_backend/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPNParams.html#set_kernel_cls1/2","title":"OpenCV.TrackerDaSiamRPNParams.set_kernel_cls1/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPNParams.html#set_kernel_r1/2","title":"OpenCV.TrackerDaSiamRPNParams.set_kernel_r1/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPNParams.html#set_model/2","title":"OpenCV.TrackerDaSiamRPNParams.set_model/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPNParams.html#set_target/2","title":"OpenCV.TrackerDaSiamRPNParams.set_target/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPNParams.html#target/1","title":"OpenCV.TrackerDaSiamRPNParams.target/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerDaSiamRPNParams.html#trackerdasiamrpn_params/0","title":"OpenCV.TrackerDaSiamRPNParams.trackerdasiamrpn_params/0","type":"function"},{"doc":"","ref":"OpenCV.TrackerGOTURN.html","title":"OpenCV.TrackerGOTURN","type":"module"},{"doc":"","ref":"OpenCV.TrackerGOTURN.html#create/0","title":"OpenCV.TrackerGOTURN.create/0","type":"function"},{"doc":"Constructor parameters . parameters : TrackerGOTURN_Params Python prototype (for reference): create ( [ , parameters ] ) -&gt; retval","ref":"OpenCV.TrackerGOTURN.html#create/1","title":"OpenCV.TrackerGOTURN.create/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerGOTURNParams.html","title":"OpenCV.TrackerGOTURNParams","type":"module"},{"doc":"","ref":"OpenCV.TrackerGOTURNParams.html#modelbin/1","title":"OpenCV.TrackerGOTURNParams.modelbin/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerGOTURNParams.html#modeltxt/1","title":"OpenCV.TrackerGOTURNParams.modeltxt/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerGOTURNParams.html#set_modelbin/2","title":"OpenCV.TrackerGOTURNParams.set_modelbin/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerGOTURNParams.html#set_modeltxt/2","title":"OpenCV.TrackerGOTURNParams.set_modeltxt/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerGOTURNParams.html#trackergoturn_params/0","title":"OpenCV.TrackerGOTURNParams.trackergoturn_params/0","type":"function"},{"doc":"","ref":"OpenCV.TrackerMIL.html","title":"OpenCV.TrackerMIL","type":"module"},{"doc":"","ref":"OpenCV.TrackerMIL.html#create/0","title":"OpenCV.TrackerMIL.create/0","type":"function"},{"doc":"Create MIL tracker instance parameters . parameters : TrackerMIL_Params Python prototype (for reference): create ( [ , parameters ] ) -&gt; retval","ref":"OpenCV.TrackerMIL.html#create/1","title":"OpenCV.TrackerMIL.create/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html","title":"OpenCV.TrackerMILParams","type":"module"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#featuresetnumfeatures/1","title":"OpenCV.TrackerMILParams.featuresetnumfeatures/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#samplerinitinradius/1","title":"OpenCV.TrackerMILParams.samplerinitinradius/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#samplerinitmaxnegnum/1","title":"OpenCV.TrackerMILParams.samplerinitmaxnegnum/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#samplersearchwinsize/1","title":"OpenCV.TrackerMILParams.samplersearchwinsize/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#samplertrackinradius/1","title":"OpenCV.TrackerMILParams.samplertrackinradius/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#samplertrackmaxnegnum/1","title":"OpenCV.TrackerMILParams.samplertrackmaxnegnum/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#samplertrackmaxposnum/1","title":"OpenCV.TrackerMILParams.samplertrackmaxposnum/1","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#set_featuresetnumfeatures/2","title":"OpenCV.TrackerMILParams.set_featuresetnumfeatures/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#set_samplerinitinradius/2","title":"OpenCV.TrackerMILParams.set_samplerinitinradius/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#set_samplerinitmaxnegnum/2","title":"OpenCV.TrackerMILParams.set_samplerinitmaxnegnum/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#set_samplersearchwinsize/2","title":"OpenCV.TrackerMILParams.set_samplersearchwinsize/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#set_samplertrackinradius/2","title":"OpenCV.TrackerMILParams.set_samplertrackinradius/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#set_samplertrackmaxnegnum/2","title":"OpenCV.TrackerMILParams.set_samplertrackmaxnegnum/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#set_samplertrackmaxposnum/2","title":"OpenCV.TrackerMILParams.set_samplertrackmaxposnum/2","type":"function"},{"doc":"","ref":"OpenCV.TrackerMILParams.html#trackermil_params/0","title":"OpenCV.TrackerMILParams.trackermil_params/0","type":"function"},{"doc":"","ref":"OpenCV.UMat.html","title":"OpenCV.UMat","type":"module"},{"doc":"","ref":"OpenCV.UMat.html#context/0","title":"OpenCV.UMat.context/0","type":"function"},{"doc":"","ref":"OpenCV.UMat.html#get/1","title":"OpenCV.UMat.get/1","type":"function"},{"doc":"","ref":"OpenCV.UMat.html#handle/2","title":"OpenCV.UMat.handle/2","type":"function"},{"doc":"","ref":"OpenCV.UMat.html#iscontinuous/1","title":"OpenCV.UMat.iscontinuous/1","type":"function"},{"doc":"","ref":"OpenCV.UMat.html#issubmatrix/1","title":"OpenCV.UMat.issubmatrix/1","type":"function"},{"doc":"","ref":"OpenCV.UMat.html#offset/1","title":"OpenCV.UMat.offset/1","type":"function"},{"doc":"","ref":"OpenCV.UMat.html#queue/0","title":"OpenCV.UMat.queue/0","type":"function"},{"doc":"","ref":"OpenCV.UMat.html#set_offset/2","title":"OpenCV.UMat.set_offset/2","type":"function"},{"doc":"","ref":"OpenCV.UMat.html#umat/2","title":"OpenCV.UMat.umat/2","type":"function"},{"doc":"","ref":"OpenCV.UMat.html#umat/3","title":"OpenCV.UMat.umat/3","type":"function"},{"doc":"","ref":"OpenCV.UMat.html#umat/4","title":"OpenCV.UMat.umat/4","type":"function"},{"doc":"usageFlags : UMatUsageFlags Python prototype (for reference): UMat ( rows , cols , type , s [ , usageFlags ] ) -&gt; &lt; UMat object &gt;","ref":"OpenCV.UMat.html#umat/5","title":"OpenCV.UMat.umat/5","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html","title":"OpenCV.UsacParams","type":"module"},{"doc":"","ref":"OpenCV.UsacParams.html#confidence/1","title":"OpenCV.UsacParams.confidence/1","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#isparallel/1","title":"OpenCV.UsacParams.isparallel/1","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#loiterations/1","title":"OpenCV.UsacParams.loiterations/1","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#lomethod/1","title":"OpenCV.UsacParams.lomethod/1","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#losamplesize/1","title":"OpenCV.UsacParams.losamplesize/1","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#maxiterations/1","title":"OpenCV.UsacParams.maxiterations/1","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#neighborssearch/1","title":"OpenCV.UsacParams.neighborssearch/1","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#randomgeneratorstate/1","title":"OpenCV.UsacParams.randomgeneratorstate/1","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#sampler/1","title":"OpenCV.UsacParams.sampler/1","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#score/1","title":"OpenCV.UsacParams.score/1","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#set_confidence/2","title":"OpenCV.UsacParams.set_confidence/2","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#set_isparallel/2","title":"OpenCV.UsacParams.set_isparallel/2","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#set_loiterations/2","title":"OpenCV.UsacParams.set_loiterations/2","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#set_lomethod/2","title":"OpenCV.UsacParams.set_lomethod/2","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#set_losamplesize/2","title":"OpenCV.UsacParams.set_losamplesize/2","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#set_maxiterations/2","title":"OpenCV.UsacParams.set_maxiterations/2","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#set_neighborssearch/2","title":"OpenCV.UsacParams.set_neighborssearch/2","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#set_randomgeneratorstate/2","title":"OpenCV.UsacParams.set_randomgeneratorstate/2","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#set_sampler/2","title":"OpenCV.UsacParams.set_sampler/2","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#set_score/2","title":"OpenCV.UsacParams.set_score/2","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#set_threshold/2","title":"OpenCV.UsacParams.set_threshold/2","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#threshold/1","title":"OpenCV.UsacParams.threshold/1","type":"function"},{"doc":"","ref":"OpenCV.UsacParams.html#usacparams/0","title":"OpenCV.UsacParams.usacparams/0","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html","title":"OpenCV.VariationalRefinement","type":"module"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#calcuv/5","title":"OpenCV.VariationalRefinement.calcuv/5","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#create/0","title":"OpenCV.VariationalRefinement.create/0","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#getalpha/1","title":"OpenCV.VariationalRefinement.getalpha/1","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#getdelta/1","title":"OpenCV.VariationalRefinement.getdelta/1","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#getfixedpointiterations/1","title":"OpenCV.VariationalRefinement.getfixedpointiterations/1","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#getgamma/1","title":"OpenCV.VariationalRefinement.getgamma/1","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#getomega/1","title":"OpenCV.VariationalRefinement.getomega/1","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#getsoriterations/1","title":"OpenCV.VariationalRefinement.getsoriterations/1","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#setalpha/2","title":"OpenCV.VariationalRefinement.setalpha/2","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#setdelta/2","title":"OpenCV.VariationalRefinement.setdelta/2","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#setfixedpointiterations/2","title":"OpenCV.VariationalRefinement.setfixedpointiterations/2","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#setgamma/2","title":"OpenCV.VariationalRefinement.setgamma/2","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#setomega/2","title":"OpenCV.VariationalRefinement.setomega/2","type":"function"},{"doc":"","ref":"OpenCV.VariationalRefinement.html#setsoriterations/2","title":"OpenCV.VariationalRefinement.setsoriterations/2","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html","title":"OpenCV.VideoCapture","type":"module"},{"doc":"","ref":"OpenCV.VideoCapture.html#get/2","title":"OpenCV.VideoCapture.get/2","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#getbackendname/1","title":"OpenCV.VideoCapture.getbackendname/1","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#getexceptionmode/1","title":"OpenCV.VideoCapture.getexceptionmode/1","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#grab/1","title":"OpenCV.VideoCapture.grab/1","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#isopened/1","title":"OpenCV.VideoCapture.isopened/1","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#open/2","title":"OpenCV.VideoCapture.open/2","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#open/3","title":"OpenCV.VideoCapture.open/3","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#open/4","title":"OpenCV.VideoCapture.open/4","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#read/1","title":"OpenCV.VideoCapture.read/1","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#release/1","title":"OpenCV.VideoCapture.release/1","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#retrieve/1","title":"OpenCV.VideoCapture.retrieve/1","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#set/3","title":"OpenCV.VideoCapture.set/3","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#setexceptionmode/2","title":"OpenCV.VideoCapture.setexceptionmode/2","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#videocapture/0","title":"OpenCV.VideoCapture.videocapture/0","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#videocapture/1","title":"OpenCV.VideoCapture.videocapture/1","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#videocapture/2","title":"OpenCV.VideoCapture.videocapture/2","type":"function"},{"doc":"","ref":"OpenCV.VideoCapture.html#videocapture/3","title":"OpenCV.VideoCapture.videocapture/3","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html","title":"OpenCV.VideoWriter","type":"module"},{"doc":"","ref":"OpenCV.VideoWriter.html#fourcc/4","title":"OpenCV.VideoWriter.fourcc/4","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#get/2","title":"OpenCV.VideoWriter.get/2","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#getbackendname/1","title":"OpenCV.VideoWriter.getbackendname/1","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#isopened/1","title":"OpenCV.VideoWriter.isopened/1","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#open/5","title":"OpenCV.VideoWriter.open/5","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#open/6","title":"OpenCV.VideoWriter.open/6","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#open/7","title":"OpenCV.VideoWriter.open/7","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#release/1","title":"OpenCV.VideoWriter.release/1","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#set/3","title":"OpenCV.VideoWriter.set/3","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#videowriter/0","title":"OpenCV.VideoWriter.videowriter/0","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#videowriter/4","title":"OpenCV.VideoWriter.videowriter/4","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#videowriter/5","title":"OpenCV.VideoWriter.videowriter/5","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#videowriter/6","title":"OpenCV.VideoWriter.videowriter/6","type":"function"},{"doc":"","ref":"OpenCV.VideoWriter.html#write/2","title":"OpenCV.VideoWriter.write/2","type":"function"},{"doc":"","ref":"OpenCV.WarperCreator.html","title":"OpenCV.WarperCreator","type":"module"}]